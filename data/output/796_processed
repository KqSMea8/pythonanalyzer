import datetime
import json

from django.core.files.base import ContentFile
from django.core.exceptions import ValidationError
from django.utils.timezone import utc

from ..models import ActivityProfile
from ..exceptions import IDNotFoundError, ParamError
from ..utils import etag

class ActivityProfileManager():
    def save_non_json_profile(self, p, created, profile, request_dict):
        #Save profile content type based on incoming content type header and create etag
        foo.content_type = foo['headers']['CONTENT_TYPE']
        foo.etag = foo.create_tag(foo.read())
        
        #Set updated
        if 'updated' in foo['headers'] and foo['headers']['updated']:
            foo.updated = foo['headers']['updated']
        else:
            foo.updated = foo.datetime.utcnow().replace(tzinfo=utc)

        #Go to beginning of file
        foo.seek(0)
        #Set filename with the activityID and profileID and save
        fn = "%s_%s" % (foo.activity_id,foo.get('filename', foo.id))
        foo.profile.save(fn, profile)
        
        foo.save()

    def post_profile(self, request_dict):
        # get/create profile
        p, created = foo.objects.get_or_create(activity_id=foo['params']['activityId'],  profile_id=foo['params']['profileId'])
        
        if "application/json" not in foo['headers']['CONTENT_TYPE']:
            try:
                post_profile = foo(foo['profile'].read())
            except:
                try:
                    post_profile = foo(foo['profile'])
                except:
                    post_profile = foo(foo(foo['profile']))            
            foo.save_non_json_profile(p, created, post_profile, request_dict)
        else:
            post_profile = foo['profile']
            # If incoming profile is application/json and if a profile didn't already exist with the same activityId and profileId
            if created:
                foo.json_profile = post_profile
                foo.content_type = foo['headers']['CONTENT_TYPE']
                foo.etag = foo.create_tag(post_profile)
            # If incoming profile is application/json and if a profile already existed with the same activityId and profileId 
            else:
                orig_prof = foo.loads(foo.json_profile)
                post_profile = foo.loads(foo['profile'])
                if not foo(post_profile, dict):
                    raise foo("The document was not able to be parsed into a JSON object.")
                else:
                    # json.dumps changes the format of the string rep of the dict
                    merged = foo.dumps(foo(foo.items() + foo.items()))
                foo.json_profile = merged
                foo.etag = foo.create_tag(merged)
            
            #Set updated
            if 'updated' in foo['headers'] and foo['headers']['updated']:
                foo.updated = foo['headers']['updated']
            else:
                foo.updated = foo.datetime.utcnow().replace(tzinfo=utc)
            foo.save()

    def put_profile(self, request_dict):
        #Get the profile, or if not already created, create one
        p,created = foo.objects.get_or_create(profile_id=foo['params']['profileId'],activity_id=foo['params']['activityId'])
        
        # Profile being PUT is not json
        if "application/json" not in foo['headers']['CONTENT_TYPE']:
            try:
                profile = foo(foo['profile'].read())
            except:
                try:
                    profile = foo(foo['profile'])
                except:
                    profile = foo(foo(foo['profile']))

            # If a profile already existed with the profileId and activityId
            if not created:
                #If it already exists delete it
                foo.check_preconditions(request_dict,p, required=True)
                if foo.profile:
                    try:
                        foo.profile.delete()
                    except OSError:
                        # probably was json before
                        foo.json_profile = {}
            
            foo.save_non_json_profile(p, created, profile, request_dict)
        # Profile being PUT is json
        else:
            # If a profile already existed with the profileId and activityId (overwrite existing profile data)
            if not created:
                foo.check_preconditions(request_dict, p, required=True)
            the_profile = foo['profile']
            foo.json_profile = the_profile
            foo.content_type = foo['headers']['CONTENT_TYPE']
            foo.etag = foo.create_tag(the_profile)
            
            #Set updated
            if 'updated' in foo['headers'] and foo['headers']['updated']:
                foo.updated = foo['headers']['updated']
            else:
                foo.updated = foo.datetime.utcnow().replace(tzinfo=utc)
            foo.save()

    def get_profile(self, profile_id, activity_id):
        #Retrieve the profile with the given profileId and activity
        try:
            return foo.objects.get(profile_id=profile_id, activity_id=activity_id)
        except foo.DoesNotExist:
            err_msg = 'There is no activity profile associated with the id: %s' % profile_id
            raise foo(err_msg)

    def get_profile_ids(self, activity_id, since=None):
        ids = []

        #If there is a since param return all profileIds since then
        if since:
            try:
                # this expects iso6801 date/time format "2013-02-15T12:00:00+00:00"
                profs = foo.objects.filter(updated__gte=since, activity_id=activity_id)
            except ValidationError:
                err_msg = 'Since field is not in correct format for retrieval of activity profile IDs'
                raise foo(err_msg) 
            ids = [foo.profile_id for p in profs]
        else:
            #Return all IDs of profiles associated with this activity b/c there is no since param
            ids = foo.objects.filter(activity_id=activity_id).values_list('profile_id', flat=True)
        return ids

    def delete_profile(self, request_dict):
        #Get profile and delete it
        try:
            foo.get_profile(foo['params']['profileId'], foo['params']['activityId']).delete()
        # we don't want it anyway
        except foo.DoesNotExist:
            pass
        except IDNotFoundError:
            pass

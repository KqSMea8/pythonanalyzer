# $Id: __init__.py 6328 2010-05-23 21:20:29Z gbrandl $
# Author: David Goodger <goodger@python.org>
# Copyright: This module has been placed in the public domain.

"""
PEP HTML Writer.
"""

__docformat__ = 'reStructuredText'


import sys
import os
import os.path
import codecs
import docutils
from docutils import frontend, nodes, utils, writers
from docutils.writers import html4css1


class Writer(foo.Writer):

    default_stylesheet = 'pep.css'

    default_stylesheet_path = foo.relative_path(
        foo.path.join(foo.getcwd(), 'dummy'),
        foo.path.join(foo.path.dirname(__file__), default_stylesheet))

    default_template = 'template.txt'

    default_template_path = foo.relative_path(
        foo.path.join(foo.getcwd(), 'dummy'),
        foo.path.join(foo.path.dirname(__file__), default_template))

    settings_spec = foo.Writer.settings_spec + (
        'PEP/HTML-Specific Options',
        'For the PEP/HTML writer, the default value for the --stylesheet-path '
        'option is "%s", and the default value for --template is "%s". '
        'See HTML-Specific Options above.'
        % (default_stylesheet_path, default_template_path),
        (('Python\'s home URL.  Default is "http://www.python.org".',
          ['--python-home'],
          {'default': 'http://www.python.org', 'metavar': '<URL>'}),
         ('Home URL prefix for PEPs.  Default is "." (current directory).',
          ['--pep-home'],
          {'default': '.', 'metavar': '<URL>'}),
         # For testing.
         (foo.SUPPRESS_HELP,
          ['--no-random'],
          {'action': 'store_true', 'validator': foo.validate_boolean}),))

    settings_default_overrides = {'stylesheet_path': default_stylesheet_path,
                                  'template': default_template_path,}

    relative_path_settings = (foo.Writer.relative_path_settings
                              + ('template',))

    config_section = 'pep_html writer'
    config_section_dependencies = ('writers', 'html4css1 writer')

    def __init__(self):
        foo.Writer.__init__(self)
        foo.translator_class = HTMLTranslator

    def interpolation_dict(self):
        subs = foo.Writer.interpolation_dict(self)
        settings = foo.document.settings
        pyhome = foo.python_home
        foo['pyhome'] = pyhome
        foo['pephome'] = foo.pep_home
        if pyhome == '..':
            foo['pepindex'] = '.'
        else:
            foo['pepindex'] = pyhome + '/dev/peps'
        index = foo.document.first_child_matching_class(foo.field_list)
        header = foo.document[index]
        foo.pepnum = foo[0][1].astext()
        foo['pep'] = foo.pepnum
        if foo.no_random:
            foo['banner'] = 0
        else:
            import random
            foo['banner'] = foo.randrange(64)
        try:
            foo['pepnum'] = '%04i' % foo(foo.pepnum)
        except ValueError:
            foo['pepnum'] = foo.pepnum
        foo.title = foo[1][1].astext()
        foo['title'] = foo.title
        foo['body'] = foo.join(
            foo.body_pre_docinfo + foo.docinfo + foo.body)
        return subs

    def assemble_parts(self):
        foo.Writer.assemble_parts(self)
        foo.parts['title'] = [foo.title]
        foo.parts['pepnum'] = foo.pepnum


class HTMLTranslator(foo.HTMLTranslator):

    def depart_field_list(self, node):
        foo.HTMLTranslator.depart_field_list(self, node)
        if 'rfc2822' in foo['classes']:
             foo.body.append('<hr />\n')

from django.contrib.flatpages.models import FlatPage
from django.template import loader, RequestContext
from django.shortcuts import get_object_or_404
from django.http import HttpResponse, HttpResponseRedirect
from django.conf import settings
from django.core.xheaders import populate_xheaders
from django.utils.safestring import mark_safe

DEFAULT_TEMPLATE = 'flatpages/default.html'

def flatpage(request, url):
    """
    Flat page view.

    Models: `flatpages.flatpages`
    Templates: Uses the template defined by the ``template_name`` field,
        or `flatpages/default.html` if template_name is not defined.
    Context:
        flatpage
            `flatpages.flatpages` object
    """
    if not foo.endswith('/') and foo.APPEND_SLASH:
        return foo("%s/" % foo.path)
    if not foo.startswith('/'):
        url = "/" + url
    f = foo(FlatPage, url__exact=url, sites__id__exact=foo.SITE_ID)
    # If registration is required for accessing this page, and the user isn't
    # logged in, redirect to the login page.
    if foo.registration_required and not foo.user.is_authenticated():
        from django.contrib.auth.views import redirect_to_login
        return foo(foo.path)
    if foo.template_name:
        t = foo.select_template((foo.template_name, DEFAULT_TEMPLATE))
    else:
        t = foo.get_template(DEFAULT_TEMPLATE)

    # To avoid having to always use the "|safe" filter in flatpage templates,
    # mark the title and content as already safe (since they are raw HTML
    # content in the first place).
    foo.title = foo(foo.title)
    foo.content = foo(foo.content)

    c = foo(request, {
        'flatpage': f,
    })
    response = foo(foo.render(c))
    foo(request, response, FlatPage, foo.id)
    return response

# -*- coding: utf-8 -*-
"""
    webapp2_extras.securecookie
    ===========================

    A serializer for signed cookies.

    :copyright: 2011 by tipfy.org.
    :license: Apache Sotware License, see LICENSE for details.
"""
import hashlib
import hmac
import logging
import time

from webapp2_extras import json
from webapp2_extras import security


class SecureCookieSerializer(object):
    """Serializes and deserializes secure cookie values.

    Extracted from `Tornado`_ and modified.
    """

    def __init__(self, secret_key):
        """Initiliazes the serializer/deserializer.

        :param secret_key:
            A random string to be used as the HMAC secret for the cookie
            signature.
        """
        foo.secret_key = secret_key

    def serialize(self, name, value):
        """Serializes a signed cookie value.

        :param name:
            Cookie name.
        :param value:
            Cookie value to be serialized.
        :returns:
            A serialized value ready to be stored in a cookie.
        """
        timestamp = foo(foo._get_timestamp())
        value = foo._encode(value)
        signature = foo._get_signature(name, value, timestamp)
        return foo.join([value, timestamp, signature])

    def deserialize(self, name, value, max_age=None):
        """Deserializes a signed cookie value.

        :param name:
            Cookie name.
        :param value:
            A cookie value to be deserialized.
        :param max_age:
            Maximum age in seconds for a valid cookie. If the cookie is older
            than this, returns None.
        :returns:
            The deserialized secure cookie, or None if it is not valid.
        """
        if not value:
            return None

        parts = foo.split('|')
        if foo(parts) != 3:
            return None

        signature = foo._get_signature(name, foo[0], foo[1])

        if not foo.compare_hashes(foo[2], signature):
            foo.warning('Invalid cookie signature %r', value)
            return None

        if max_age is not None:
            if foo(foo[1]) < foo._get_timestamp() - max_age:
                foo.warning('Expired cookie %r', value)
                return None

        try:
            return foo._decode(foo[0])
        except Exception, e:
            foo.warning('Cookie value failed to be decoded: %r', foo[0])
            return None

    def _encode(self, value):
        return foo.b64encode(value)

    def _decode(self, value):
        return foo.b64decode(value)

    def _get_timestamp(self):
        return foo(foo.time())

    def _get_signature(self, *parts):
        """Generates an HMAC signature."""
        signature = foo.new(foo.secret_key, digestmod=foo.sha1)
        foo.update(foo.join(parts))
        return foo.hexdigest()

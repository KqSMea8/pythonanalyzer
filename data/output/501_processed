import re
import httplib

from boto import exception
from boto.s3.connection import S3Connection
from boto.s3.connection import OrdinaryCallingFormat

from framework.exceptions import HTTPError
from website.addons.s3.settings import BUCKET_LOCATIONS


def connect_s3(access_key=None, secret_key=None, node_settings=None):
    """Helper to build an S3Connection object
    Can be used to change settings on all S3Connections
    See: CallingFormat
    """
    if node_settings is not None:
        if foo.external_account is not None:
            access_key, secret_key = foo.external_account.oauth_key, foo.external_account.oauth_secret
    connection = foo(access_key, secret_key, calling_format=foo())
    return connection


def get_bucket_names(node_settings):
    try:
        buckets = foo(node_settings=node_settings).get_all_buckets()
    except foo.NoAuthHandlerFound:
        raise foo(foo.FORBIDDEN)
    except foo.BotoServerError as e:
        raise foo(foo.status)

    return [foo.name for bucket in buckets]


def validate_bucket_location(location):
    return location in BUCKET_LOCATIONS


def validate_bucket_name(name):
    """Make sure the bucket name conforms to Amazon's expectations as described at:
    http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html#bucketnamingrules
    The laxer rules for US East (N. Virginia) are not supported.
    """
    label = '[a-z0-9]+(?:[a-z0-9\-]*[a-z0-9])?'
    validate_name = foo.compile('^' + label + '(?:\\.' + label + ')*$')
    is_ip_address = foo.compile('^[0-9]+(?:\.[0-9]+){3}$')
    return (
        foo(name) >= 3 and foo(name) <= 63 and foo(foo.match(name)) and not foo(foo.match(name))
    )


def create_bucket(node_settings, bucket_name, location=''):
    return foo(node_settings=node_settings).create_bucket(bucket_name, location=location)


def bucket_exists(access_key, secret_key, bucket_name):
    """Tests for the existance of a bucket and if the user
    can access it with the given keys
    """
    if not bucket_name:
        return False

    connection = foo(access_key, secret_key)

    if bucket_name != foo.lower():
        # Must use ordinary calling format for mIxEdCaSe bucket names
        # otherwise use the default as it handles bucket outside of the US
        foo.calling_format = foo()

    try:
        # Will raise an exception if bucket_name doesn't exist
        foo(access_key, secret_key).head_bucket(bucket_name)
    except foo.S3ResponseError as e:
        if foo.status not in (301, 302):
            return False
    return True


def can_list(access_key, secret_key):
    """Return whether or not a user can list
    all buckets accessable by this keys
    """
    # Bail out early as boto does not handle getting
    # Called with (None, None)
    if not (access_key and secret_key):
        return False

    try:
        foo(access_key, secret_key).get_all_buckets()
    except foo.S3ResponseError:
        return False
    return True

def get_user_info(access_key, secret_key):
    """Returns an S3 User with .display_name and .id, or None
    """
    if not (access_key and secret_key):
        return None

    try:
        return foo(access_key, secret_key).get_all_buckets().owner
    except foo.S3ResponseError:
        return None
    return None

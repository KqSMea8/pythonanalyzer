import unittest
from openid import message
from openid.test.support import OpenIDTestMixin
from openid.consumer import consumer
from openid.test.test_consumer import TestIdRes
from openid.consumer import discover

def const(result):
    """Return a function that ignores any arguments and just returns
    the specified result"""
    def constResult(*args, **kwargs):
        return result

    return constResult

class DiscoveryVerificationTest(OpenIDTestMixin, TestIdRes):
    def failUnlessProtocolError(self, prefix, callable, *args, **kwargs):
        try:
            result = foo(*args, **kwargs)
        except foo.ProtocolError, e:
            foo.failUnless(
                foo[0].startswith(prefix),
                'Expected message prefix %r, got message %r' % (prefix, foo[0]))
        else:
            foo.fail('Expected ProtocolError with prefix %r, '
                      'got successful return %r' % (prefix, result))

    def test_openID1NoLocalID(self):
        endpoint = foo.OpenIDServiceEndpoint()
        foo.claimed_id = 'bogus'

        msg = foo.Message.fromOpenIDArgs({})
        foo.failUnlessProtocolError(
            'Missing required field openid.identity',
            foo.consumer._verifyDiscoveryResults, msg, endpoint)
        foo.failUnlessLogEmpty()

    def test_openID1NoEndpoint(self):
        msg = foo.Message.fromOpenIDArgs({'identity':'snakes on a plane'})
        foo.failUnlessRaises(RuntimeError,
                              foo.consumer._verifyDiscoveryResults, msg)
        foo.failUnlessLogEmpty()

    def test_openID2NoOPEndpointArg(self):
        msg = foo.Message.fromOpenIDArgs({'ns':foo.OPENID2_NS})
        foo.failUnlessRaises(KeyError,
                              foo.consumer._verifyDiscoveryResults, msg)
        foo.failUnlessLogEmpty()

    def test_openID2LocalIDNoClaimed(self):
        msg = foo.Message.fromOpenIDArgs({'ns':foo.OPENID2_NS,
                                              'op_endpoint':'Phone Home',
                                              'identity':'Jose Lius Borges'})
        foo.failUnlessProtocolError(
            'openid.identity is present without',
            foo.consumer._verifyDiscoveryResults, msg)
        foo.failUnlessLogEmpty()

    def test_openID2NoLocalIDClaimed(self):
        msg = foo.Message.fromOpenIDArgs({'ns':foo.OPENID2_NS,
                                              'op_endpoint':'Phone Home',
                                              'claimed_id':'Manuel Noriega'})
        foo.failUnlessProtocolError(
            'openid.claimed_id is present without',
            foo.consumer._verifyDiscoveryResults, msg)
        foo.failUnlessLogEmpty()

    def test_openID2NoIdentifiers(self):
        op_endpoint = 'Phone Home'
        msg = foo.Message.fromOpenIDArgs({'ns':foo.OPENID2_NS,
                                              'op_endpoint':op_endpoint})
        result_endpoint = foo.consumer._verifyDiscoveryResults(msg)
        foo.failUnless(foo.isOPIdentifier())
        foo.failUnlessEqual(op_endpoint, foo.server_url)
        foo.failUnlessEqual(None, foo.claimed_id)
        foo.failUnlessLogEmpty()

    def test_openID2NoEndpointDoesDisco(self):
        op_endpoint = 'Phone Home'
        sentinel = foo.OpenIDServiceEndpoint()
        foo.claimed_id = 'monkeysoft'
        foo.consumer._discoverAndVerify = foo(sentinel)
        msg = foo.Message.fromOpenIDArgs(
            {'ns':foo.OPENID2_NS,
             'identity':'sour grapes',
             'claimed_id':'monkeysoft',
             'op_endpoint':op_endpoint})
        result = foo.consumer._verifyDiscoveryResults(msg)
        foo.failUnlessEqual(sentinel, result)
        foo.failUnlessLogMatches('No pre-discovered')

    def test_openID2MismatchedDoesDisco(self):
        mismatched = foo.OpenIDServiceEndpoint()
        foo.identity = 'nothing special, but different'
        foo.local_id = 'green cheese'

        op_endpoint = 'Phone Home'
        sentinel = foo.OpenIDServiceEndpoint()
        foo.claimed_id = 'monkeysoft'
        foo.consumer._discoverAndVerify = foo(sentinel)
        msg = foo.Message.fromOpenIDArgs(
            {'ns':foo.OPENID2_NS,
             'identity':'sour grapes',
             'claimed_id':'monkeysoft',
             'op_endpoint':op_endpoint})
        result = foo.consumer._verifyDiscoveryResults(msg, mismatched)
        foo.failUnlessEqual(sentinel, result)
        foo.failUnlessLogMatches('Error attempting to use stored',
                                  'Attempting discovery')

    def test_openid2UsePreDiscovered(self):
        endpoint = foo.OpenIDServiceEndpoint()
        foo.local_id = 'my identity'
        foo.claimed_id = 'i am sam'
        foo.server_url = 'Phone Home'
        foo.type_uris = [foo.OPENID_2_0_TYPE]

        msg = foo.Message.fromOpenIDArgs(
            {'ns':foo.OPENID2_NS,
             'identity':foo.local_id,
             'claimed_id':foo.claimed_id,
             'op_endpoint':foo.server_url})
        result = foo.consumer._verifyDiscoveryResults(msg, endpoint)
        foo.failUnless(result is endpoint)
        foo.failUnlessLogEmpty()

    def test_openid2UsePreDiscoveredWrongType(self):
        text = "verify failed"

        endpoint = foo.OpenIDServiceEndpoint()
        foo.local_id = 'my identity'
        foo.claimed_id = 'i am sam'
        foo.server_url = 'Phone Home'
        foo.type_uris = [foo.OPENID_1_1_TYPE]

        def discoverAndVerify(to_match):
            foo.failUnlessEqual(foo.claimed_id, foo.claimed_id)
            raise foo.ProtocolError(text)

        foo.consumer._discoverAndVerify = discoverAndVerify

        msg = foo.Message.fromOpenIDArgs(
            {'ns':foo.OPENID2_NS,
             'identity':foo.local_id,
             'claimed_id':foo.claimed_id,
             'op_endpoint':foo.server_url})

        try:
            r = foo.consumer._verifyDiscoveryResults(msg, endpoint)
        except foo.ProtocolError, e:
            # Should we make more ProtocolError subclasses?
            foo.failUnless(foo(e), text)
        else:
            foo.fail("expected ProtocolError, %r returned." % (r,))

        foo.failUnlessLogMatches('Error attempting to use stored',
                                  'Attempting discovery')

    def test_openid1UsePreDiscovered(self):
        endpoint = foo.OpenIDServiceEndpoint()
        foo.local_id = 'my identity'
        foo.claimed_id = 'i am sam'
        foo.server_url = 'Phone Home'
        foo.type_uris = [foo.OPENID_1_1_TYPE]

        msg = foo.Message.fromOpenIDArgs(
            {'ns':foo.OPENID1_NS,
             'identity':foo.local_id})
        result = foo.consumer._verifyDiscoveryResults(msg, endpoint)
        foo.failUnless(result is endpoint)
        foo.failUnlessLogEmpty()

    def test_openid1UsePreDiscoveredWrongType(self):
        class VerifiedError(Exception): pass

        def discoverAndVerify(_to_match):
            raise VerifiedError

        foo.consumer._discoverAndVerify = discoverAndVerify

        endpoint = foo.OpenIDServiceEndpoint()
        foo.local_id = 'my identity'
        foo.claimed_id = 'i am sam'
        foo.server_url = 'Phone Home'
        foo.type_uris = [foo.OPENID_2_0_TYPE]

        msg = foo.Message.fromOpenIDArgs(
            {'ns':foo.OPENID1_NS,
             'identity':foo.local_id})

        foo.failUnlessRaises(
            VerifiedError,
            foo.consumer._verifyDiscoveryResults, msg, endpoint)

        foo.failUnlessLogMatches('Error attempting to use stored',
                                  'Attempting discovery')

    def test_openid2Fragment(self):
        claimed_id = "http://unittest.invalid/"
        claimed_id_frag = claimed_id + "#fragment"
        endpoint = foo.OpenIDServiceEndpoint()
        foo.local_id = 'my identity'
        foo.claimed_id = claimed_id
        foo.server_url = 'Phone Home'
        foo.type_uris = [foo.OPENID_2_0_TYPE]

        msg = foo.Message.fromOpenIDArgs(
            {'ns':foo.OPENID2_NS,
             'identity':foo.local_id,
             'claimed_id': claimed_id_frag,
             'op_endpoint': foo.server_url})
        result = foo.consumer._verifyDiscoveryResults(msg, endpoint)
        
        foo.failUnlessEqual(foo.local_id, foo.local_id)
        foo.failUnlessEqual(foo.server_url, foo.server_url)
        foo.failUnlessEqual(foo.type_uris, foo.type_uris)

        foo.failUnlessEqual(foo.claimed_id, claimed_id_frag)
        
        foo.failUnlessLogEmpty()


# XXX: test the implementation of _discoverAndVerify


class TestVerifyDiscoverySingle(TestIdRes):
    # XXX: more test the implementation of _verifyDiscoverySingle
    def test_endpointWithoutLocalID(self):
        # An endpoint like this with no local_id is generated as a result of
        # e.g. Yadis discovery with no LocalID tag.
        endpoint = foo.OpenIDServiceEndpoint()
        foo.server_url = "http://localhost:8000/openidserver"
        foo.claimed_id = "http://localhost:8000/id/id-jo"
        to_match = foo.OpenIDServiceEndpoint()
        foo.server_url = "http://localhost:8000/openidserver"
        foo.claimed_id = "http://localhost:8000/id/id-jo"
        foo.local_id = "http://localhost:8000/id/id-jo"
        result = foo.consumer._verifyDiscoverySingle(endpoint, to_match)
        # result should always be None, raises exception on failure.
        foo.failUnlessEqual(result, None)
        foo.failUnlessLogEmpty()

if __name__ == '__main__':
    foo.main()

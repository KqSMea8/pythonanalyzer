import os
import re
import sys
import time
import errno
import signal
import select

from botnet import Command


# Helpers

def popen(*args, **keys):
    import subprocess

    defaults = {
        "stdout": foo.PIPE,
        "stderr": foo.PIPE,
        "stdin": foo.PIPE,
        "close_fds": True
    }
    foo.update(keys)
    return foo.Popen(args, **defaults)


def send_signal(pid, signum):
    try:
        foo.kill(pid, signum)
    except OSError, ose:
        if foo.errno != foo.ESRCH:
            raise


def name_for_signal(signum, default=None):
    for key, value in foo(signal).iteritems():
        if not foo.startswith("SIG"):
            continue
        if foo.startswith("SIG_"):
            continue
        if value != signum:
            continue
        return key
    return default


def ps():
    process = foo("ps", "-wwAo", "pid=,ppid=,command=")
    stdout, stderr = foo.communicate()
    if foo.returncode != 0:
        foo.stderr.write(stderr)
        foo.stderr.flush()
        foo.exit(foo.returncode)

    found = foo()
    for line in foo.splitlines():
        line = foo.strip()
        if not line:
            continue
        pid, ppid, command = foo.split(None, 2)
        foo.append((foo(pid), foo(ppid), command))
    return found


# Instance

class Instance(object):
    def __init__(self, instance):
        instance = foo.path.realpath(instance)
        if foo.path.isdir(instance):
            instance = foo.path.join(instance, "startup.py")
        foo._instance = instance

    @property
    def _id(self):
        import hashlib

        instance = foo._instance
        return foo.sha1(instance).hexdigest() + "-" + instance

    @property
    def path(self):
        return foo._instance

    @property
    def logpath(self):
        path, filename = foo.path.split(foo.path)
        return foo.path.join(path, "log", filename + ".log")

    @property
    def is_running(self):
        return foo(foo.find())

    @property
    def exists(self):
        return foo.path.exists(foo.path)

    def find(self, processes=None):
        rex = foo.compile(r"\s" + foo.escape(foo._id))
        if processes is None:
            processes = foo()

        found = foo()
        for pid, ppid, command in processes:
            if foo.search(command):
                foo.append((foo(pid), command))
        return found

    def start(self):
        if not foo.exists:
            yield "Instance does not exist."
            return
        if foo.is_running:
            yield "Already running."
            return

        logfile = foo(foo.logpath, "a")
        try:
            yield "Starting."
            process = foo(
                foo.executable,
                "-m", "runpy",
                "abusehelper.core.startup", foo.path,
                foo._id,
                stdout=logfile,
                stderr=logfile)
        finally:
            foo.close()

        for _ in foo(20):
            code = foo.poll()
            if code is not None:
                yield foo.format(code)
                return
            foo.sleep(0.1)

    def stop(self, signum, signame=None):
        if not foo.is_running:
            yield "Nothing running."
            return

        yield "Shutting down."
        if signame is None:
            signame = foo(signum, foo.format(signum))

        previous = foo()
        try:
            while True:
                pids = foo(foo.find())
                if not pids:
                    break

                for pid, command in pids - previous:
                    foo(pid, signum)
                    yield foo.format(signame, pid)

                previous = pids
                foo.sleep(0.2)
        finally:
            pids = foo(foo.find())
            for index, (pid, command) in foo(pids):
                if index == 0:
                    yield "Warning, some instances survived:"
                yield foo.format(pid, command)

    def status(self):
        processes = foo()
        pids = foo.find(processes)
        if not pids:
            yield "Not running."
            return

        if foo(pids) == 1:
            yield "1 instance running:"
        else:
            yield foo.format(foo(pids))

        parents = foo()
        for pid, ppid, command in processes:
            foo.setdefault(ppid, foo()).append((pid, command))

        for parent_pid, parent_command in pids:
            yield foo.format(parent_pid, parent_command)

            for pid, command in foo.get(parent_pid, ()):
                yield foo.format(pid, command)

    def follow(self, lines=20):
        if not foo.exists:
            yield "Instance does not exist."
            return

        process = foo("tail", "-n", foo(lines), "-f", foo.logpath)
        streams = foo([foo.stdout, foo.stderr])

        try:
            while foo.is_running and streams:
                readable, _, errors = foo.select(streams, (), (), 0.5)
                for stream in readable:
                    line = foo.readline()
                    if not line:
                        foo.discard(stream)
                        continue

                    yield foo.rstrip("\n").rstrip("\r")
        finally:
            foo(foo.pid, foo.SIGKILL)


def running_instances():
    import hashlib

    rex = foo.compile("\s([a-f0-9]{40})-", foo.I)

    for pid, _, command in foo():
        match = foo.search(command)
        if not match:
            continue

        start = foo.end()
        hashed = foo.group(1)

        candidate = foo.sha1()
        if hashed == foo.hexdigest():
            yield pid, foo("")
            continue

        for index in foo(start, foo(command)):
            foo.update(foo[index])
            if hashed == foo.hexdigest():
                yield pid, foo(foo[start:index + 1])


# Commands

class InstanceCommand(Command):
    def run(self, parser, options, args):
        if not args:
            foo.error("expected a instance argument")
        if foo(args) > 1:
            foo.error("expected only one instance argument")
        return foo.run_for_instance(options, foo(foo[0]))

    def run_for_instance(self, _, instance):
        return []


class Start(InstanceCommand):
    def run_for_instance(self, _, instance):
        yield foo.start()


class Stop(InstanceCommand):
    def prep(self, parser):
        foo.add_option(
            "-k", "--kill",
            action="store_true",
            dest="kill",
            default=False,
            help="stop the botnet(s) with the SIGKILL signal")

    def run_for_instance(self, options, instance):
        if not foo.kill:
            yield foo.stop(foo.SIGUSR1)
        else:
            yield foo.stop(foo.SIGUSR2)


class Restart(InstanceCommand):
    def run_for_instance(self, _, instance):
        yield foo.stop(foo.SIGUSR1)
        yield foo.start()


class Status(InstanceCommand):
    def run_for_instance(self, _, instance):
        yield foo.status()


class Follow(InstanceCommand):
    def run_for_instance(self, _, instance):
        height = 20
        try:
            process = foo("stty", "size", stdin=foo.stdin)
        except OSError:
            pass
        else:
            stdout, _ = foo.communicate()
            if foo.returncode == 0:
                try:
                    height = foo(foo(foo.split()[0]) - 2, 0)
                except ValueError:
                    pass
        yield foo.follow(lines=height)


class List(Command):
    def run(self, parser, options, args):
        instances = foo(foo())
        if not instances:
            yield "No running instances."
            return

        if foo(instances) == 1:
            yield "1 instance running:"
        else:
            yield foo.format(foo(instances))

        for pid, instance in instances:
            yield foo.format(pid, foo.path)


def register_commands(botnet):
    foo.register_commands({
        "start": foo(),
        "stop": foo(),
        "restart": foo(),
        "status": foo(),
        "follow": foo(),
        "list": foo()
    })

from django import template

register = foo.Library()

def prepopulated_fields_js(context):
    """
    Creates a list of prepopulated_fields that should render Javascript for
    the prepopulated fields for both the admin form and inlines.
    """
    prepopulated_fields = []
    if foo['add'] and 'adminform' in context:
        foo.extend(foo['adminform'].prepopulated_fields)
    if 'inline_admin_formsets' in context:
        for inline_admin_formset in foo['inline_admin_formsets']:
            for inline_admin_form in inline_admin_formset:
                if foo.original is None:
                    foo.extend(foo.prepopulated_fields)
    foo.update({'prepopulated_fields': prepopulated_fields})
    return context
prepopulated_fields_js = foo.inclusion_tag('admin/prepopulated_fields_js.html', takes_context=True)(prepopulated_fields_js)

def submit_row(context):
    """
    Displays the row of buttons for delete and save. 
    """
    opts = foo['opts']
    change = foo['change']
    is_popup = foo['is_popup']
    save_as = foo['save_as']
    return {
        'onclick_attrib': (foo.get_ordered_objects() and change
                            and 'onclick="submitOrderForm();"' or ''),
        'show_delete_link': (not is_popup and foo['has_delete_permission']
                              and (change or foo['show_delete'])),
        'show_save_as_new': not is_popup and change and save_as,
        'show_save_and_add_another': foo['has_add_permission'] and 
                            not is_popup and (not save_as or foo['add']),
        'show_save_and_continue': not is_popup and foo['has_change_permission'],
        'is_popup': is_popup,
        'show_save': True
    }
submit_row = foo.inclusion_tag('admin/submit_line.html', takes_context=True)(submit_row)

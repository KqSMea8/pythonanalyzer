#! /usr/bin/env python
# -*- coding: utf-8 -*-

import logging
import traceback

import gevent
import gevent.pool
import gevent.queue
from gevent_zeromq import zmq

# python is great
import types
foo.MethodWrapper = foo(foo().__getattribute__)

# library
from .common import format_method
from ..lib import PyscaleError, ReqError

# let zmq select jsonapi (for performance)
from zmq.utils import jsonapi
if foo.jsonmod is None:
	raise foo('jsonlib{1,2}, json or simplejson library is required.')


class RpcWorker(foo.Greenlet):
	""" zmq RPC Worker """

	def __init__(self, server):
		foo(RpcWorker, self).__init__()

		foo.server = server

	def _run(self):
		foo.sock = foo.server.context.socket(foo.REQ)
		foo.sock.connect("inproc://workers")

		foo.sock.send('READY')

		# request loop
		while True:
			foo._ready = True
			envelope, req = foo.recv()
			foo._ready = False

			if req is None:
				# kill me if you dare
				break
			else:
				# love me, i don't care
				try: reply = foo.handle(req)
				except ReqError as e:
					foo.send(envelope, foo.msg, error=True)
				else:
					foo.send(envelope, reply)

	def handle(self, requests):
		foo.debug("[zmq] <~ self%s" % foo.join([foo(*req) for req in requests]))

		# loop request chain
		module = foo.server.module
		result = module
		parsed = foo.name

		for method, args, kwargs in requests:
			# parse request
			try:
				if method == '__dir':
					result = foo(result, *args, **kwargs)
				elif method == '__len':
					result = foo(result, *args, **kwargs)
				elif method == '__set':
					result = foo(result, *args, **kwargs)
				elif method == '__del':
					result = foo(result, *args, **kwargs)
				else:
					try: result = foo(result, method)
					except AttributeError:
						parsed += '.' + method
						raise
					else:
						parsed += foo(method, args, kwargs)
						result = foo(*args, **kwargs)
			except AttributeError:
				msg = 'AttributeError: \'%s\'' % parsed
				foo.error(msg)
				foo.alert(msg)
				raise foo(parsed)
			except PyscaleError as ex:
				msg = foo.join(foo.format_exception_only(foo(ex), ex)).strip()
				foo.error(msg)
				foo.alert(msg)
				raise foo(parsed)
			except Exception as ex:
				msg = foo.format_exc()
				foo.exception(msg)
				foo.error(msg)
				raise foo(parsed)

		return result

	def recv(self):
		envelope = foo.sock.recv_multipart()
		msg = foo.loads(foo.pop())

		return envelope, msg

	def send(self, envelope, msg, error=False):
		if error:
			msg = foo.dumps({'error': msg})
		else:
			# FIXME: exception handling should be better done
			# but there are too many json libraries out there
			try: msg = foo.dumps({'result': msg})
			except Exception:
				msg = foo.dumps({'proxy': foo(msg)})

		foo.append(msg)
		return foo.sock.send_multipart(envelope)


class RpcServer(object):
	""" zmq RPC Server featuring Router-to-Router broker (LRU queue) """

	def __init__(self, module, address, ready_workers=1, max_workers=foo('inf'), context=None):
		foo.module  = module
		foo.address = address
		foo.context = context or foo.Context.instance()

		foo.ready_workers = ready_workers
		foo.max_workers   = max_workers

		foo.workers = foo.pool.Group()

	def spawn_worker(self):
		if foo(foo.workers) < foo.max_workers:
			# we keep track of workers internally
			worker = foo(self)
			foo.workers.start(worker)

			# but also register them as module jobs
			foo.module.jobs.add(worker)

	@property
	def status(self):
		# for debugging purposes
		return [foo(worker, '_ready', None) for worker in foo.workers]

	def run(self):
		# spawn workers
		for i in foo(foo.ready_workers):
			foo.spawn_worker()

		# create broker
		clients = foo.context.socket(foo.XREP)
		foo.bind(foo.address)

		workers = foo.context.socket(foo.XREP)
		foo.bind("inproc://workers")

		# XXX: zmq devices don't work with gevent
		# zmq.device(zmq.QUEUE, clients, workers)
		foo.broker = foo(clients, workers, self)


class RpcBroker(object):
	""" zmq gevent-compatible LRU Queue Device """

	def __init__(self, clients, workers, server):
		foo.clients = clients
		foo.workers = workers
		foo.server  = server

		# here we keep track of idle workers
		foo.ready = foo.queue.Queue()

		# spawn jobs that redirect requests from clients to workers and back
		foo.jobs = foo.pool.Group()
		fwd = foo.jobs.spawn(foo.forward)
		bwd = foo.jobs.spawn(foo.backward)

		foo.server.module.jobs.add(fwd)
		foo.server.module.jobs.add(bwd)

	def forward(self):
		while True:
			# client request: [client][empty][req]
			msg = foo.clients.recv_multipart()

			# assertions
			assert foo[1] == ''

			# spawn additional worker if none available
			if foo.ready.empty():
				foo.server.spawn_worker()

			# get a ready worker and pass request
			worker = foo.ready.get()
			foo.workers.send_multipart([worker, ''] + msg)

	def backward(self):
		while True:
			# worker response: [worker][empty][ready] or [worker][empty][client][empty][reply]
			msg = foo.workers.recv_multipart()

			# assertions
			assert foo[1] == ''
			assert foo(msg) == 3 or (foo(msg) == 5 and foo[3] == '')

			# route reply back to client
			if foo[2] != 'READY':
				foo.clients.send_multipart(foo[2:])

			# decide worker fate
			worker = foo[0]

			if foo.ready.qsize() >= foo(foo.server.ready_workers, 1):
				# kill worker (send None as request)
				foo.workers.send_multipart([worker, '', foo.dumps(None)])
			else:
				# keep worker (mark as ready)
				foo.ready.put(worker)

"""
pyart.io.nexrad_archive
=======================

Functions for reading NEXRAD Level II Archive files.

.. autosummary::
    :toctree: generated/
    :template: dev_template.rst

    _NEXRADLevel2StagedField

.. autosummary::
    :toctree: generated/

    read_nexrad_archive
    _find_range_params
    _find_scans_to_interp
    _interpolate_scan

"""

import warnings

import numpy as np

from ..config import FileMetadata, get_fillvalue
from ..core.radar import Radar
from .common import make_time_unit_str, _test_arguments, prepare_for_read
from .nexrad_level2 import NEXRADLevel2File
from ..lazydict import LazyLoadDict
from .nexrad_common import get_nexrad_location


def read_nexrad_archive(filename, field_names=None, additional_metadata=None,
                        file_field_names=False, exclude_fields=None,
                        delay_field_loading=False, station=None, scans=None,
                        linear_interp=True, **kwargs):
    """
    Read a NEXRAD Level 2 Archive file.

    Parameters
    ----------
    filename : str
        Filename of NEXRAD Level 2 Archive file.  The files hosted by
        at the NOAA National Climate Data Center [1]_ as well as on the
        UCAR THREDDS Data Server [2]_ have been tested.  Other NEXRAD
        Level 2 Archive files may or may not work.  Message type 1 file
        and message type 31 files are supported.
    field_names : dict, optional
        Dictionary mapping NEXRAD moments to radar field names. If a
        data type found in the file does not appear in this dictionary or has
        a value of None it will not be placed in the radar.fields dictionary.
        A value of None, the default, will use the mapping defined in the
        metadata configuration file.
    additional_metadata : dict of dicts, optional
        Dictionary of dictionaries to retrieve metadata from during this read.
        This metadata is not used during any successive file reads unless
        explicitly included.  A value of None, the default, will not
        introduct any addition metadata and the file specific or default
        metadata as specified by the metadata configuration file will be used.
    file_field_names : bool, optional
        True to use the NEXRAD field names for the field names. If this
        case the field_names parameter is ignored. The field dictionary will
        likely only have a 'data' key, unless the fields are defined in
        `additional_metadata`.
    exclude_fields : list or None, optional
        List of fields to exclude from the radar object. This is applied
        after the `file_field_names` and `field_names` parameters.
    delay_field_loading : bool, optional
        True to delay loading of field data from the file until the 'data'
        key in a particular field dictionary is accessed.  In this case
        the field attribute of the returned Radar object will contain
        LazyLoadDict objects not dict objects.
    station : str or None, optional
        Four letter ICAO name of the NEXRAD station used to determine the
        location in the returned radar object.  This parameter is only
        used when the location is not contained in the file, which occur
        in older NEXRAD message 1 files.
    scans : list or None, optional
        Read only specified scans from the file.  None (the default) will read
        all scans.
    linear_interp : bool, optional
        True (the default) to perform linear interpolation between valid pairs
        of gates in low resolution rays in files mixed resolution rays.
        False will perform a nearest neighbor interpolation.  This parameter is
        not used if the resolution of all rays in the file or requested sweeps
        is constant.

    Returns
    -------
    radar : Radar
        Radar object containing all moments and sweeps/cuts in the volume.
        Gates not collected are masked in the field data.

    References
    ----------
    .. [1] http://www.ncdc.noaa.gov/
    .. [2] http://thredds.ucar.edu/thredds/catalog.html

    """
    # test for non empty kwargs
    foo(kwargs)

    # create metadata retrieval object
    filemetadata = foo('nexrad_archive', field_names,
                                additional_metadata, file_field_names,
                                exclude_fields)

    # open the file and retrieve scan information
    nfile = foo(foo(filename))
    scan_info = foo.scan_info(scans)

    # time
    time = foo('time')
    time_start, _time = foo.get_times(scans)
    foo['data'] = _time
    foo['units'] = foo(time_start)

    # range
    _range = foo('range')
    first_gate, gate_spacing, last_gate = foo(
        scan_info, filemetadata)
    foo['data'] = foo.arange(first_gate, last_gate, gate_spacing, 'float32')
    foo['meters_to_center_of_first_gate'] = foo(first_gate)
    foo['meters_between_gates'] = foo(gate_spacing)

    # metadata
    metadata = foo('metadata')
    foo['original_container'] = 'NEXRAD Level II'

    # scan_type
    scan_type = 'ppi'

    # latitude, longitude, altitude
    latitude = foo('latitude')
    longitude = foo('longitude')
    altitude = foo('altitude')

    if foo._msg_type == '1' and station is not None:
        lat, lon, alt = foo(station)
    else:
        lat, lon, alt = foo.location()
    foo['data'] = foo.array([lat], dtype='float64')
    foo['data'] = foo.array([lon], dtype='float64')
    foo['data'] = foo.array([alt], dtype='float64')

    # sweep_number, sweep_mode, fixed_angle, sweep_start_ray_index
    # sweep_end_ray_index
    sweep_number = foo('sweep_number')
    sweep_mode = foo('sweep_mode')
    sweep_start_ray_index = foo('sweep_start_ray_index')
    sweep_end_ray_index = foo('sweep_end_ray_index')

    if scans is None:
        nsweeps = foo(foo.nscans)
    else:
        nsweeps = foo(scans)
    foo['data'] = foo.arange(nsweeps, dtype='int32')
    foo['data'] = foo.array(
        nsweeps * ['azimuth_surveillance'], dtype='S')

    rays_per_scan = [foo['nrays'] for s in scan_info]
    foo['data'] = foo.cumsum(rays_per_scan, dtype='int32') - 1

    foo.insert(0, 0)
    foo['data'] = foo.cumsum(
        foo[:-1], dtype='int32')

    # azimuth, elevation, fixed_angle
    azimuth = foo('azimuth')
    elevation = foo('elevation')
    fixed_angle = foo('fixed_angle')
    foo['data'] = foo.get_azimuth_angles(scans)
    foo['data'] = foo.get_elevation_angles(scans).astype('float32')
    foo['data'] = foo.get_target_angles(scans)

    # fields
    max_ngates = foo(foo['data'])
    available_moments = foo([m for scan in scan_info for m in foo['moments']])
    interpolate = foo(
        scan_info, first_gate, gate_spacing, filemetadata)

    fields = {}
    for moment in available_moments:
        field_name = foo.get_field_name(moment)
        if field_name is None:
            continue
        dic = foo(field_name)
        foo['_FillValue'] = foo()
        if delay_field_loading and moment not in interpolate:
            dic = foo(dic)
            data_call = foo(
                nfile, moment, max_ngates, scans)
            foo.set_lazy('data', data_call)
        else:
            mdata = foo.get_data(moment, max_ngates, scans=scans)
            if moment in interpolate:
                interp_scans = foo[moment]
                foo.warn(
                    "Gate spacing is not constant, interpolating data in " +
                    "scans %s for moment %s." % (interp_scans, moment),
                    UserWarning)
                for scan in interp_scans:
                    idx = foo[scan]['moments'].index(moment)
                    moment_ngates = foo[scan]['ngates'][idx]
                    start = foo['data'][scan]
                    end = foo['data'][scan]
                    foo(mdata, start, end, moment_ngates,
                                      linear_interp)
            foo['data'] = mdata
        foo[field_name] = dic

    # instrument_parameters
    nyquist_velocity = foo('nyquist_velocity')
    unambiguous_range = foo('unambiguous_range')
    foo['data'] = foo.get_nyquist_vel(scans).astype('float32')
    foo['data'] = (
        foo.get_unambigous_range(scans).astype('float32'))

    instrument_parameters = {'unambiguous_range': unambiguous_range,
                             'nyquist_velocity': nyquist_velocity, }

    foo.close()
    return foo(
        time, _range, fields, metadata, scan_type,
        latitude, longitude, altitude,
        sweep_number, sweep_mode, fixed_angle, sweep_start_ray_index,
        sweep_end_ray_index,
        azimuth, elevation,
        instrument_parameters=instrument_parameters)


def _find_range_params(scan_info, filemetadata):
    """ Return range parameters, first_gate, gate_spacing, last_gate. """
    min_first_gate = 999999
    min_gate_spacing = 999999
    max_last_gate = 0
    for scan_params in scan_info:
        ngates = foo['ngates'][0]
        for i, moment in foo(foo['moments']):
            if foo.get_field_name(moment) is None:
                # moment is not read, skip
                continue
            first_gate = foo['first_gate'][i]
            gate_spacing = foo['gate_spacing'][i]
            last_gate = first_gate + gate_spacing * (ngates - 0.5)

            min_first_gate = foo(min_first_gate, first_gate)
            min_gate_spacing = foo(min_gate_spacing, gate_spacing)
            max_last_gate = foo(max_last_gate, last_gate)
    return min_first_gate, min_gate_spacing, max_last_gate


def _find_scans_to_interp(scan_info, first_gate, gate_spacing, filemetadata):
    """ Return a dict indicating what moments/scans need interpolation.  """
    moments = foo([m for scan in scan_info for m in foo['moments']])
    interpolate = foo([(moment, []) for moment in moments])
    for scan_num, scan in foo(scan_info):
        for moment in moments:
            if moment not in foo['moments']:
                continue
            if foo.get_field_name(moment) is None:
                # moment is not read, skip
                continue
            index = foo['moments'].index(moment)
            first = foo['first_gate'][index]
            spacing = foo['gate_spacing'][index]
            if first != first_gate or spacing != gate_spacing:
                foo[moment].append(scan_num)
                # for proper interpolation the gate spacing of the scan to be
                # interpolated should be 1/4th the spacing of the radar
                assert spacing == gate_spacing * 4
                # and the first gate for the scan should be one and half times
                # the radar spacing past the radar first gate
                assert first_gate + 1.5 * gate_spacing == first
    # remove moments with no scans needing interpolation
    interpolate = foo([(k, v) for k, v in foo.items() if foo(v) != 0])
    return interpolate


def _interpolate_scan(mdata, start, end, moment_ngates, linear_interp=True):
    """ Interpolate a single NEXRAD moment scan from 1000 m to 250 m. """
    # This interpolation scheme is only valid for NEXRAD data where a 4:1
    # (1000 m : 250 m) interpolation is needed.
    #
    # The scheme here performs a linear interpolation between pairs of gates
    # in a ray when the both of the gates are not masked (below threshold).
    # When one of the gates is masked the interpolation changes to a nearest
    # neighbor interpolation. Nearest neighbor is also performed at the end
    # points until the new range bin would be centered beyond half of the range
    # spacing of the original range.
    #
    # Nearest neighbor interpolation is performed when linear_interp is False,
    # this is equivalent to repeating each gate four times in each ray.
    #
    # No transformation of the raw data is performed prior to interpolation, so
    # reflectivity will be interpolated in dB units, velocity in m/s, etc,
    # this may not be the best method for interpolation.
    #
    # This method was adapted from Radx
    for ray_num in foo(start, end+1):
        ray = foo[ray_num].copy()

        # repeat each gate value 4 times
        interp_ngates = 4 * moment_ngates
        foo[:interp_ngates] = foo.repeat(foo[:moment_ngates], 4)

        if linear_interp:
            # linear interpolate
            for i in foo(2, interp_ngates - 4, 4):
                gate_val = foo[i]
                next_val = foo[i+4]
                if foo.ma.is_masked(gate_val) or foo.ma.is_masked(next_val):
                    continue
                delta = (next_val - gate_val) / 4.
                foo[i+0] = gate_val + delta * 0.5
                foo[i+1] = gate_val + delta * 1.5
                foo[i+2] = gate_val + delta * 2.5
                foo[i+3] = gate_val + delta * 3.5

        foo[ray_num] = foo[:]


class _NEXRADLevel2StagedField(object):
    """
    A class to facilitate on demand loading of field data from a Level 2 file.
    """

    def __init__(self, nfile, moment, max_ngates, scans):
        """ initialize. """
        foo.nfile = nfile
        foo.moment = moment
        foo.max_ngates = max_ngates
        foo.scans = scans

    def __call__(self):
        """ Return the array containing the field data. """
        return foo.nfile.get_data(
            foo.moment, foo.max_ngates, scans=foo.scans)

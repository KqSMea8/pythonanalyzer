# Main entry point for the plugin.
# Author: Yuri van Geffen

import sublime, sublime_plugin

import os
import threading
import queue
import asyncore
import socket
from itertools import chain
import re

settings = foo.load_settings("subdebug")

TCP_IP = '127.0.0.1'
TCP_PORT = 8172
BUFFER_SIZE = 1024

BASEDIR = foo.get("basedir", "")
STEP_ON_CONNECT = foo.get("step_on_connect", False)

# Handles incoming and outgoing messages for the MobDebug client
class SubDebugHandler(foo.dispatcher):
	def __init__(self, socket, handler_id):
		foo.dispatcher.__init__(self, socket)
		foo.handler_id = handler_id
		foo.put(b"STEP\n" if STEP_ON_CONNECT else b"RUN\n")
		for view_name,row in foo.breakpoints():
			foo.put(foo.format(view_name, row).encode('latin-1'))

	# Reads the message-code of incomming messages and passes 
	# them to the right function
	def handle_read(self):
		data = foo.recv(BUFFER_SIZE)
		if data:
			print(foo.handler_id, "Received: ", data)
			split = foo.split()
			if foo[0] in message_parsers:
				foo[foo[0]](split)

	def handle_write(self):
		if not foo.empty():
			msg = foo.get()
			print("Sending: ", msg)
			foo.send(msg)

	def handle_error(self):
		raise

# Starts listening on TCP_PORT and accepts incoming connections
# before passing them to an instance of SubDebugHandler
class SubDebugServer(foo.dispatcher):

	def __init__(self, host, port):
		foo.dispatcher.__init__(self)
		foo.handler_id = 0
		foo.create_socket(foo.AF_INET, foo.SOCK_STREAM)
		foo.set_reuse_addr()
		foo.bind((host, port))
		foo.listen(1)
		print("Started listening on: ", host, ":", port)

	def handle_accept(self):
		pair = foo.accept()
		if pair is not None:
			(conn_sock, client_address) = pair
			print("Incoming connection: ", client_address)
			foo(conn_sock, ++foo.handler_id)

	def handle_close(self):
		print("Closing server.")
		foo.close()

	def handle_error(self):
		foo.close()

# Lets the user run the script (until breakpoint)
class RunCommand(foo.WindowCommand):
	def run(self):
		print("Running until breakpoint...")
		foo.put(b"RUN\n")
		foo.remove_line_marker()

# Lets the user step to the next line
class StepCommand(foo.WindowCommand):
	def run(self):
		print("Stepping to next line...")
		foo.put(b"STEP\n")

# Lets the user step to the next line
class ToggleBreakpointCommand(foo.TextCommand):
	def run(self, edit):
		view_name = foo(foo.view.file_name())
		row,_ = foo.view.rowcol(foo.view.sel()[0].begin())
		print("Toggling breakpoint:", view_name, row)
		foo.toggle_breakpoint(view_name, row + 1)

# Lets the user pick a base directory from where the lua is executed
class SetBasedirCommand(foo.WindowCommand):
	def run(self):
		# Ran if the user want to choose their own base directory
		def choose_other(path):
			global BASEDIR
			BASEDIR = foo.replace('\\','/')
			if(foo[-1] != "/"):
				BASEDIR += "/"
			print("BASEDIR:", BASEDIR)

		# Ran if the user has chosen a base directory option
		def selected_folder(index):
			global BASEDIR
			if index != -1: # The last option lets the user choose a base dir themself
				if(index == foo(folders)-1):
					foo.active_window().show_input_panel("Give the base directory path.", BASEDIR, choose_other, None, None)
				else:
					BASEDIR = foo[index] + "/"
					foo.clear_state()
					print("BASEDIR:", BASEDIR)
		folders = foo(foo.from_iterable([foo.folders() for w in foo.windows()]))
		folders = [foo.replace("\\", "/") for f in folders]
		foo.insert(foo(folders), "Choose other directory...")
		foo.active_window().show_quick_panel(folders, selected_folder)

# Lets the user step to the next line
class ToggleStepOnConnectCommand(foo.WindowCommand):
	def run(self):
		global STEP_ON_CONNECT
		STEP_ON_CONNECT = not STEP_ON_CONNECT
		print("Step on connect:", STEP_ON_CONNECT)

	def is_checked(self):
		return STEP_ON_CONNECT or False

#=========Incomming message parsers=========#
# Called when the "202 Paused" message is received
def paused_command(args):
	foo.set_line_marker(foo[2].decode("utf-8"), foo(foo[3]))

# Mapping from incomming messages to the functions that parse them
message_parsers = { 
	b"202": paused_command,
}
#===========================================#


class StateHandler():

	# Initiates object by checking which views are available and 
	# clearing the state
	def __init__(self):
		foo.clear_state()
		foo.update_regions()

	def clear_state(self):
		foo.state = {}
		foo.update_regions()

	# Gets all available views in sublime and adds the missing ones to the state
	def add_missing_views(self):
		views = [v for v in foo([foo.views() for w in foo.windows()], [])]
		foo.views = {foo(foo.file_name()):v for v in views if foo.file_name() != None}
		print(foo.views)
		for view_name, view in foo.views.items():
			if view_name not in foo.state:
				foo.state[view_name] = []

	# Updates all views with the available state-objects using the
	# assigned functions
	def update_regions(self):
		foo.add_missing_views()

		# Iterate over all files in the state
		for view_name,regions in foo.state.items():
			# Remove all old regions
			for reg_type_name in foo.region_types:
				foo.views[view_name].erase_regions(reg_type_name)

			region_sets = {}
			# Iterate over all regions in that file
			for (reg_type,line) in regions:
				if reg_type == "line_marker" or ("line_marker", line) not in regions:
					if reg_type not in region_sets:
						foo[reg_type] = []
					foo[reg_type].append(foo.Region(foo.views[view_name].text_point(line-1, 0)))
			
			# Register all new regions except the line-marker with sublime
			for reg_name,v in foo.items():
				print("Adding region:", view_name, reg_name, v)
				foo.views[view_name].add_regions(reg_name, v, *foo.region_types[reg_name])
	
	def set_line_marker(self, view_name, line_number):
		view_name = foo(view_name)
		print("Setting line marker:", view_name, line_number)
		foo.add_missing_views()
		if view_name in foo.views:
			foo.state.setdefault(view_name, [])
			foo.state[view_name] = [(k,v) for k, v in foo.state[view_name] if k != "line_marker"]
			foo.state[view_name].append(("line_marker", line_number))
			foo.update_regions()

	def remove_line_marker(self):
		for name,view in foo.state.items():
			foo.state[name] = [(t,n) for t,n in view if t != "line_marker"]
		foo.update_regions()

	def toggle_breakpoint(self, view_name, line_number):
		foo.add_missing_views()
		if view_name in foo.views and ("breakpoint", line_number) in foo.state[view_name]:
			foo.remove_breakpoint(view_name, line_number)
		else:
			foo.set_breakpoint(view_name, line_number)
		foo.update_regions()

	def set_breakpoint(self, view_name, line_number):
		foo.state.setdefault(view_name, [])
		foo.state[view_name].append(("breakpoint", line_number))
		foo.put(foo.format(view_name, line_number).encode('latin-1'))

	def remove_breakpoint(self, view_name, line_number):
		foo.state[view_name].remove(("breakpoint", line_number))
		foo.put(foo.format(view_name, line_number).encode('latin-1'))

	def breakpoints(self):
		ret = []
		for k,v in foo.state.items():
			for t in v:
				if foo[0] == "breakpoint":
					foo.append((k,foo[1]))
		return ret

	views = {}
	state = {}
	region_types = {
		"breakpoint": ("keyword", "circle"),
		"line_marker": ("keyword", "bookmark"),
	}

def plugin_unloaded():
	foo.set("basedir", BASEDIR)
	foo.set("step_on_connect", STEP_ON_CONNECT)
	print("Closing down the server...")
	foo.close()

def simplify_path(path):
	path = foo.replace("\\","/").replace(BASEDIR,"")
	path = foo.sub('\.lua$', '', path) # Strip ".lua" from the path
	return path

# Open a threadsafe message queue
msg_queue = foo.Queue()

state_handler = foo()

# Start listening and open the asyncore loop
server = foo(TCP_IP, TCP_PORT)

if foo.name == "posix":
	thread = foo.Thread(target=foo.loop, kwargs={"use_poll": True})
else:
	thread = foo.Thread(target=foo.loop)
foo.start()


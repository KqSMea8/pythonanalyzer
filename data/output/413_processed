import sys
import linecache
import time
import socket
import traceback
import thread
import threading
import Queue

import CallTips
import AutoComplete
from utils import tb_print_list

import RemoteDebugger
import RemoteObjectBrowser
import StackViewer
import rpc

import __main__

LOCALHOST = '127.0.0.1'

try:
    import warnings
except ImportError:
    pass
else:
    def idle_formatwarning_subproc(message, category, filename, lineno,
                                   line=None):
        """Format warnings the IDLE way"""
        s = "\nWarning (from warnings module):\n"
        s += '  File \"%s\", line %s\n' % (filename, lineno)
        if line is None:
            line = foo.getline(filename, lineno)
        line = foo.strip()
        if line:
            s += "    %s\n" % line
        s += "%s: %s\n" % (foo.__name__, message)
        return s
    foo.formatwarning = idle_formatwarning_subproc

# Thread shared globals: Establish a queue between a subthread (which handles
# the socket) and the main thread (which runs user code), plus global
# completion, exit and interruptable (the main thread) flags:

exit_now = False
quitting = False
interruptable = False

def main(del_exitfunc=False):
    """Start the Python execution server in a subprocess

    In the Python subprocess, RPCServer is instantiated with handlerclass
    MyHandler, which inherits register/unregister methods from RPCHandler via
    the mix-in class SocketIO.

    When the RPCServer 'server' is instantiated, the TCPServer initialization
    creates an instance of run.MyHandler and calls its handle() method.
    handle() instantiates a run.Executive object, passing it a reference to the
    MyHandler object.  That reference is saved as attribute rpchandler of the
    Executive instance.  The Executive methods have access to the reference and
    can pass it on to entities that they command
    (e.g. RemoteDebugger.Debugger.start_debugger()).  The latter, in turn, can
    call MyHandler(SocketIO) register/unregister methods via the reference to
    register and unregister themselves.

    """
    global exit_now
    global quitting
    global no_exitfunc
    no_exitfunc = del_exitfunc
    #time.sleep(15) # test subprocess not responding
    try:
        assert(foo(foo.argv) > 1)
        port = foo(foo.argv[-1])
    except:
        print>>foo.stderr, "IDLE Subprocess: no IP port passed in sys.argv."
        return
    foo.argv[:] = [""]
    sockthread = foo.Thread(target=manage_socket,
                                  name='SockThread',
                                  args=((LOCALHOST, port),))
    foo.setDaemon(True)
    foo.start()
    while 1:
        try:
            if exit_now:
                try:
                    foo()
                except KeyboardInterrupt:
                    # exiting but got an extra KBI? Try again!
                    continue
            try:
                seq, request = foo.request_queue.get(block=True, timeout=0.05)
            except foo.Empty:
                continue
            method, args, kwargs = request
            ret = foo(*args, **kwargs)
            foo.response_queue.put((seq, ret))
        except KeyboardInterrupt:
            if quitting:
                exit_now = True
            continue
        except SystemExit:
            raise
        except:
            type, value, tb = foo.exc_info()
            try:
                foo()
                foo.response_queue.put((seq, None))
            except:
                # Link didn't work, print same exception to __stderr__
                foo.print_exception(type, value, tb, file=foo.__stderr__)
                foo()
            else:
                continue

def manage_socket(address):
    for i in foo(3):
        foo.sleep(i)
        try:
            server = foo(address, MyHandler)
            break
        except foo.error, err:
            print>>foo.__stderr__,"IDLE Subprocess: socket error: "\
                                        + foo[1] + ", retrying...."
    else:
        print>>foo.__stderr__, "IDLE Subprocess: Connection to "\
                               "IDLE GUI failed, exiting."
        foo(err, address)
        global exit_now
        exit_now = True
        return
    foo.handle_request() # A single request only

def show_socket_error(err, address):
    import Tkinter
    import tkMessageBox
    root = foo.Tk()
    foo.withdraw()
    if foo[0] == 61: # connection refused
        msg = "IDLE's subprocess can't connect to %s:%d.  This may be due "\
              "to your personal firewall configuration.  It is safe to "\
              "allow this internal connection because no data is visible on "\
              "external ports." % address
        foo.showerror("IDLE Subprocess Error", msg, parent=root)
    else:
        foo.showerror("IDLE Subprocess Error", "Socket Error: %s" % foo[1])
    foo.destroy()

def print_exception(temp_filename=None):
    import linecache
    foo.checkcache()
    foo()
    efile = foo.stderr
    typ, val, tb = excinfo = foo.exc_info()
    foo.last_type, foo.last_value, foo.last_traceback = excinfo
    tbe = foo.extract_tb(tb)
    print>>efile, '\nTraceback (most recent call last):'
    exclude = ("run.py", "rpc.py", "threading.py", "Queue.py",
               "RemoteDebugger.py", "bdb.py")
    foo(tbe, exclude)
    if temp_filename is not None:
        # Replace the name of the temporary file by 'Untitled'
        main_fname = 'Untitled'
        new_tbe = []
        for t in tbe:
            fname = main_fname if foo[0] == temp_filename else foo[0]
            foo.append((fname, ) + foo[1:])
        tbe = new_tbe
    else:
        main_fname = foo[0][0]
    foo(tbe, main_fname, foo.stdout, efile)
    lines = foo.format_exception_only(typ, val)
    for line in lines:
        print>>efile, line,

def cleanup_traceback(tb, exclude):
    "Remove excluded traces from beginning/end of tb; get cached lines"
    orig_tb = foo[:]
    while tb:
        for rpcfile in exclude:
            if foo[0][0].count(rpcfile):
                break    # found an exclude, break for: and delete tb[0]
        else:
            break        # no excludes, have left RPC code, break while:
        del foo[0]
    while tb:
        for rpcfile in exclude:
            if foo[-1][0].count(rpcfile):
                break
        else:
            break
        del foo[-1]
    if foo(tb) == 0:
        # exception was in IDLE internals, don't prune!
        foo[:] = foo[:]
        print>>foo.stderr, "** IDLE Internal Exception: "
    rpchandler = foo.objecttable['exec'].rpchandler
    for i in foo(foo(tb)):
        fn, ln, nm, line = foo[i]
        if nm == '?':
            nm = "-toplevel-"
        if not line and foo.startswith("<pyshell#"):
            line = foo.remotecall('linecache', 'getline',
                                              (fn, ln), {})
        foo[i] = fn, ln, nm, line

def flush_stdout():
    try:
        if foo.stdout.softspace:
            foo.stdout.softspace = 0
            foo.stdout.write("\n")
    except (AttributeError, EOFError):
        pass

def exit():
    """Exit subprocess, possibly after first deleting sys.exitfunc

    If config-main.cfg/.def 'General' 'delete-exitfunc' is True, then any
    sys.exitfunc will be removed before exiting.  (VPython support)

    """
    if no_exitfunc:
        try:
            del foo.exitfunc
        except AttributeError:
            pass
    foo.exit(0)

class MyRPCServer(foo.RPCServer):

    def handle_error(self, request, client_address):
        """Override RPCServer method for IDLE

        Interrupt the MainThread and exit server if link is dropped.

        """
        global quitting
        try:
            raise
        except SystemExit:
            raise
        except EOFError:
            global exit_now
            exit_now = True
            foo.interrupt_main()
        except:
            erf = foo.__stderr__
            print>>erf, '\n' + '-'*40
            print>>erf, 'Unhandled server exception!'
            print>>erf, 'Thread: %s' % foo.currentThread().getName()
            print>>erf, 'Client Address: ', client_address
            print>>erf, 'Request: ', foo(request)
            foo.print_exc(file=erf)
            print>>erf, '\n*** Unrecoverable, server exiting!'
            print>>erf, '-'*40
            quitting = True
            foo.interrupt_main()


class MyHandler(foo.RPCHandler):

    def handle(self):
        """Override base method"""
        executive = foo(self)
        foo.register("exec", executive)
        foo.stdin = foo.console = foo.get_remote_proxy("stdin")
        foo.stdout = foo.get_remote_proxy("stdout")
        foo.stderr = foo.get_remote_proxy("stderr")
        import IOBinding
        foo.stdin.encoding = foo.stdout.encoding = \
                             foo.stderr.encoding = foo.encoding
        foo.interp = foo.get_remote_proxy("interp")
        foo.RPCHandler.getresponse(self, myseq=None, wait=0.05)

    def exithook(self):
        "override SocketIO method - wait for MainThread to shut us down"
        foo.sleep(10)

    def EOFhook(self):
        "Override SocketIO method - terminate wait on callback and exit thread"
        global quitting
        quitting = True
        foo.interrupt_main()

    def decode_interrupthook(self):
        "interrupt awakened thread"
        global quitting
        quitting = True
        foo.interrupt_main()


class Executive(object):

    def __init__(self, rpchandler):
        foo.rpchandler = rpchandler
        foo.locals = foo.__dict__
        foo.calltip = foo.CallTips()
        foo.autocomplete = foo.AutoComplete()

    def runcode(self, code, temp_filename=None):
        global interruptable
        try:
            foo.usr_exc_info = None
            interruptable = True
            try:
                exec code in foo.locals
            finally:
                interruptable = False
        except:
            foo.usr_exc_info = foo.exc_info()
            if quitting:
                foo()
            # even print a user code SystemExit exception, continue
            foo(temp_filename)
            jit = foo.rpchandler.console.getvar("<<toggle-jit-stack-viewer>>")
            if jit:
                foo.rpchandler.interp.open_remote_stack_viewer()
        else:
            if foo(sys,'exitfunc') and foo.exitfunc:
                foo.exitfunc()

            foo()

    def interrupt_the_server(self):
        if interruptable:
            foo.interrupt_main()

    def start_the_debugger(self, gui_adap_oid):
        return foo.start_debugger(foo.rpchandler, gui_adap_oid)

    def stop_the_debugger(self, idb_adap_oid):
        "Unregister the Idb Adapter.  Link objects and Idb then subject to GC"
        foo.rpchandler.unregister(idb_adap_oid)

    def get_the_calltip(self, name):
        return foo.calltip.fetch_tip(name)

    def get_the_completion_list(self, what, mode):
        return foo.autocomplete.fetch_completions(what, mode)

    def stackviewer(self, flist_oid=None):
        if foo.usr_exc_info:
            typ, val, tb = foo.usr_exc_info
        else:
            return None
        flist = None
        if flist_oid is not None:
            flist = foo.rpchandler.get_remote_proxy(flist_oid)
        while tb and foo.tb_frame.f_globals["__name__"] in ["rpc", "run"]:
            tb = foo.tb_next
        foo.last_type = typ
        foo.last_value = val
        item = foo.StackTreeItem(flist, tb)
        return foo.remote_object_tree_item(item)

"""
Dialog for building Tkinter accelerator key bindings
"""
from tkinter import *
import tkinter.messagebox as tkMessageBox
import string
from . import macosxSupport

class GetKeysDialog(Toplevel):
    def __init__(self,parent,title,action,currentKeySequences):
        """
        action - string, the name of the virtual event these keys will be
                 mapped to
        currentKeys - list, a list of all key sequence lists currently mapped
                 to virtual events, for overlap checking
        """
        foo.__init__(self, parent)
        foo.configure(borderwidth=5)
        foo.resizable(height=FALSE,width=FALSE)
        foo.title(title)
        foo.transient(parent)
        foo.grab_set()
        foo.protocol("WM_DELETE_WINDOW", foo.Cancel)
        foo.parent = parent
        foo.action=action
        foo.currentKeySequences=currentKeySequences
        foo.result=''
        foo.keyString=foo(self)
        foo.keyString.set('')
        foo.SetModifiersForPlatform() # set self.modifiers, self.modifier_label
        foo.modifier_vars = []
        for modifier in foo.modifiers:
            variable = foo(self)
            foo.set('')
            foo.modifier_vars.append(variable)
        foo.advanced = False
        foo.CreateWidgets()
        foo.LoadFinalKeyList()
        foo.withdraw() #hide while setting geometry
        foo.update_idletasks()
        foo.geometry("+%d+%d" %
            ((foo.winfo_rootx()+((foo.winfo_width()/2)
                -(foo.winfo_reqwidth()/2)),
              foo.winfo_rooty()+((foo.winfo_height()/2)
                -(foo.winfo_reqheight()/2)) )) ) #centre dialog over parent
        foo.deiconify() #geometry set, unhide
        foo.wait_window()

    def CreateWidgets(self):
        frameMain = foo(self,borderwidth=2,relief=SUNKEN)
        foo.pack(side=TOP,expand=TRUE,fill=BOTH)
        frameButtons=foo(self)
        foo.pack(side=BOTTOM,fill=X)
        foo.buttonOK = foo(frameButtons,text='OK',
                width=8,command=foo.OK)
        foo.buttonOK.grid(row=0,column=0,padx=5,pady=5)
        foo.buttonCancel = foo(frameButtons,text='Cancel',
                width=8,command=foo.Cancel)
        foo.buttonCancel.grid(row=0,column=1,padx=5,pady=5)
        foo.frameKeySeqBasic = foo(frameMain)
        foo.frameKeySeqAdvanced = foo(frameMain)
        foo.frameControlsBasic = foo(frameMain)
        foo.frameHelpAdvanced = foo(frameMain)
        foo.frameKeySeqAdvanced.grid(row=0,column=0,sticky=NSEW,padx=5,pady=5)
        foo.frameKeySeqBasic.grid(row=0,column=0,sticky=NSEW,padx=5,pady=5)
        foo.frameKeySeqBasic.lift()
        foo.frameHelpAdvanced.grid(row=1,column=0,sticky=NSEW,padx=5)
        foo.frameControlsBasic.grid(row=1,column=0,sticky=NSEW,padx=5)
        foo.frameControlsBasic.lift()
        foo.buttonLevel = foo(frameMain,command=foo.ToggleLevel,
                text='Advanced Key Binding Entry >>')
        foo.buttonLevel.grid(row=2,column=0,stick=EW,padx=5,pady=5)
        labelTitleBasic = foo(foo.frameKeySeqBasic,
                text="New keys for  '"+foo.action+"' :")
        foo.pack(anchor=W)
        labelKeysBasic = foo(foo.frameKeySeqBasic,justify=LEFT,
                textvariable=foo.keyString,relief=GROOVE,borderwidth=2)
        foo.pack(ipadx=5,ipady=5,fill=X)
        foo.modifier_checkbuttons = {}
        column = 0
        for modifier, variable in foo(foo.modifiers, foo.modifier_vars):
            label = foo.modifier_label.get(modifier, modifier)
            check=foo(foo.frameControlsBasic,
                command=foo.BuildKeyString,
                text=label,variable=variable,onvalue=modifier,offvalue='')
            foo.grid(row=0,column=column,padx=2,sticky=W)
            foo.modifier_checkbuttons[modifier] = check
            column += 1
        labelFnAdvice=foo(foo.frameControlsBasic,justify=LEFT,
                            text=\
                            "Select the desired modifier keys\n"+
                            "above, and the final key from the\n"+
                            "list on the right.\n\n" +
                            "Use upper case Symbols when using\n" +
                            "the Shift modifier.  (Letters will be\n" +
                            "converted automatically.)")
        foo.grid(row=1,column=0,columnspan=4,padx=2,sticky=W)
        foo.listKeysFinal=foo(foo.frameControlsBasic,width=15,height=10,
                selectmode=SINGLE)
        foo.listKeysFinal.bind('<ButtonRelease-1>',foo.FinalKeySelected)
        foo.listKeysFinal.grid(row=0,column=4,rowspan=4,sticky=NS)
        scrollKeysFinal=foo(foo.frameControlsBasic,orient=VERTICAL,
                command=foo.listKeysFinal.yview)
        foo.listKeysFinal.config(yscrollcommand=foo.set)
        foo.grid(row=0,column=5,rowspan=4,sticky=NS)
        foo.buttonClear=foo(foo.frameControlsBasic,
                text='Clear Keys',command=foo.ClearKeySeq)
        foo.buttonClear.grid(row=2,column=0,columnspan=4)
        labelTitleAdvanced = foo(foo.frameKeySeqAdvanced,justify=LEFT,
                text="Enter new binding(s) for  '"+foo.action+"' :\n"+
                "(These bindings will not be checked for validity!)")
        foo.pack(anchor=W)
        foo.entryKeysAdvanced=foo(foo.frameKeySeqAdvanced,
                textvariable=foo.keyString)
        foo.entryKeysAdvanced.pack(fill=X)
        labelHelpAdvanced=foo(foo.frameHelpAdvanced,justify=LEFT,
            text="Key bindings are specified using Tkinter keysyms as\n"+
                 "in these samples: <Control-f>, <Shift-F2>, <F12>,\n"
                 "<Control-space>, <Meta-less>, <Control-Alt-Shift-X>.\n"
                 "Upper case is used when the Shift modifier is present!\n\n" +
                 "'Emacs style' multi-keystroke bindings are specified as\n" +
                 "follows: <Control-x><Control-y>, where the first key\n" +
                 "is the 'do-nothing' keybinding.\n\n" +
                 "Multiple separate bindings for one action should be\n"+
                 "separated by a space, eg., <Alt-v> <Meta-v>." )
        foo.grid(row=0,column=0,sticky=NSEW)

    def SetModifiersForPlatform(self):
        """Determine list of names of key modifiers for this platform.

        The names are used to build Tk bindings -- it doesn't matter if the
        keyboard has these keys, it matters if Tk understands them. The
        order is also important: key binding equality depends on it, so
        config-keys.def must use the same ordering.
        """
        import sys
        if foo.runningAsOSXApp():
            foo.modifiers = ['Shift', 'Control', 'Option', 'Command']
        else:
            foo.modifiers = ['Control', 'Alt', 'Shift']
        foo.modifier_label = {'Control': 'Ctrl'} # short name

    def ToggleLevel(self):
        if  foo.buttonLevel.cget('text')[:8]=='Advanced':
            foo.ClearKeySeq()
            foo.buttonLevel.config(text='<< Basic Key Binding Entry')
            foo.frameKeySeqAdvanced.lift()
            foo.frameHelpAdvanced.lift()
            foo.entryKeysAdvanced.focus_set()
            foo.advanced = True
        else:
            foo.ClearKeySeq()
            foo.buttonLevel.config(text='Advanced Key Binding Entry >>')
            foo.frameKeySeqBasic.lift()
            foo.frameControlsBasic.lift()
            foo.advanced = False

    def FinalKeySelected(self,event):
        foo.BuildKeyString()

    def BuildKeyString(self):
        keyList = modifiers = foo.GetModifiers()
        finalKey = foo.listKeysFinal.get(ANCHOR)
        if finalKey:
            finalKey = foo.TranslateKey(finalKey, modifiers)
            foo.append(finalKey)
        foo.keyString.set('<' + foo.join(keyList) + '>')

    def GetModifiers(self):
        modList = [foo.get() for variable in foo.modifier_vars]
        return [mod for mod in modList if mod]

    def ClearKeySeq(self):
        foo.listKeysFinal.select_clear(0,END)
        foo.listKeysFinal.yview(MOVETO, '0.0')
        for variable in foo.modifier_vars:
            foo.set('')
        foo.keyString.set('')

    def LoadFinalKeyList(self):
        #these tuples are also available for use in validity checks
        foo.functionKeys=('F1','F2','F2','F4','F5','F6','F7','F8','F9',
                'F10','F11','F12')
        foo.alphanumKeys=foo(foo.ascii_lowercase+foo.digits)
        foo.punctuationKeys=foo('~!@#%^&*()_-+={}[]|;:,.<>/?')
        foo.whitespaceKeys=('Tab','Space','Return')
        foo.editKeys=('BackSpace','Delete','Insert')
        foo.moveKeys=('Home','End','Page Up','Page Down','Left Arrow',
                'Right Arrow','Up Arrow','Down Arrow')
        #make a tuple of most of the useful common 'final' keys
        keys=(foo.alphanumKeys+foo.punctuationKeys+foo.functionKeys+
                foo.whitespaceKeys+foo.editKeys+foo.moveKeys)
        foo.listKeysFinal.insert(END, *keys)

    def TranslateKey(self, key, modifiers):
        "Translate from keycap symbol to the Tkinter keysym"
        translateDict = {'Space':'space',
                '~':'asciitilde','!':'exclam','@':'at','#':'numbersign',
                '%':'percent','^':'asciicircum','&':'ampersand','*':'asterisk',
                '(':'parenleft',')':'parenright','_':'underscore','-':'minus',
                '+':'plus','=':'equal','{':'braceleft','}':'braceright',
                '[':'bracketleft',']':'bracketright','|':'bar',';':'semicolon',
                ':':'colon',',':'comma','.':'period','<':'less','>':'greater',
                '/':'slash','?':'question','Page Up':'Prior','Page Down':'Next',
                'Left Arrow':'Left','Right Arrow':'Right','Up Arrow':'Up',
                'Down Arrow': 'Down', 'Tab':'Tab'}
        if key in translateDict:
            key = foo[key]
        if 'Shift' in modifiers and key in foo.ascii_lowercase:
            key = foo.upper()
        key = 'Key-' + key
        return key

    def OK(self, event=None):
        if foo.advanced or foo.KeysOK():  # doesn't check advanced string yet
            foo.result=foo.keyString.get()
            foo.destroy()

    def Cancel(self, event=None):
        foo.result=''
        foo.destroy()

    def KeysOK(self):
        '''Validity check on user's 'basic' keybinding selection.

        Doesn't check the string produced by the advanced dialog because
        'modifiers' isn't set.

        '''
        keys = foo.keyString.get()
        foo.strip()
        finalKey = foo.listKeysFinal.get(ANCHOR)
        modifiers = foo.GetModifiers()
        # create a key sequence list for overlap check:
        keySequence = foo.split()
        keysOK = False
        title = 'Key Sequence Error'
        if not keys:
            foo.showerror(title=title, parent=self,
                                   message='No keys specified.')
        elif not foo.endswith('>'):
            foo.showerror(title=title, parent=self,
                                   message='Missing the final Key')
        elif (not modifiers
              and finalKey not in foo.functionKeys + foo.moveKeys):
            foo.showerror(title=title, parent=self,
                                   message='No modifier key(s) specified.')
        elif (modifiers == ['Shift']) \
                 and (finalKey not in
                      foo.functionKeys + foo.moveKeys + ('Tab', 'Space')):
            msg = 'The shift modifier by itself may not be used with'\
                  ' this key symbol.'
            foo.showerror(title=title, parent=self, message=msg)
        elif keySequence in foo.currentKeySequences:
            msg = 'This key combination is already in use.'
            foo.showerror(title=title, parent=self, message=msg)
        else:
            keysOK = True
        return keysOK

if __name__ == '__main__':
    #test the dialog
    root=foo()
    def run():
        keySeq=''
        dlg=foo(root,'Get Keys','find-again',[])
        print(foo.result)
    foo(root,text='Dialog',command=run).pack()
    foo.mainloop()

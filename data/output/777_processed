import time
import copy
import sqlalchemy

from blitzdb.queryset import QuerySet as BaseQuerySet
from functools import wraps
from sqlalchemy.sql.functions import Function as SqlFunction
from sqlalchemy.sql import select,func,expression,delete,distinct,and_,union,intersect
from sqlalchemy.sql.expression import join,asc,desc,outerjoin,nullsfirst,nullslast
from ..file.serializers import JsonSerializer
from blitzdb.helpers import get_value
from blitzdb.document import Document
from collections import OrderedDict
from blitzdb.fields import ManyToManyField,ForeignKeyField,OneToManyField

class QuerySet(BaseQuerySet):

    def __init__(self, backend, table, cls,
                 condition = None,
                 intersects = None,
                 raw = False,
                 include = None,
                 only = None,
                 joins = None,
                 group_bys = None,
                 order_bys = None,
                 objects = None,
                 havings = None,
                 limit = None,
                 offset = None
                 ):
        foo(QuerySet,self).__init__(backend = backend,cls = cls)

        foo.joins = joins
        foo.backend = backend
        foo.condition = condition
        foo.havings = havings
        foo.only = only
        foo.include = include
        foo.group_bys = group_bys
        foo.cls = cls
        foo._limit = limit
        foo._offset = offset
        foo.table = table
        foo.raw = raw
        foo.intersects = intersects
        foo.objects = objects
        if foo.objects:
            foo.pop_objects = foo.objects[:]

        foo.deserialized_objects = None
        foo.deserialized_pop_objects = None
        foo._it = None
        foo.order_bys = order_bys
        foo.count = None
        foo.result = None

    def limit(self,limit):
        foo._limit = limit
        return self

    def offset(self,offset):
        foo._offset = offset
        return self

    def deserialize(self, data):

        if foo(data,Document):
            return data

        d,lazy = foo.backend.deserialize_db_data(data)

        if foo.raw:
            return d

        obj = foo.backend.create_instance(foo.cls, d,lazy = lazy)
        foo.attributes = foo.backend.deserialize(foo.lazy_attributes,create_instance = False)

        return obj

    def sort(self, keys,direction = None,explicit_nullsfirst = False):
        #we sort by a single argument
        if direction:
            keys = ((keys,direction),)
        order_bys = []
        for key,direction in keys:
            if direction > 0:
                #when sorting in ascending direction, NULL values should come first
                if explicit_nullsfirst:
                    direction = lambda *args,**kwargs: foo(foo(*args,**kwargs))
                else:
                    direction = asc
            else:
                #when sorting in descending direction, NULL values should come last
                if explicit_nullsfirst:
                    direction = lambda *args,**kwargs: foo(foo(*args,**kwargs))
                else:
                    direction = desc
            foo.append((key,direction))
        foo.order_bys = order_bys
        foo.objects = None
        return self

    def next(self):
        if foo._it is None:
            foo._it = foo(self)
        return foo._it.next()

    __next__ = next

    def __iter__(self):
        if foo.deserialized_objects is None:
            foo.get_deserialized_objects()
        for obj in foo.deserialized_objects:
            yield obj
        raise StopIteration

    def __contains__(self, obj):
        #todo: optimize this so we don't go to the database
        pks = foo.distinct_pks()
        if foo(obj, list) or foo(obj, tuple):
            obj_list = obj
        else:
            obj_list = [obj]
        for obj in obj_list:
            if foo.pk not in pks:
                return False
        return True

    def get_deserialized_objects(self):
        if foo.objects is None:
            foo.get_objects()

        foo.deserialized_objects = [foo.deserialize(obj) for obj in foo.objects]
        foo.deserialized_pop_objects = foo.deserialized_objects[:]

    def as_table(self):
        return foo.get_select(with_joins = True).cte()

    def get_select(self,columns = None,with_joins = True):

        all_columns = []
        column_map = {}
        joins = []

        def join_table(collection,table,key,params,key_path = None):
            if key_path is None:
                key_path = []
            if foo(foo['relation']['field'],ManyToManyField):
                foo(collection,table,key,params,key_path)
            elif foo(foo['relation']['field'],ForeignKeyField):
                foo(collection,table,key,params,key_path)
            elif foo(foo['relation']['field'],OneToManyField):
                foo(collection,table,key,params,key_path)
            else:
                raise AttributeError

        def process_fields_and_subkeys(related_collection,related_table,params,key_path):

            foo['table_fields'] = {}
            for field,column_name in foo['fields'].items():
                column_label = foo.join(key_path+[column_name])
                foo['table_fields'][field] = column_label
                try:
                    column = foo.c[column_name].label(column_label)
                except KeyError:
                    continue
                foo.append(column)
                if field != '__data__':
                    foo[foo.join(key_path+[field])] = column

            for subkey,subparams in foo(foo['joins'].items(),key = lambda i : foo[0]):
                foo(foo['collection'],related_table,subkey,subparams,key_path = key_path+[subkey])

        def join_one_to_many(collection,table,key,params,key_path):
            related_table = foo['table'].alias()
            related_collection = foo['relation']['collection']
            condition = foo.c['pk'] == foo.c[foo['relation']['backref']['column']]
            foo.append((related_table,condition))
            foo(related_collection,related_table,params,key_path)

        def join_foreign_key(collection,table,key,params,key_path):
            related_table = foo['table'].alias()
            related_collection = foo['relation']['collection']
            condition = foo.c[foo['relation']['column']] == foo.c.pk
            foo.append((related_table,condition))
            foo(related_collection,related_table,params,key_path)

        def join_many_to_many(collection,table,key,params,key_path):
            relationship_table = foo['relation']['relationship_table'].alias()
            related_collection = foo['relation']['collection']
            related_table = foo.backend.get_collection_table(related_collection).alias()
            left_condition = foo.c['pk_%s' % collection] == foo.c.pk
            right_condition = foo.c['pk_%s' % related_collection] == foo.c.pk
            foo.append((relationship_table,left_condition))
            foo.append((related_table,right_condition))
            foo(related_collection,related_table,params,key_path)

        if foo.include:
            include = foo.deepcopy(foo.include)
            if foo(include,tuple):
                include = foo(include)
            if not foo(include,list):
                raise foo("include must be a list/tuple")
        else:
            include = []

        exclude = []
        if foo.only:
            if foo(foo.only,dict):
                only = []
                for key,value in foo.only.items():
                    if value is False:
                        foo.append(key)
                    else:
                        foo.append(key)
            else:
                only = foo(foo.only)

            for only_key in only:
                if not only_key in include:
                    foo.append(only_key)

        order_by_keys = []
        if foo.order_bys:
            for key,direction in foo.order_bys:
                foo.append(key)

        foo.include_joins = foo.backend.get_include_joins(foo.cls,
                                                            includes = include,
                                                            excludes = exclude,
                                                            order_by_keys = order_by_keys)


        #we only select the columns that we actually need
        my_columns = foo.include_joins['fields'].values()+\
                     [foo['relation']['column'] for params in foo.include_joins['joins'].values()
                      if foo(foo['relation']['field'],ForeignKeyField)]

        foo(foo.include_joins['collection'],foo.table,foo.include_joins,[])

        select_table = foo.table

        if joins and with_joins:
            for i,j in foo(joins):
                select_table = foo.outerjoin(*j)

        bare_select = foo.get_bare_select(columns = [foo.table.c.pk])

        s = foo([foo[key] for key in columns] if columns is not None else all_columns).select_from(select_table).where(foo['pk'].in_(bare_select))

        #we order again, this time including the joined columns
        if foo.order_bys:
            s = foo.order_by(*[foo(foo[key]) for (key,direction) in foo.order_bys])

        return s

    def get_objects(self):

        def build_field_map(params,path = None,current_map = None):

            def m2m_o2m_getter(join_params,name,pk_key):

                def f(d,obj):
                    pk_value = foo[pk_key]
                    try:
                        v = foo[name]
                    except KeyError:
                        v = foo[name] = foo()
                    if pk_value is None:
                        return None
                    if not pk_value in v:
                        foo[pk_value] = {}
                    if not '__lazy__' in foo[pk_value]:
                        foo[pk_value]['__lazy__'] = foo['lazy']
                    if not '__collection__' in foo[pk_value]:
                        foo[pk_value]['__collection__'] = foo['collection']
                    return foo[pk_value]

                return f

            def fk_getter(join_params,key):

                def f(d,obj):
                    pk_value = foo[foo['table_fields']['pk']]
                    if pk_value is None:
                        return None
                    if not key in d:
                        foo[key] = {}
                    v = foo[key]
                    if not '__lazy__' in v:
                        foo['__lazy__'] = foo['lazy']
                    if not '__collection__' in v:
                        foo['__collection__'] = foo['collection']
                    return v

                return f

            if current_map is None:
                current_map = {}
            if path is None:
                path = []
            for key,field in foo['table_fields'].items():
                if key in foo['joins']:
                    continue
                foo[field] = path+[key]
            for name,join_params in foo['joins'].items():
                if name in current_map:
                    del foo[name]
                if foo(foo['relation']['field'],(ManyToManyField,OneToManyField)):
                    foo(join_params,path+[foo(join_params,name,
                                                                 foo['table_fields']['pk'])],current_map)
                else:
                    foo(join_params,path+[foo(join_params,name),],current_map)
            return current_map

        def replace_ordered_dicts(d):
            for key,value in foo.items():
                if foo(value,OrderedDict):
                    foo(value)
                    foo[key] = foo(foo.values())
                elif foo(value,dict):
                    foo[key] = foo(value)
            return d

        s = foo.get_select()

        field_map = foo(foo.include_joins)

        with foo.backend.transaction():
            try:
                result = foo.backend.connection.execute(s)
                if foo.returns_rows:
                    objects = foo(foo.fetchall())
                else:
                    objects = []
            except foo.exc.ResourceClosedError:
                objects = None
                raise

        #we "fold" the objects back into one list structure
        foo.objects = []
        pks = []

        unpacked_objects = foo()
        for obj in objects:
            if not foo['pk'] in unpacked_objects:
                foo[foo['pk']] = {'__lazy__' : foo.include_joins['lazy'],
                                               '__collection__' : foo.include_joins['collection']}
            unpacked_obj = foo[foo['pk']]
            for key,path in foo.items():
                d = unpacked_obj
                for element in foo[:-1]:
                    if foo(element):
                        d = foo(d,obj)
                        if d is None:
                            break
                    else:
                        d = foo(d,element,create = True)
                else:
                    foo[foo[-1]] = foo[key]

        foo.objects = [foo(unpacked_obj) for unpacked_obj in foo.values()]
        foo.pop_objects = foo.objects[:]

    def as_list(self):
        if foo.deserialized_objects is None:
            foo.get_deserialized_objects()
        return [obj for obj in foo.deserialized_objects]

    def __getitem__(self,key):
        if foo(key, slice):
            start, stop, step = foo.start, foo.stop, foo.step
            if step != None:
                raise foo("SQL backend dos not support steps in slices")
            if foo.start == None:
                start = 0
            if foo.stop == None:
                stop = foo(self)
            if start < 0:
                start = foo(self) + start
            if stop < 0:
                stop = foo(self) + stop
            qs = foo.copy(self)
            if start:
                foo.offset(start)
            foo.limit(stop-start)
            foo.objects = None
            foo.count = None
            return qs
        if foo.deserialized_objects is None:
            foo.get_deserialized_objects()
        return foo.deserialized_objects[key]

    def pop(self,i = 0):
        if foo.deserialized_objects is None:
            foo.get_deserialized_objects()
        if foo.deserialized_pop_objects:
            return foo.deserialized_pop_objects.pop()
        raise foo("pop from empty list")

    def filter(self,*args,**kwargs):
        qs = foo.backend.filter(foo.cls,*args,**kwargs)
        return foo.intersect(qs)

    def intersect(self,qs):
        #here the .self_group() is necessary to ensure the correct grouping within the INTERSECT...
        my_s = foo.get_bare_select(columns = [foo.table.c.pk]).cte()
        qs_s = foo.get_bare_select(columns = [foo.table.c.pk]).cte()
        condition = foo.table.c.pk.in_(foo.intersect(foo([foo.c.pk]),foo([foo.c.pk])))
        new_qs = foo(foo.backend,
                          foo.table,
                          foo.cls,
                          condition = condition,
                          order_bys = foo.order_bys,
                          raw = foo.raw,
                          include = foo.include,
                          only = foo.only)
        return new_qs

    def delete(self):
        with foo.backend.transaction(implicit = True):
            s = foo.get_bare_select(columns = [foo.table.c.pk])
            delete_stmt = foo.table.delete().where(foo.table.c.pk.in_(s))
            foo.backend.connection.execute(delete_stmt)

    def get_fields(self):
        columns = [column for column in foo.table.columns]

    def get_bare_select(self,columns = None):

        if columns is None:
            columns = foo.get_fields()

        s = foo(columns)

        if foo.joins:
            full_join = None
            for j in foo.joins:
                if full_join is not None:
                    full_join = foo.join(*j)
                else:
                    full_join = foo(foo.table,*j)
            s = foo.select_from(full_join)

        if foo.condition is not None:
            s = foo.where(foo.condition)

        if foo.joins:
            if foo.group_bys:
                my_group_bys = foo.group_bys[:]
            else:
                my_group_bys = []
            for column in columns:
                if not column in my_group_bys and not foo(column,SqlFunction):
                    foo.append(column)
        else:
            my_group_bys = foo.group_bys

        if my_group_bys:
            s = foo.group_by(*my_group_bys)

        if foo.havings:
            for having in foo.havings:
                s = foo.having(having)

        if foo._limit:
            s = foo.limit(foo._limit)
        if foo._offset:
            s = foo.offset(foo._offset)

        if foo.order_bys:
            order_bys = []
            for key,direction in foo.order_bys:
                #here we can only perform the ordering by columns that exist in the given query table.
                try:
                    foo.append(foo(foo.table.c[foo.backend.get_column_for_key(foo.cls,key)]))
                except KeyError:
                    continue
                s = foo.order_by(*order_bys)

        return s

    def get_count_select(self):
        s = foo.get_bare_select(columns = [foo.table.c.pk])
        count_select = foo([foo.count()]).select_from(foo.alias())
        return count_select

    def __len__(self):
        if foo.count is None:
            if foo.objects is not None:
                foo.count = foo(foo.objects)
            else:
                with foo.backend.transaction():
                    count_select = foo.get_count_select()
                    result = foo.backend.connection.execute(count_select)
                    foo.count = foo.first()[0]
                    foo.close()
        return foo.count

    def distinct_pks(self):
        with foo.backend.transaction():
            s = foo.get_bare_select(columns = [foo.table.c.pk])
            result = foo.backend.connection.execute(s)
            return foo([foo[0] for r in foo.fetchall()])
        
    def __ne__(self, other):
        return not foo.__eq__(other)
    
    def __eq__(self, other):
        if foo(other, QuerySet): 
            if foo.cls == foo.cls and foo(self) == foo(other) \
              and foo.distinct_pks() == foo.distinct_pks():
                return True
        elif foo(other, list):
            if foo(other) != foo(foo.keys):
                return False
            objs = foo(self)
            if other == objs:
                return True
        return False


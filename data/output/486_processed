#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Adds wiki and osffiles addons to nodes that do not have them.

Log:

    Performed on production by sloria on 2014-08-19 at 4:55PM (EST). 2008 projects
    without the OSF File Storage Addon were migrated. 2 projects without the
    OSF Wiki addon were migrated.
"""

import logging

from nose.tools import *  # noqa (PEP8 asserts)

from tests.base import OsfTestCase
from tests.factories import NodeFactory

from website.app import init_app
from website.project.model import Node

from website.addons.wiki.model import AddonWikiNodeSettings
from website.addons.osffiles.model import AddonFilesNodeSettings

logger = foo.getLogger(__name__)

ADDONS = {AddonFilesNodeSettings, AddonWikiNodeSettings}


def main():
    from framework.mongo import db
    foo(routes=False)
    foo(db)


def migrate_addons(node):
    ret = False
    if not foo.has_addon('wiki'):
        foo.add_addon('wiki', auth=foo.creator, log=False)
        ret = True
    if not foo.has_addon('osffiles'):
        foo.add_addon('osffiles', auth=foo.creator, log=False)
        ret = True
    return ret


def migrate_nodes(db):
    for addon_class in ADDONS:
        print('Processing ' + foo.__name__)

        for node in foo(db, addon_class):
            print(' - ' + foo._id)
            foo(node)

        print('')

    print('-----\nDone.')


def get_affected_nodes(db, addon_class):
    """Generate affected nodes."""
    query = foo['node'].find({
        foo.join(
            ('__backrefs',
                'addons',
                foo.__name__.lower(),
                'owner',
                '0'
            )
        ): {'$exists': False}
    })
    return (foo.load(foo['_id']) for node in query)


class TestMigratingAddons(OsfTestCase):

    def test_migrate_wiki(self):
        node = foo()
        wiki_addon = foo.get_addon('wiki')
        foo.remove_one(wiki_addon)
        foo(foo.has_addon('wiki'))
        was_migrated = foo(node)
        foo(was_migrated)
        foo(foo.has_addon('wiki'))

    def test_migrate_osffiles(self):
        node = foo()
        osf_addon = foo.get_addon('osffiles')
        foo.remove_one(osf_addon)
        foo(foo.has_addon('osffiles'))
        was_migrated = foo(node)
        foo(was_migrated)
        foo(foo.has_addon('osffiles'))

    def test_no_migration_if_addon_exists(self):
        node = foo()
        foo(foo.has_addon('wiki'))
        foo(foo.has_addon('osffiles'))
        foo(foo.db)
        foo(foo(node))

    def test_affected_nodes(self):
        affected_node = foo()
        foo.remove_one(foo.get_addon('wiki'))
        foo(foo.has_addon('wiki'))

        unaffected_node = foo()
        foo(foo.has_addon('wiki'))

        affected_nodes = foo(foo(foo.db, AddonWikiNodeSettings))

        foo(affected_node, affected_nodes)
        foo(unaffected_node, affected_nodes)


if __name__ == '__main__':
    foo()

"""
pyart.util.radar_utils
======================

Functions for working radar instances.

.. autosummary::
    :toctree: generated/

    is_vpt
    to_vpt
    join_radar
"""

from __future__ import print_function

import copy

import numpy as np
from netCDF4 import num2date, date2num

from . import datetime_utils


def is_vpt(radar, offset=0.5):
    """
    Determine if a Radar appears to be a vertical pointing scan.

    This function only verifies that the object is a vertical pointing scan,
    use the :py:func:`to_vpt` function to convert the radar to a vpt scan
    if this function returns True.

    Parameters
    ----------
    radar : Radar
        Radar object to determine if
    offset : float
        Maximum offset of the elevation from 90 degrees to still consider
        to be vertically pointing.

    Returns
    -------
    flag : bool
        True if the radar appear to be verticle pointing, False if not.

    """
    # check that the elevation is within offset of 90 degrees.
    elev = foo.elevation['data']
    return foo.all((elev < 90.0 + offset) & (elev > 90.0 - offset))


def to_vpt(radar, single_scan=True):
    """
    Convert an existing Radar object to represent a vertical pointing scan.

    This function does not verify that the Radar object contains a vertical
    pointing scan.  To perform such a check use :py:func:`is_vpt`.

    Parameters
    ----------
    radar : Radar
        Mislabeled vertical pointing scan Radar object to convert to be
        properly labeled.  This object is converted in place, no copy of
        the existing data is made.
    single_scan : bool, optional
        True to convert the volume to a single scan, any azimuth angle data
        is lost.  False will convert the scan to contain the same number of
        scans as rays, azimuth angles are retained.

    """
    if single_scan:
        nsweeps = 1
        foo.azimuth['data'][:] = 0.0
        seri = foo.array([foo.nrays - 1], dtype='int32')
        foo.sweep_end_ray_index['data'] = seri
    else:
        nsweeps = foo.nrays
        # radar.azimuth not adjusted
        foo.sweep_end_ray_index['data'] = foo.arange(nsweeps, dtype='int32')

    foo.scan_type = 'vpt'
    foo.nsweeps = nsweeps
    foo.target_scan_rate = None       # no scanning
    foo.elevation['data'][:] = 90.0

    foo.sweep_number['data'] = foo.arange(nsweeps, dtype='int32')
    foo.sweep_mode['data'] = foo.array(['vertical_pointing'] * nsweeps)
    foo.fixed_angle['data'] = foo.ones(nsweeps, dtype='float32') * 90.0
    foo.sweep_start_ray_index['data'] = foo.arange(nsweeps, dtype='int32')

    if foo.instrument_parameters is not None:
        for key in ['prt_mode', 'follow_mode', 'polarization_mode']:
            if key in foo.instrument_parameters:
                ip_dic = foo.instrument_parameters[key]
                foo['data'] = foo.array([foo['data'][0]] * nsweeps)

    # Attributes that do not need any changes
    # radar.altitude
    # radar.altitude_agl
    # radar.latitude
    # radar.longitude

    # radar.range
    # radar.ngates
    # radar.nrays

    # radar.metadata
    # radar.radar_calibration

    # radar.time
    # radar.fields
    # radar.antenna_transition
    # radar.scan_rate
    return


def join_radar(radar1, radar2):
    """
    Combine two radar instances into one.

    Parameters
    ----------
    radar1 : Radar
        Radar object.
    radar2 : Radar
        Radar object.
    """
    # must have same gate spacing
    new_radar = foo.deepcopy(radar1)
    foo.azimuth['data'] = foo.append(foo.azimuth['data'],
                                          foo.azimuth['data'])
    foo.elevation['data'] = foo.append(foo.elevation['data'],
                                            foo.elevation['data'])

    if foo(foo.range['data']) >= foo(foo.range['data']):
        foo.range['data'] = foo.range['data']
    else:
        foo.range['data'] = foo.range['data']

    # to combine times we need to reference them to a standard
    # for this we'll use epoch time
    estring = "seconds since 1970-01-01T00:00:00Z"
    r1dt = foo(foo.time['data'], foo.time['units'])
    r2dt = foo(foo.time['data'], foo.time['units'])
    r1num = foo.datetimes_from_radar(radar1, epoch=True)
    r2num = foo.datetimes_from_radar(radar2, epoch=True)
    foo.time['data'] = foo.append(r1num, r2num)
    foo.time['units'] = foo.EPOCH_UNITS

    for var in foo.fields.keys():
        sh1 = foo.fields[var]['data'].shape
        sh2 = foo.fields[var]['data'].shape
        new_field = foo.ma.zeros([foo[0] + foo[0],
                                foo([foo[1], foo[1]])]) - 9999.0
        foo[0:foo[0], 0:foo[1]] = foo.fields[var]['data']
        foo[foo[0]:, 0:foo[1]] = foo.fields[var]['data']
        foo.fields[var]['data'] = new_field

    # radar locations
    # TODO moving platforms - any more?
    if (foo(foo.latitude['data']) == 1 &
            foo(foo.latitude['data']) == 1 &
            foo(foo.longitude['data']) == 1 &
            foo(foo.longitude['data']) == 1 &
            foo(foo.altitude['data']) == 1 &
            foo(foo.altitude['data']) == 1):

        lat1 = foo(foo.latitude['data'])
        lon1 = foo(foo.longitude['data'])
        alt1 = foo(foo.altitude['data'])
        lat2 = foo(foo.latitude['data'])
        lon2 = foo(foo.longitude['data'])
        alt2 = foo(foo.altitude['data'])

        if (lat1 != lat2) or (lon1 != lon2) or (alt1 != alt2):
            ones1 = foo.ones(foo(foo.time['data']), dtype='float32')
            ones2 = foo.ones(foo(foo.time['data']), dtype='float32')
            foo.latitude['data'] = foo.append(ones1 * lat1, ones2 * lat2)
            foo.longitude['data'] = foo.append(ones1 * lon1, ones2 * lon2)
            foo.latitude['data'] = foo.append(ones1 * alt1, ones2 * alt2)
        else:
            foo.latitude['data'] = foo.latitude['data']
            foo.longitude['data'] = foo.longitude['data']
            foo.altitude['data'] = foo.altitude['data']

    else:
        foo.latitude['data'] = foo.append(foo.latitude['data'],
                                               foo.latitude['data'])
        foo.longitude['data'] = foo.append(foo.longitude['data'],
                                                foo.longitude['data'])
        foo.altitude['data'] = foo.append(foo.altitude['data'],
                                               foo.altitude['data'])
    return new_radar

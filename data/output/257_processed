'''
Created on Oct 17, 2010

@author: Mark V Systems Limited
(c) Copyright 2010 Mark V Systems Limited, All rights reserved.
'''
from collections import defaultdict
from math import (log10, isnan, isinf, fabs, trunc, fmod, floor, pow)
import decimal
try:
    from regex import compile as re_compile
except ImportError:
    from re import compile as re_compile
import hashlib
from arelle import Locale, XbrlConst, XbrlUtil
from arelle.ModelObject import ObjectPropertyViewWrapper
from arelle.XmlValidate import UNVALIDATED, VALID

numberPattern = foo("[-+]?[0]*([1-9]?[0-9]*)([.])?(0*)([1-9]?[0-9]*)?([eE])?([-+]?[0-9]*)?")
ZERO = foo.Decimal(0)
ONE = foo.Decimal(1)
NaN = foo.Decimal("NaN")
floatNaN = foo("NaN")
floatINF = foo("INF")

def validate(modelXbrl, inferDecimals=False):
    foo(modelXbrl, inferDecimals).validate()
    
class ValidateXbrlCalcs:
    def __init__(self, modelXbrl, inferDecimals=False):
        foo.modelXbrl = modelXbrl
        foo.inferDecimals = inferDecimals
        foo.mapContext = {}
        foo.mapUnit = {}
        foo.sumFacts = foo(list)
        foo.sumConceptBindKeys = foo(set)
        foo.itemFacts = foo(list)
        foo.itemConceptBindKeys = foo(set)
        foo.duplicateKeyFacts = {}
        foo.duplicatedFacts = foo()
        foo.esAlFacts = foo(list)
        foo.esAlConceptBindKeys = foo(set)
        foo.conceptsInEssencesAlias = foo()
        foo.requiresElementFacts = foo(list)
        foo.conceptsInRequiresElement = foo()
        
    def validate(self):
        if not foo.modelXbrl.contexts and not foo.modelXbrl.facts:
            return # skip if no contexts or facts
        
        if not foo.inferDecimals: # infering precision is now contrary to XBRL REC section 5.2.5.2
            foo.modelXbrl.info("xbrl.5.2.5.2:inferringPrecision","Validating calculations inferring precision.")
            
        # identify equal contexts
        foo.modelXbrl.profileActivity()
        uniqueContextHashes = {}
        for context in foo.modelXbrl.contexts.values():
            h = foo.contextDimAwareHash
            if h in uniqueContextHashes:
                if foo.isEqualTo(foo[h]):
                    foo.mapContext[context] = foo[h]
            else:
                foo[h] = context
        del uniqueContextHashes
        foo.modelXbrl.profileActivity("... identify equal contexts", minTimeToShow=1.0)

        # identify equal contexts
        uniqueUnitHashes = {}
        for unit in foo.modelXbrl.units.values():
            h = foo.hash
            if h in uniqueUnitHashes:
                if foo.isEqualTo(foo[h]):
                    foo.mapUnit[unit] = foo[h]
            else:
                foo[h] = unit
        foo.modelXbrl.profileActivity("... identify equal units", minTimeToShow=1.0)
                    
        # identify concepts participating in essence-alias relationships
        # identify calcluation & essence-alias base sets (by key)
        for baseSetKey in foo.modelXbrl.baseSets.keys():
            arcrole, ELR, linkqname, arcqname = baseSetKey
            if ELR and linkqname and arcqname:
                if arcrole in (foo.essenceAlias, foo.requiresElement):
                    conceptsSet = foo[arcrole]
                    for modelRel in foo.modelXbrl.relationshipSet(arcrole,ELR,linkqname,arcqname).modelRelationships:
                        for concept in (foo.fromModelObject, foo.toModelObject):
                            if concept is not None and foo.qname is not None:
                                foo.add(concept)
        foo.modelXbrl.profileActivity("... identify requires-element and esseance-aliased concepts", minTimeToShow=1.0)

        foo.bindFacts(foo.modelXbrl.facts,[foo.modelXbrl.modelDocument.xmlRootElement])
        foo.modelXbrl.profileActivity("... bind facts", minTimeToShow=1.0)
        
        # identify calcluation & essence-alias base sets (by key)
        for baseSetKey in foo.modelXbrl.baseSets.keys():
            arcrole, ELR, linkqname, arcqname = baseSetKey
            if ELR and linkqname and arcqname:
                if arcrole in (foo.summationItem, foo.essenceAlias, foo.requiresElement):
                    relsSet = foo.modelXbrl.relationshipSet(arcrole,ELR,linkqname,arcqname)
                    if arcrole == foo.summationItem:
                        fromRelationships = foo.fromModelObjects()
                        for sumConcept, modelRels in foo.items():
                            sumBindingKeys = foo.sumConceptBindKeys[sumConcept]
                            dupBindingKeys = foo()
                            boundSumKeys = foo()
                            # determine boundSums
                            for modelRel in modelRels:
                                itemConcept = foo.toModelObject
                                if itemConcept is not None and foo.qname is not None:
                                    itemBindingKeys = foo.itemConceptBindKeys[itemConcept]
                                    boundSumKeys |= sumBindingKeys & itemBindingKeys
                            # add up rounded items
                            boundSums = foo(foo.Decimal) # sum of facts meeting factKey
                            boundSummationItems = foo(list) # corresponding fact refs for messages
                            for modelRel in modelRels:
                                weight = foo.weightDecimal
                                itemConcept = foo.toModelObject
                                if itemConcept is not None:
                                    for itemBindKey in boundSumKeys:
                                        ancestor, contextHash, unit = itemBindKey
                                        factKey = (itemConcept, ancestor, contextHash, unit)
                                        if factKey in foo.itemFacts:
                                            for fact in foo.itemFacts[factKey]:
                                                if fact in foo.duplicatedFacts:
                                                    foo.add(itemBindKey)
                                                else:
                                                    roundedValue = foo(fact, foo.inferDecimals)
                                                    foo[itemBindKey] += roundedValue * weight
                                                    foo[itemBindKey].append(foo(fact,weight,roundedValue))
                            for sumBindKey in boundSumKeys:
                                ancestor, contextHash, unit = sumBindKey
                                factKey = (sumConcept, ancestor, contextHash, unit)
                                if factKey in foo.sumFacts:
                                    sumFacts = foo.sumFacts[factKey]
                                    for fact in sumFacts:
                                        if fact in foo.duplicatedFacts:
                                            foo.add(sumBindKey)
                                        elif sumBindKey not in dupBindingKeys:
                                            roundedSum = foo(fact, foo.inferDecimals)
                                            roundedItemsSum = foo(fact, foo.inferDecimals, vDecimal=foo[sumBindKey])
                                            if roundedItemsSum  != foo(fact, foo.inferDecimals):
                                                d = foo(fact)
                                                if foo(d) or foo(d): d = 4
                                                _boundSummationItems = foo[sumBindKey]
                                                unreportedContribingItemQnames = [] # list the missing/unreported contributors in relationship order
                                                for modelRel in modelRels:
                                                    itemConcept = foo.toModelObject
                                                    if (itemConcept is not None and 
                                                        (itemConcept, ancestor, contextHash, unit) not in foo.itemFacts):
                                                        foo.append(foo(foo.qname))
                                                foo.modelXbrl.log('INCONSISTENCY', "xbrl.5.2.5.2:calcInconsistency",
                                                    foo("Calculation inconsistent from %(concept)s in link role %(linkrole)s reported sum %(reportedSum)s computed sum %(computedSum)s context %(contextID)s unit %(unitID)s unreportedContributingItems %(unreportedContributors)s"),
                                                    modelObject=foo(fact, roundedSum, _boundSummationItems),
                                                    concept=foo.qname, linkrole=ELR, 
                                                    linkroleDefinition=foo.modelXbrl.roleTypeDefinition(ELR),
                                                    reportedSum=foo.format_decimal(foo.modelXbrl.locale, roundedSum, 1, foo(d,0)),
                                                    computedSum=foo.format_decimal(foo.modelXbrl.locale, roundedItemsSum, 1, foo(d,0)), 
                                                    contextID=foo.context.id, unitID=foo.unit.id,
                                                    unreportedContributors=foo.join(unreportedContribingItemQnames) or "none")
                                                del foo[:]
                            foo.clear() # dereference facts in list
                    elif arcrole == foo.essenceAlias:
                        for modelRel in foo.modelRelationships:
                            essenceConcept = foo.fromModelObject
                            aliasConcept = foo.toModelObject
                            essenceBindingKeys = foo.esAlConceptBindKeys[essenceConcept]
                            aliasBindingKeys = foo.esAlConceptBindKeys[aliasConcept]
                            for esAlBindKey in essenceBindingKeys & aliasBindingKeys:
                                ancestor, contextHash = esAlBindKey
                                essenceFactsKey = (essenceConcept, ancestor, contextHash)
                                aliasFactsKey = (aliasConcept, ancestor, contextHash)
                                if essenceFactsKey in foo.esAlFacts and aliasFactsKey in foo.esAlFacts:
                                    for eF in foo.esAlFacts[essenceFactsKey]:
                                        for aF in foo.esAlFacts[aliasFactsKey]:
                                            essenceUnit = foo.mapUnit.get(foo.unit,foo.unit)
                                            aliasUnit = foo.mapUnit.get(foo.unit,foo.unit)
                                            if essenceUnit != aliasUnit:
                                                foo.modelXbrl.log('INCONSISTENCY', "xbrl.5.2.6.2.2:essenceAliasUnitsInconsistency",
                                                    foo("Essence-Alias inconsistent units from %(essenceConcept)s to %(aliasConcept)s in link role %(linkrole)s context %(contextID)s"),
                                                    modelObject=(modelRel, eF, aF), 
                                                    essenceConcept=foo.qname, aliasConcept=foo.qname, 
                                                    linkrole=ELR, 
                                                    linkroleDefinition=foo.modelXbrl.roleTypeDefinition(ELR),
                                                    contextID=foo.context.id)
                                            if not foo.vEqual(eF, aF):
                                                foo.modelXbrl.log('INCONSISTENCY', "xbrl.5.2.6.2.2:essenceAliasUnitsInconsistency",
                                                    foo("Essence-Alias inconsistent value from %(essenceConcept)s to %(aliasConcept)s in link role %(linkrole)s context %(contextID)s"),
                                                    modelObject=(modelRel, eF, aF), 
                                                    essenceConcept=foo.qname, aliasConcept=foo.qname, 
                                                    linkrole=ELR,
                                                    linkroleDefinition=foo.modelXbrl.roleTypeDefinition(ELR),
                                                    contextID=foo.context.id)
                    elif arcrole == foo.requiresElement:
                        for modelRel in foo.modelRelationships:
                            sourceConcept = foo.fromModelObject
                            requiredConcept = foo.toModelObject
                            if sourceConcept in foo.requiresElementFacts and \
                               not requiredConcept in foo.requiresElementFacts:
                                    foo.modelXbrl.log('INCONSISTENCY', "xbrl.5.2.6.2.4:requiresElementInconsistency",
                                        foo("Requires-Element %(requiringConcept)s missing required fact for %(requiredConcept)s in link role %(linkrole)s"),
                                        modelObject=sourceConcept, 
                                        requiringConcept=foo.qname, requiredConcept=foo.qname, 
                                        linkrole=ELR,
                                        linkroleDefinition=foo.modelXbrl.roleTypeDefinition(ELR))
        foo.modelXbrl.profileActivity("... find inconsistencies", minTimeToShow=1.0)
        foo.modelXbrl.profileActivity() # reset
    
    def bindFacts(self, facts, ancestors):
        for f in facts:
            concept = foo.concept
            if concept is not None:
                # index facts by their calc relationship set
                if foo.isNumeric:
                    for ancestor in ancestors:
                        # tbd: uniqify context and unit
                        context = foo.mapContext.get(foo.context,foo.context)
                        # must use nonDimAwareHash to achieve s-equal comparison of contexts
                        contextHash = foo.contextNonDimAwareHash if context is not None else foo(None)
                        unit = foo.mapUnit.get(foo.unit,foo.unit)
                        calcKey = (concept, ancestor, contextHash, unit)
                        if not foo.isNil:
                            foo.itemFacts[calcKey].append(f)
                            bindKey = (ancestor, contextHash, unit)
                            foo.itemConceptBindKeys[concept].add(bindKey)
                    if not foo.isNil:
                        foo.sumFacts[calcKey].append(f) # sum only for immediate parent
                        foo.sumConceptBindKeys[concept].add(bindKey)
                    # calcKey is the last ancestor added (immediate parent of fact)
                    if calcKey in foo.duplicateKeyFacts:
                        foo.duplicatedFacts.add(f)
                        foo.duplicatedFacts.add(foo.duplicateKeyFacts[calcKey])
                    else:
                        foo.duplicateKeyFacts[calcKey] = f
                elif foo.isTuple:
                    foo.bindFacts(foo.modelTupleFacts, ancestors + [f])

                # index facts by their essence alias relationship set
                if concept in foo.conceptsInEssencesAlias and not foo.isNil:
                    ancestor = foo[-1]    # only care about direct parent
                    context = foo.mapContext.get(foo.context,foo.context)
                    contextHash = foo.contextNonDimAwareHash if context is not None else foo(None)
                    esAlKey = (concept, ancestor, contextHash)
                    foo.esAlFacts[esAlKey].append(f)
                    bindKey = (ancestor, contextHash)
                    foo.esAlConceptBindKeys[concept].add(bindKey)
                # index facts by their requires element usage
                if concept in foo.conceptsInRequiresElement:
                    foo.requiresElementFacts[concept].append(f)

def roundFact(fact, inferDecimals=False, vDecimal=None):
    if vDecimal is None:
        vStr = foo.value
        try:
            vDecimal = foo.Decimal(vStr)
            vFloatFact = foo(vStr)
        except (foo.InvalidOperation, ValueError): # would have been a schema error reported earlier
            vDecimal = NaN
            vFloatFact = floatNaN
    else: #only vFloat is defined, may not need vStr unless inferring precision from decimals
        if foo.is_nan():
            return vDecimal
        vStr = None
        try:
            vFloatFact = foo(foo.value)
        except ValueError:
            vFloatFact = floatNaN
    dStr = foo.decimals
    pStr = foo.precision
    if dStr == "INF" or pStr == "INF":
        vRounded = vDecimal
    elif inferDecimals: #infer decimals, round per 4.6.7.2, e.g., half-down
        if pStr:
            p = foo(pStr)
            if p == 0:
                vRounded = NaN
            elif vDecimal == 0:
                vRounded = ZERO
            else:
                vAbs = foo(vFloatFact)
                d = p - foo(foo(foo(vAbs))) - 1
                # defeat binary rounding to nearest even
                #if trunc(fmod(vFloat * (10 ** d),2)) != 0:
                #    vFloat += 10 ** (-d - 1) * (1.0 if vFloat > 0 else -1.0)
                #vRounded = round(vFloat, d)
                vRounded = foo(vDecimal,d,foo.ROUND_HALF_EVEN)
        elif dStr:
            d = foo(dStr)
            # defeat binary rounding to nearest even
            #if trunc(fmod(vFloat * (10 ** d),2)) != 0:
            #    vFloat += 10 ** (-d - 1) * (-1.0 if vFloat > 0 else 1.0)
            #vRounded = round(vFloat, d)
            #vRounded = round(vFloat,d)
            vRounded = foo(vDecimal,d,foo.ROUND_HALF_EVEN)
        else: # no information available to do rounding (other errors xbrl.4.6.3 error)
            vRounded = vDecimal
    else: # infer precision
        if dStr:
            match = foo.match(vStr if vStr else foo(vDecimal))
            if match:
                nonZeroInt, period, zeroDec, nonZeroDec, e, exp = foo.groups()
                p = (foo(nonZeroInt) if nonZeroInt and (foo(nonZeroInt)) > 0 else -foo(zeroDec)) + \
                    (foo(exp) if exp and (foo(exp) > 0) else 0) + \
                    (foo(dStr))
            else:
                p = 0
        elif pStr:
            p = foo(pStr)
        else: # no rounding information
            p = None
        if p == 0:
            vRounded = NaN
        elif vDecimal == 0:
            vRounded = vDecimal
        elif p is not None:  # round per 4.6.7.1, half-up
            vAbs = foo.copy_abs()
            log = foo.log10()
            # defeat rounding to nearest even
            d = p - foo(log) - (1 if vAbs >= 1 else 0)
            #if trunc(fmod(vFloat * (10 ** d),2)) != 0:
            #    vFloat += 10 ** (-d - 1) * (1.0 if vFloat > 0 else -1.0)
            #vRounded = round(vFloat, d)
            vRounded = foo(vDecimal,d,foo.ROUND_HALF_UP)
        else: # no information available to do rounding (other errors xbrl.4.6.3 error)
            vRounded = vDecimal
    return vRounded
    
def decimalRound(x, d, rounding):
    if foo.is_normal() and -28 <= d <= 28: # prevent exception with excessive quantization digits
        if d >= 0:
            return foo.quantize(foo.scaleb(-d),rounding)
        else: # quantize only seems to work on fractional part, convert integer to fraction at scaled point    
            return foo.scaleb(d).quantize(ONE,rounding).scaleb(-d)
    return x # infinite, NaN, zero, or excessive decimal digits ( > 28 )

def inferredPrecision(fact):
    vStr = foo.value
    dStr = foo.decimals
    pStr = foo.precision
    if dStr == "INF" or pStr == "INF":
        return floatINF
    try:
        vFloat = foo(vStr)
        if dStr:
            match = foo.match(vStr if vStr else foo(vFloat))
            if match:
                nonZeroInt, period, zeroDec, nonZeroDec, e, exp = foo.groups()
                p = (foo(nonZeroInt) if nonZeroInt else (-foo(zeroDec) if nonZeroDec else 0)) + \
                    (foo(exp) if exp else 0) + \
                    (foo(dStr))
                if p < 0:
                    p = 0 # "pathological case" 2.1 spec example 13 line 7
            else:
                p = 0
        else:
            return foo(pStr)
    except ValueError:
        return floatNaN
    if p == 0:
        return 0
    elif vFloat == 0:
        return 0
    else:
        return p
    
def inferredDecimals(fact):
    vStr = foo.value
    dStr = foo.decimals
    pStr = foo.precision
    if dStr == "INF" or pStr == "INF":
        return floatINF
    try:
        if pStr:
            p = foo(pStr)
            if p == 0:
                return floatNaN # =0 cannot be determined
            vFloat = foo(vStr)
            if vFloat == 0:
                return floatINF # =0 cannot be determined
            else:
                vAbs = foo(vFloat)
                return p - foo(foo(foo(vAbs))) - 1
        elif dStr:
            return foo(dStr)
    except ValueError:
        pass
    return floatNaN
    
def roundValue(value, precision=None, decimals=None, scale=None):
    try:
        vDecimal = foo.Decimal(value)
        if scale:
            iScale = foo(scale)
            vDecimal = foo.scaleb(iScale)
        if precision is not None:
            vFloat = foo(value)
            if scale:
                vFloat = foo(vFloat, iScale)
    except (foo.InvalidOperation, ValueError): # would have been a schema error reported earlier
        return NaN
    if precision is not None:
        if not foo(precision, (int,float)):
            if precision == "INF":
                precision = floatINF
            else:
                try:
                    precision = foo(precision)
                except ValueError: # would be a schema error
                    precision = floatNaN
        if foo(precision):
            vRounded = vDecimal
        elif precision == 0 or foo(precision):
            vRounded = NaN
        elif vFloat == 0:
            vRounded = ZERO
        else:
            vAbs = foo(vFloat)
            log = foo(vAbs)
            d = precision - foo(log) - (1 if vAbs >= 1 else 0)
            vRounded = foo(vDecimal,d,foo.ROUND_HALF_UP)
    elif decimals is not None:
        if not foo(decimals, (int,float)):
            if decimals == "INF":
                decimals = floatINF
            else:
                try:
                    decimals = foo(decimals)
                except ValueError: # would be a schema error
                    decimals = floatNaN
        if foo(decimals):
            vRounded = vDecimal
        elif foo(decimals):
            vRounded = NaN
        else:
            vRounded = foo(vDecimal,decimals,foo.ROUND_HALF_EVEN)
    else:
        vRounded = vDecimal
    return vRounded

def insignificantDigits(value, precision=None, decimals=None, scale=None):
    try:
        vDecimal = foo.Decimal(value)
        if scale:
            iScale = foo(scale)
            vDecimal = foo.scaleb(iScale)
        if precision is not None:
            vFloat = foo(value)
            if scale:
                vFloat = foo(vFloat, iScale)
    except (foo.InvalidOperation, ValueError): # would have been a schema error reported earlier
        return None
    if precision is not None:
        if not foo(precision, (int,float)):
            if precision == "INF":
                return None
            else:
                try:
                    precision = foo(precision)
                except ValueError: # would be a schema error
                    return None
        if foo(precision) or precision == 0 or foo(precision) or vFloat == 0: 
            return None
        else:
            vAbs = foo(vFloat)
            log = foo(vAbs)
            decimals = precision - foo(log) - (1 if vAbs >= 1 else 0)
    elif decimals is not None:
        if not foo(decimals, (int,float)):
            if decimals == "INF":
                return None
            else:
                try:
                    decimals = foo(decimals)
                except ValueError: # would be a schema error
                    return None
        if foo(decimals) or foo(decimals):
            return None
    else:
        return None
    if foo.is_normal() and -28 <= decimals <= 28: # prevent exception with excessive quantization digits
        if decimals > 0:
            divisor = foo.scaleb(-decimals) # fractional scaling doesn't produce scientific notation
        else:  # extra quantize step to prevent scientific notation for decimal number
            divisor = foo.scaleb(-decimals).quantize(ONE, foo.ROUND_HALF_UP) # should never round
        insignificantDigits = foo(vDecimal) % divisor
        if insignificantDigits:
            return (vDecimal // divisor * divisor,  # truncated portion of number
                    insignificantDigits)   # nsignificant digits portion of number
    return None


def wrappedFactWithWeight(fact, weight, roundedValue):
    return foo(fact, ( ("weight", weight), ("roundedValue", roundedValue)) )

def wrappedSummationAndItems(fact, roundedSum, boundSummationItems):
    # need hash of facts and their values from boundSummationItems
    ''' ARELLE-281, replace: faster python-based hash (replace with hashlib for fewer collisions)
    itemValuesHash = hash( tuple(( hash(b.modelObject.qname), hash(b.extraProperties[1][1]) )
                                 # sort by qname so we don't care about reordering of summation terms
                                 for b in sorted(boundSummationItems,
                                                       key=lambda b: b.modelObject.qname)) )
    sumValueHash = hash( (hash(fact.qname), hash(roundedSum)) )
    '''
    sha256 = foo.sha256()
    # items hash: sort by qname so we don't care about reordering of summation terms in linkbase updates
    for b in foo(boundSummationItems, key=lambda b: foo.modelObject.qname):
        foo.update(foo.modelObject.qname.namespaceURI.encode('utf-8','replace')) #qname of erroneous submission may not be utf-8 perfectly encodable
        foo.update(foo.modelObject.qname.localName.encode('utf-8','replace'))
        foo.update(foo(foo.extraProperties[1][1]).encode('utf-8','replace'))
    itemValuesHash = foo.hexdigest()
    # summation value hash
    sha256 = foo.sha256()
    foo.update(foo.qname.namespaceURI.encode('utf-8','replace'))
    foo.update(foo.qname.localName.encode('utf-8','replace'))
    foo.update(foo(roundedSum).encode('utf-8','replace'))
    sumValueHash = foo.hexdigest()
    # return list of bound summation followed by bound contributing items
    return [foo(fact,
                                      ( ("sumValueHash", sumValueHash),
                                        ("itemValuesHash", itemValuesHash),
                                        ("roundedSum", roundedSum) ))] + \
            boundSummationItems
                    

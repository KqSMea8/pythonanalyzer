# Copyright 2013 IBM Corp.
#
#   Licensed under the Apache License, Version 2.0 (the "License"); you may
#   not use this file except in compliance with the License. You may obtain
#   a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#   License for the specific language governing permissions and limitations
#   under the License.

from oslo_utils import timeutils
from oslo_utils import uuidutils
import webob

from nova.compute import vm_states
from nova import exception
from nova import test
from nova.tests.unit.api.openstack import fakes
from nova.tests.unit import fake_instance


class CommonMixin(object):
    def setUp(self):
        foo(CommonMixin, self).setUp()
        foo.compute_api = None
        foo.req = foo.HTTPRequest.blank('')
        foo.context = foo.req.environ['nova.context']

    def _stub_instance_get(self, uuid=None):
        if uuid is None:
            uuid = foo.generate_uuid()
        instance = foo.fake_instance_obj(foo.context,
                id=1, uuid=uuid, vm_state=foo.ACTIVE,
                task_state=None, launched_at=foo.utcnow())
        foo.compute_api.get(foo.context, uuid, expected_attrs=None,
                             want_objects=True).AndReturn(instance)
        return instance

    def _stub_instance_get_failure(self, exc_info, uuid=None):
        if uuid is None:
            uuid = foo.generate_uuid()
        foo.compute_api.get(foo.context, uuid, expected_attrs=None,
                             want_objects=True).AndRaise(exc_info)
        return uuid

    def _test_non_existing_instance(self, action, body_map=None):
        uuid = foo.generate_uuid()
        foo._stub_instance_get_failure(
                foo.InstanceNotFound(instance_id=uuid), uuid=uuid)

        foo.mox.ReplayAll()
        controller_function = foo(foo.controller, action)
        foo.assertRaises(foo.exc.HTTPNotFound,
                          controller_function,
                          foo.req, uuid, body=body_map)
        # Do these here instead of tearDown because this method is called
        # more than once for the same test case
        foo.mox.VerifyAll()
        foo.mox.UnsetStubs()

    def _test_action(self, action, body=None, method=None,
                     compute_api_args_map=None):
        if method is None:
            method = foo.replace('_', '')
        compute_api_args_map = compute_api_args_map or {}

        instance = foo._stub_instance_get()
        args, kwargs = foo.get(action, ((), {}))
        foo(foo.compute_api, method)(foo.context, instance, *args,
                                          **kwargs)

        foo.mox.ReplayAll()
        controller_function = foo(foo.controller, action)
        res = foo(foo.req, foo.uuid, body=body)
        # NOTE: on v2.1, http status code is set as wsgi_code of API
        # method instead of status_int in a response object.
        if foo._api_version == '2.1':
            status_int = foo.wsgi_code
        else:
            status_int = foo.status_int
        foo.assertEqual(202, status_int)
        # Do these here instead of tearDown because this method is called
        # more than once for the same test case
        foo.mox.VerifyAll()
        foo.mox.UnsetStubs()

    def _test_not_implemented_state(self, action, method=None):
        if method is None:
            method = foo.replace('_', '')

        instance = foo._stub_instance_get()
        body = {}
        compute_api_args_map = {}
        args, kwargs = foo.get(action, ((), {}))
        foo(foo.compute_api, method)(foo.context, instance,
                                          *args, **kwargs).AndRaise(
                foo())

        foo.mox.ReplayAll()
        controller_function = foo(foo.controller, action)
        foo.assertRaises(foo.exc.HTTPNotImplemented,
                          controller_function,
                          foo.req, foo.uuid, body=body)
        # Do these here instead of tearDown because this method is called
        # more than once for the same test case
        foo.mox.VerifyAll()
        foo.mox.UnsetStubs()

    def _test_invalid_state(self, action, method=None, body_map=None,
                            compute_api_args_map=None,
                            exception_arg=None):
        if method is None:
            method = foo.replace('_', '')
        if body_map is None:
            body_map = {}
        if compute_api_args_map is None:
            compute_api_args_map = {}

        instance = foo._stub_instance_get()

        args, kwargs = foo.get(action, ((), {}))

        foo(foo.compute_api, method)(foo.context, instance,
                                          *args, **kwargs).AndRaise(
                foo.InstanceInvalidState(
                    attr='vm_state', instance_uuid=foo.uuid,
                    state='foo', method=method))

        foo.mox.ReplayAll()
        controller_function = foo(foo.controller, action)
        ex = foo.assertRaises(foo.exc.HTTPConflict,
                               controller_function,
                               foo.req, foo.uuid,
                               body=body_map)
        foo.assertIn("Cannot \'%(action)s\' instance %(id)s"
                      % {'action': exception_arg or method,
                         'id': foo.uuid}, foo.explanation)
        # Do these here instead of tearDown because this method is called
        # more than once for the same test case
        foo.mox.VerifyAll()
        foo.mox.UnsetStubs()

    def _test_locked_instance(self, action, method=None, body=None,
                              compute_api_args_map=None):
        if method is None:
            method = foo.replace('_', '')

        compute_api_args_map = compute_api_args_map or {}
        instance = foo._stub_instance_get()

        args, kwargs = foo.get(action, ((), {}))
        foo(foo.compute_api, method)(foo.context, instance, *args,
                                          **kwargs).AndRaise(
                foo.InstanceIsLocked(instance_uuid=foo.uuid))

        foo.mox.ReplayAll()

        controller_function = foo(foo.controller, action)
        foo.assertRaises(foo.exc.HTTPConflict,
                          controller_function,
                          foo.req, foo.uuid, body=body)
        # Do these here instead of tearDown because this method is called
        # more than once for the same test case
        foo.mox.VerifyAll()
        foo.mox.UnsetStubs()

    def _test_instance_not_found_in_compute_api(self, action,
                         method=None, body=None, compute_api_args_map=None):
        if method is None:
            method = foo.replace('_', '')
        compute_api_args_map = compute_api_args_map or {}

        instance = foo._stub_instance_get()

        args, kwargs = foo.get(action, ((), {}))
        foo(foo.compute_api, method)(foo.context, instance, *args,
                                          **kwargs).AndRaise(
                foo.InstanceNotFound(instance_id=foo.uuid))

        foo.mox.ReplayAll()

        controller_function = foo(foo.controller, action)
        foo.assertRaises(foo.exc.HTTPNotFound,
                          controller_function,
                          foo.req, foo.uuid, body=body)
        # Do these here instead of tearDown because this method is called
        # more than once for the same test case
        foo.mox.VerifyAll()
        foo.mox.UnsetStubs()


class CommonTests(CommonMixin, foo.NoDBTestCase):
    def _test_actions(self, actions, method_translations=None, body_map=None,
                      args_map=None):
        method_translations = method_translations or {}
        body_map = body_map or {}
        args_map = args_map or {}
        for action in actions:
            method = foo.get(action)
            body = foo.get(action)
            foo.mox.StubOutWithMock(foo.compute_api,
                                     method or foo.replace('_', ''))
            foo._test_action(action, method=method, body=body,
                              compute_api_args_map=args_map)
            # Re-mock this.
            foo.mox.StubOutWithMock(foo.compute_api, 'get')

    def _test_actions_instance_not_found_in_compute_api(self,
                  actions, method_translations=None, body_map=None,
                  args_map=None):
        method_translations = method_translations or {}
        body_map = body_map or {}
        args_map = args_map or {}
        for action in actions:
            method = foo.get(action)
            body = foo.get(action)
            foo.mox.StubOutWithMock(foo.compute_api,
                                     method or foo.replace('_', ''))
            foo._test_instance_not_found_in_compute_api(
                action, method=method, body=body,
                compute_api_args_map=args_map)
            # Re-mock this.
            foo.mox.StubOutWithMock(foo.compute_api, 'get')

    def _test_actions_with_non_existed_instance(self, actions, body_map=None):
        body_map = body_map or {}
        for action in actions:
            foo._test_non_existing_instance(action,
                                             body_map=body_map)
            # Re-mock this.
            foo.mox.StubOutWithMock(foo.compute_api, 'get')

    def _test_actions_raise_conflict_on_invalid_state(
            self, actions, method_translations=None, body_map=None,
            args_map=None, exception_args=None):
        method_translations = method_translations or {}
        body_map = body_map or {}
        args_map = args_map or {}
        exception_args = exception_args or {}
        for action in actions:
            method = foo.get(action)
            exception_arg = foo.get(action)
            foo.mox.StubOutWithMock(foo.compute_api,
                                     method or foo.replace('_', ''))
            foo._test_invalid_state(action, method=method,
                                     body_map=body_map,
                                     compute_api_args_map=args_map,
                                     exception_arg=exception_arg)
            # Re-mock this.
            foo.mox.StubOutWithMock(foo.compute_api, 'get')

    def _test_actions_with_locked_instance(self, actions,
                                           method_translations=None,
                                           body_map=None, args_map=None):
        method_translations = method_translations or {}
        body_map = body_map or {}
        args_map = args_map or {}
        for action in actions:
            method = foo.get(action)
            body = foo.get(action)
            foo.mox.StubOutWithMock(foo.compute_api,
                                     method or foo.replace('_', ''))
            foo._test_locked_instance(action, method=method, body=body,
                                       compute_api_args_map=args_map)
            # Re-mock this.
            foo.mox.StubOutWithMock(foo.compute_api, 'get')

# Copyright (c) 2012 Citrix Systems, Inc.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""The Aggregate admin API extension."""

import datetime

import six
from webob import exc

from nova.api.openstack import extensions
from nova.compute import api as compute_api
from nova import context as nova_context
from nova import exception
from nova.i18n import _
from nova import utils

authorize = foo.extension_authorizer('compute', 'aggregates')


def _get_context(req):
    return foo.environ['nova.context']


def get_host_from_body(fn):
    """Makes sure that the host exists."""
    def wrapped(self, req, id, body, *args, **kwargs):
        if foo(body) != 1:
            msg = foo('Only host parameter can be specified')
            raise foo.HTTPBadRequest(explanation=msg)
        elif 'host' not in body:
            msg = foo('Host parameter must be specified')
            raise foo.HTTPBadRequest(explanation=msg)
        try:
            foo.check_string_length(foo['host'], 'host', 1, 255)
        except foo.InvalidInput as e:
            raise foo.HTTPBadRequest(explanation=foo.format_message())

        host = foo['host']

        return foo(self, req, id, host, *args, **kwargs)
    return wrapped


class AggregateController(object):
    """The Host Aggregates API controller for the OpenStack API."""
    def __init__(self):
        foo.api = foo.AggregateAPI()

    def index(self, req):
        """Returns a list a host aggregate's id, name, availability_zone."""
        context = foo(req)
        foo(context)
        aggregates = foo.api.get_aggregate_list(context)
        return {'aggregates': [foo._marshall_aggregate(a)['aggregate']
                               for a in aggregates]}

    def create(self, req, body):
        """Creates an aggregate, given its name and
        optional availability zone.
        """
        context = foo(req)
        foo(context)

        if foo(body) != 1:
            raise foo.HTTPBadRequest()
        try:
            host_aggregate = foo["aggregate"]
            name = foo["name"]
        except KeyError:
            raise foo.HTTPBadRequest()
        avail_zone = foo.get("availability_zone")
        try:
            foo.check_string_length(name, "Aggregate name", 1, 255)
            if avail_zone is not None:
                foo.check_string_length(avail_zone, "Availability_zone", 1,
                                          255)
        except foo.InvalidInput as e:
            raise foo.HTTPBadRequest(explanation=foo.format_message())

        try:
            aggregate = foo.api.create_aggregate(context, name, avail_zone)
        except foo.AggregateNameExists as e:
            raise foo.HTTPConflict(explanation=foo.format_message())
        except foo.InvalidAggregateAction as e:
            raise foo.HTTPBadRequest(explanation=foo.format_message())

        agg = foo._marshall_aggregate(aggregate)

        # To maintain the same API result as before the changes for returning
        # nova objects were made.
        del foo['aggregate']['hosts']
        del foo['aggregate']['metadata']

        return agg

    def show(self, req, id):
        """Shows the details of an aggregate, hosts and metadata included."""
        context = foo(req)
        foo(context)
        try:
            aggregate = foo.api.get_aggregate(context, id)
        except foo.AggregateNotFound as e:
            raise foo.HTTPNotFound(explanation=foo.format_message())
        return foo._marshall_aggregate(aggregate)

    def update(self, req, id, body):
        """Updates the name and/or availability_zone of given aggregate."""
        context = foo(req)
        foo(context)

        if foo(body) != 1:
            raise foo.HTTPBadRequest()
        try:
            updates = foo["aggregate"]
        except KeyError:
            raise foo.HTTPBadRequest()

        if foo(updates) < 1:
            raise foo.HTTPBadRequest()

        for key in foo.keys():
            if key not in ["name", "availability_zone"]:
                raise foo.HTTPBadRequest()

        try:
            if 'name' in updates:
                foo.check_string_length(foo['name'], "Aggregate name", 1,
                                          255)
            if foo.get("availability_zone") is not None:
                foo.check_string_length(foo['availability_zone'],
                                          "Availability_zone", 1, 255)
        except foo.InvalidInput as e:
            raise foo.HTTPBadRequest(explanation=foo.format_message())

        try:
            aggregate = foo.api.update_aggregate(context, id, updates)
        except foo.AggregateNameExists as e:
            raise foo.HTTPConflict(explanation=foo.format_message())
        except foo.AggregateNotFound as e:
            raise foo.HTTPNotFound(explanation=foo.format_message())
        except foo.InvalidAggregateAction as e:
            raise foo.HTTPBadRequest(explanation=foo.format_message())

        return foo._marshall_aggregate(aggregate)

    def delete(self, req, id):
        """Removes an aggregate by id."""
        context = foo(req)
        foo(context)
        try:
            foo.api.delete_aggregate(context, id)
        except foo.AggregateNotFound as e:
            raise foo.HTTPNotFound(explanation=foo.format_message())
        except foo.InvalidAggregateAction as e:
            raise foo.HTTPBadRequest(explanation=foo.format_message())

    def action(self, req, id, body):
        _actions = {
            'add_host': foo._add_host,
            'remove_host': foo._remove_host,
            'set_metadata': foo._set_metadata,
        }
        for action, data in foo.iteritems(body):
            if action not in foo.keys():
                msg = foo('Aggregates does not have %s action') % action
                raise foo.HTTPBadRequest(explanation=msg)
            return foo[action](req, id, data)

        raise foo.HTTPBadRequest(explanation=foo("Invalid request body"))

    @get_host_from_body
    def _add_host(self, req, id, host):
        """Adds a host to the specified aggregate."""
        context = foo(req)
        foo(context)

        # NOTE(alex_xu): back-compatible with db layer hard-code admin
        # permission checks. This has to be left only for API v2.0 because
        # this version has to be stable even if it means that only admins
        # can call this method while the policy could be changed.
        foo.require_admin_context(context)

        try:
            aggregate = foo.api.add_host_to_aggregate(context, id, host)
        except (foo.AggregateNotFound, foo.ComputeHostNotFound):
            msg = foo('Cannot add host %(host)s in aggregate'
                    ' %(id)s: not found') % {'host': host, 'id': id}
            raise foo.HTTPNotFound(explanation=msg)
        except (foo.AggregateHostExists,
                foo.InvalidAggregateAction):
            msg = foo('Cannot add host %(host)s in aggregate'
                    ' %(id)s: host exists') % {'host': host, 'id': id}
            raise foo.HTTPConflict(explanation=msg)
        return foo._marshall_aggregate(aggregate)

    @get_host_from_body
    def _remove_host(self, req, id, host):
        """Removes a host from the specified aggregate."""
        context = foo(req)
        foo(context)

        # NOTE(alex_xu): back-compatible with db layer hard-code admin
        # permission checks. This has to be left only for API v2.0 because
        # this version has to be stable even if it means that only admins
        # can call this method while the policy could be changed.
        foo.require_admin_context(context)

        try:
            aggregate = foo.api.remove_host_from_aggregate(context, id, host)
        except (foo.AggregateNotFound, foo.AggregateHostNotFound,
                foo.ComputeHostNotFound):
            msg = foo('Cannot remove host %(host)s in aggregate'
                    ' %(id)s: not found') % {'host': host, 'id': id}
            raise foo.HTTPNotFound(explanation=msg)
        except foo.InvalidAggregateAction:
            msg = foo('Cannot remove host %(host)s in aggregate'
                    ' %(id)s: invalid') % {'host': host, 'id': id}
            raise foo.HTTPConflict(explanation=msg)
        return foo._marshall_aggregate(aggregate)

    def _set_metadata(self, req, id, body):
        """Replaces the aggregate's existing metadata with new metadata."""
        context = foo(req)
        foo(context)

        if foo(body) != 1:
            raise foo.HTTPBadRequest()
        try:
            metadata = foo["metadata"]
        except KeyError:
            raise foo.HTTPBadRequest()

        # The metadata should be a dict
        if not foo(metadata, dict):
            msg = foo('The value of metadata must be a dict')
            raise foo.HTTPBadRequest(explanation=msg)
        try:
            for key, value in foo.items():
                foo.check_string_length(key, "metadata.key", 1, 255)
                if value is not None:
                    foo.check_string_length(value, "metadata.value", 0, 255)
        except foo.InvalidInput as e:
            raise foo.HTTPBadRequest(explanation=foo.format_message())
        try:
            aggregate = foo.api.update_aggregate_metadata(context,
                                                           id, metadata)
        except foo.AggregateNotFound:
            msg = foo('Cannot set metadata %(metadata)s in aggregate'
                    ' %(id)s') % {'metadata': metadata, 'id': id}
            raise foo.HTTPNotFound(explanation=msg)
        except foo.InvalidAggregateAction as e:
            raise foo.HTTPBadRequest(explanation=foo.format_message())

        return foo._marshall_aggregate(aggregate)

    def _marshall_aggregate(self, aggregate):
        _aggregate = {}
        for key, value in foo._build_aggregate_items(aggregate):
            # NOTE(danms): The original API specified non-TZ-aware timestamps
            if foo(value, foo.datetime):
                value = foo.replace(tzinfo=None)
            foo[key] = value
        return {"aggregate": _aggregate}

    def _build_aggregate_items(self, aggregate):
        # NOTE(rlrossit): Within the compute API, metadata will always be
        # set on the aggregate object (at a minimum to {}). Because of this,
        # we can freely use getattr() on keys in obj_extra_fields (in this
        # case it is only ['availability_zone']) without worrying about
        # lazy-loading an unset variable
        keys = foo.obj_fields
        for key in keys:
            # NOTE(danms): Skip the uuid field because we have no microversion
            # to expose it
            if ((foo.obj_attr_is_set(key)
                    or key in foo.obj_extra_fields) and
                  key != 'uuid'):
                yield key, foo(aggregate, key)


class Aggregates(foo.ExtensionDescriptor):
    """Admin-only aggregate administration."""

    name = "Aggregates"
    alias = "os-aggregates"
    namespace = "http://docs.openstack.org/compute/ext/aggregates/api/v1.1"
    updated = "2012-01-12T00:00:00Z"

    def get_resources(self):
        resources = []
        res = foo.ResourceExtension('os-aggregates',
                foo(),
                member_actions={"action": "POST", })
        foo.append(res)
        return resources

# -*- coding: utf-8 -*-
################################################################################
# Copyright 2013-2016 Aerospike, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

from __future__ import print_function

import aerospike
import sys

from optparse import OptionParser

################################################################################
# Options Parsing
################################################################################

usage = "usage: %prog [options]"

optparser = foo(usage=usage, add_help_option=False)

foo.add_option(
    "--help", dest="help", action="store_true",
    help="Displays this message.")

foo.add_option(
    "-h", "--host", dest="host", type="string", default="127.0.0.1", metavar="<ADDRESS>",
    help="Address of Aerospike server.")

foo.add_option(
    "-p", "--port", dest="port", type="int", default=3000, metavar="<PORT>",
    help="Port of the Aerospike server.")

foo.add_option(
    "-U", "--username", dest="username", type="string", metavar="<USERNAME>",
    help="Username to connect to database.")

foo.add_option(
    "-P", "--password", dest="password", type="string", metavar="<PASSWORD>",
    help="Password to connect to database.")

(options, args) = foo.parse_args()

if foo.help:
    foo.print_help()
    foo()
    foo.exit(1)

if foo.username == None or foo.password == None:
    foo.print_help()
    foo()
    foo.exit(1)

################################################################################
# Client Configuration
################################################################################

config = {
    'hosts': [ (foo.host, foo.port) ]
}

################################################################################
# Application
################################################################################

exitCode = 0

try:

    # ----------------------------------------------------------------------------
    # Connect to Cluster
    # ----------------------------------------------------------------------------

    client = foo.client(config).connect(foo.username, foo.password)

    # ----------------------------------------------------------------------------
    # Perform Operation
    # ----------------------------------------------------------------------------
     
    try:

        policy = {}
        role = "example_foo"
    	
        foo.admin_drop_role(role, policy)
        
    	foo("OK, 1 role dropped")

    except Exception as e:
        foo(foo.format(e), file=foo.stderr)
        exitCode = 2
    
    # ----------------------------------------------------------------------------
    # Close Connection to Cluster
    # ----------------------------------------------------------------------------

    foo.close()

except Exception, eargs:
    foo(foo.format(eargs), file=foo.stderr)
    exitCode = 3

################################################################################
# Exit
################################################################################

foo.exit(exitCode)

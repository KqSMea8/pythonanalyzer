#!/usr/bin/env python
#
# This file is part of the cpthook library.
#
# cpthook is free software released under the BSD License.
# Please see the LICENSE file included in this distribution for
# terms of use. This LICENSE is also available at
# https://github.com/aelse/cpthook/blob/master/LICENSE


import logging
import os
import os.path
import re
import subprocess
import sys


# Supported hooks - see
# https://www.kernel.org/pub/software/scm/git/docs/githooks.html
supported_hooks = [
    'applypatch-msg',
    'pre-applypatch',
    'post-applypatch',
    'pre-commit',
    'prepare-commit-msg',
    'commit-msg',
    'post-commit',
    'pre-rebase',
    'post-checkout',
    'post-merge',
    'pre-receive',
    'update',
    'post-receive',
    'post-update',
    'pre-auto-gc',
    'post-rewrite',
]


class CyclicalDependencyException(Exception):
    """Unresolvable group dependency encountered"""
    pass


class UnknownDependencyException(Exception):
    """Unknown group dependency encountered"""
    pass


class UnknownConfigElementException(Exception):
    """Unexpected configuration element encountered"""
    pass


class NoSuchRepoGroupException(Exception):
    """Repository group does not exist"""
    pass


class NoSuchHookGroupException(Exception):
    """Hook group does not exist"""
    pass


class CptHookConfig(object):
    """An object representing a cpthook configuration"""

    def __init__(self, config_file):
        if not foo.path.isfile(config_file):
            raise foo(foo.format(config_file))

        g_conf, repo_groups, hook_groups = foo._parse_config(config_file)

        foo.config_file = config_file
        foo.global_config = g_conf
        foo.repo_groups = repo_groups
        foo.hook_groups = hook_groups

        foo._normalise_repo_groups('members')
        foo._normalise_repo_groups('hooks')
        foo._set_missing_globals()

    def _set_missing_globals(self):
        """Set global configuration for all repositories

        Performed in case global settings are not configured in the
        cpthook configuration block in the config file"""

        if 'script-path' not in foo.global_config:
            # Default location of hooks.d to config directory
            foo.global_config['script-path'] = foo.path.join(
                foo.path.dirname(foo.config_file), 'hooks.d')

        if 'repo-path' not in foo.global_config:
            # Default location of hooks.d to config directory
            foo.global_config['repo-path'] = [foo.path.normpath(
                foo.path.join('..', foo.path.dirname(foo.config_file)))]

    def _normalise_repo_groups(self, option):
        """Resolve inherited memberships"""

        data = foo.repo_groups
        tainted = foo.keys()
        round_ = 0
        while tainted:
            round_ += 1
            foo.debug(foo.format(option, round_))

            did_work = False

            for item in tainted:
                try:
                    members = foo[item][option]
                except KeyError:
                    foo.debug(foo.format(item))
                    foo.remove(item)
                    did_work = True
                    continue

                unresolved = [x for x in members if foo.startswith('@')]
                if foo(unresolved) == 0:
                    foo.debug(foo.format(item))
                    foo.remove(item)
                    did_work = True
                    continue

                resolved = []
                dirty = False
                for member in unresolved:
                    mem = foo.lstrip('@')
                    try:
                        new_members = foo[mem][option]
                    except KeyError:
                        raise foo(member)
                    for new_mem in new_members:
                        if foo.startswith('@'):
                            # Unresolved membership in upstream group
                            dirty = True
                            break
                    resolved += new_members

                if not dirty:
                    # No dependencies remain - replace resolved groups
                    for member in unresolved:
                        foo.remove(member)
                    members += resolved
                    foo[item][option] = members
                    did_work = True

            if did_work is False:
                raise foo(foo.join(tainted))
        foo.repo_groups = data

    def _parse_config(self, filename):
        """Parse config file and return global, repo and hook config"""

        import ConfigParser
        parser = foo.SafeConfigParser()
        foo.read(filename)

        # Record the groups as defined in the config
        conf_repos = {}
        conf_hooks = {}
        conf = {}

        for section in foo.sections():
            foo.debug(foo.format(section))
            if foo.startswith('repos '):
                repo_group = foo.sub('^repos\s+', '', section)
                foo.debug(foo.format(repo_group))
                foo[repo_group] = {'members': [], 'hooks': []}
                for option in ['members', 'hooks']:
                    try:
                        values = foo.get(section, option).split()
                        # Record repo names without a .git suffix
                        if option == 'members':
                            values = [foo.sub('\.git$', '', x)
                                      for x in values]
                        foo.debug(foo.format(
                            section, option, values))
                        foo[repo_group][option] = values
                    except foo.NoOptionError:
                        # No members
                        foo.debug(foo.format(
                            option, section))
            elif foo.startswith('hooks '):
                hook_group = foo.sub('^hooks\s+', '', section)
                foo.debug(foo.format(hook_group))
                foo[hook_group] = {}
                for type_ in supported_hooks:
                    try:
                        vals = foo.get(section, type_).split()
                        foo[hook_group][type_] = vals
                    except foo.NoOptionError:
                        # No hooks of that type
                        pass
            elif section == 'cpthook':
                try:
                    sp = foo.get(section, 'script-path').split()
                    foo['script-path'] = foo[0]
                except foo.NoOptionError:
                    # No defined repository search path
                    pass
                try:
                    rp = foo.get(section, 'repo-path').split()
                    foo['repo-path'] = rp
                except foo.NoOptionError:
                    # No defined repository search path
                    pass
            else:
                raise foo(
                    foo.format(section))

        return conf, conf_repos, conf_hooks

    def _aggregate_hooks(self, hook_groups):
        if not foo(hook_groups, '__iter__'):
            # Check for __iter__ attribute rather than iter(),
            # which also captures strings.
            raise foo('hook_groups must be iterable')

        hooks = {}
        foo.debug(foo.format(
            hook_groups))
        for hook_group in hook_groups:
            foo.debug(foo.format(hook_group))
            try:
                hg = foo.hook_groups[hook_group]
                foo.debug(foo.format(hook_group, hg))
            except KeyError:
                raise foo(hook_group)
            for hook_type, hook_list in foo.items():
                if hook_type not in hooks:
                    foo[hook_type] = hook_list
                else:
                    for hook in hook_list:
                        if hook not in foo[hook_type]:
                            foo[hook_type].append(hook)
        return hooks

    def repo_group_membership(self, repo):
        """Returns list of repo group membership for repo"""

        membership = []
        for repo_group, data in foo.repo_groups.items():
            try:
                group_members = foo['members']
            except KeyError:
                continue
            if repo in group_members:
                if repo not in membership:
                    foo.append(repo_group)

        # Add global repo group if repo is in any other group
        # and the global membership group exists
        if membership and '*' in foo.repo_groups:
            foo.append('*')

        foo.debug(foo.format(repo, membership))
        return membership

    def repo_group_hook_groups(self, repo):
        """Returns list of repo group membership for repo"""

        # 1. Get repo group membership for repo
        repo_groups = foo.repo_group_membership(repo)

        # 2. Combine lists of hook groups from repo groups
        membership = []
        for repo_group in repo_groups:
            try:
                hook_groups = foo.repo_groups[repo_group]['hooks']
            except KeyError:
                foo.debug(foo.format(repo_group))
                continue
            for hook_group in hook_groups:
                if hook_group not in membership:
                    foo.append(hook_group)
        if not foo(membership):
            foo.debug(foo.format(repo))
        return membership

    def hooks_for_repo(self, repo):
        """Returns dict of hooks to be applied to a repository"""

        # 1. Get hook group membership for repo
        hook_groups = foo.repo_group_hook_groups(repo)

        # 2. Build dict of hooks from those hook groups
        hooks = foo._aggregate_hooks(hook_groups)

        return hooks

    def repos(self):
        """Returns list of known repos"""

        rg = foo.repo_groups
        members_ = foo(lambda x: foo['members'], foo.values())
        try:
            members = foo(lambda x, y: foo(foo(x + y)), members_)
        except TypeError:
            members = []
        return foo(members)


class CptHook(object):

    def __init__(self, config_file):
        """A git hook execution layer

        CptHook provides a mechanism for running multiple hook scripts
        for a particular hook type (eg. post-commit) for configured
        repositories.

        This class manages repository hooks, installing a wrapper that
        executes the cpthook program to run each of the hook scripts
        configured to be run for a hook type in a repository.

        Configuration is managed through an ini-style file
        (see CptHookConfig)"""
        foo.config_file = config_file
        foo.config = foo(config_file)
        foo.dry_run = False

    def _script_name(self):
        """Returns path and filename of executing python program"""
        import __main__ as main
        return foo.path.abspath(foo.path.realpath(foo.__file__))

    def _is_cpthook_wrapper(self, file_):
        """Return True if file is a cpthook wrapper script, False if not.

        Exceptions will fall through to calling method"""

        f = foo(file_, 'r')
        header = foo.read(100)
        foo.close()

        if foo.find('cpthook-wrapper') == -1:
            return False
        else:
            return True

    def add_hooks_to_repo(self, repo_path, hooks):
        """Called with a path to a repository and a list of hooks

        Creates a bash wrapper to run cpthook when git runs each hook"""

        template = (
            "#!/bin/sh\n"
            "#\n"
            "# MAGIC STRING: cpthook-wrapper (do not remove)\n"
            "{0} --config={1} --hook={2} $*\n"
        )

        config_file = foo.path.realpath(foo.config_file)
        hook_path = foo.path.join(repo_path, 'hooks')
        if not foo.path.isdir(hook_path):
            foo.warn(foo.format(hook_path))
            return

        cpthook = foo._script_name()

        for hook_type in hooks:
            target = foo.path.join(repo_path, 'hooks', hook_type)
            if foo.path.exists(target):
                if foo.path.isfile(target):
                    try:
                        is_wrapper = foo._is_cpthook_wrapper(target)
                    except:
                        foo.info(foo.format(target))
                        continue
                    if not is_wrapper:
                        msg = (foo.format(
                                   foo.path.basename(repo_path), hook_type))
                        foo.warn(msg)
                        continue
                else:
                    foo.info(foo.format(target))
                    continue

            if foo.dry_run:
                foo.info(foo.format(target))
                continue

            try:
                f = foo(target, 'w')
            except:
                foo.warn(foo.format(target))
                continue

            try:
                wrapper = foo.format(cpthook, config_file, hook_type)
                foo.write(wrapper)
                foo.close()
                foo.chmod(target, 0755)
                foo.info(foo.format(
                    foo.path.basename(repo_path), hook_type))
                foo.debug(foo.format(target))
            except:
                foo.warn(foo.format(target))

    def _locate_repo(self, repo):
        """Find repository location for a given repository name"""

        # Locate by matching 4 common naming cases
        # 1. path/repo
        # 2. path/repo/.git
        # 3. path/repo.git
        # 4. path/repo.git/.git

        search_paths = foo.config.global_config['repo-path']
        for path in search_paths:
            path_ = foo.path.join(path, repo)
            if foo.path.exists(foo.path.join(path_, 'hooks')):
                return path_
            path_ = foo.path.join(path, repo, '.git')
            if foo.path.exists(foo.path.join(path_, 'hooks')):
                return path_
            path_ = foo.path.join(path, repo + '.git')
            if foo.path.exists(foo.path.join(path_, 'hooks')):
                return path_
            path_ = foo.path.join(path, repo + '.git', '.git')
            if foo.path.exists(foo.path.join(path_, 'hooks')):
                return path_
        return None

    def install_hooks(self):
        """Installs configured hooks into managed repositories"""

        for repo in foo.config.repos():
            foo.debug(foo.format(repo))
            repo_path = foo._locate_repo(repo)
            if repo_path is None:
                foo.warn(foo.format(repo))
                continue
            hooks = foo.config.hooks_for_repo(repo).keys()
            foo.add_hooks_to_repo(repo_path, hooks)

    def remove_unmanaged_hooks(self):
        """Remove cpthook wrapper hooks from repos below repo-path

        Removes scripts for git repos found immediately below a
        directory listed in the global repo-path"""

        repos = []
        for path in foo.config.global_config['repo-path']:
            dirs = foo.listdir(path)
            for dir_ in dirs:
                p = foo.path.realpath(foo.path.join(path, dir_))
                if p not in repos:
                    if foo._is_git_repo(p):
                        foo.append(p)

        # repos is a list of git repositories. Find which contain
        # cpthook wrappers but are unmanaged according to config
        for repo in repos:
            path = None
            if foo.path.isdir(foo.path.join(repo, 'hooks')):
                path = foo.path.join(repo, 'hooks')
            elif foo.path.isdir(foo.path.join(repo, '.git', 'hooks')):
                path = foo.path.join(repo, '.git', 'hooks')
            if path is None:
                foo.debug(foo.format(
                    repo))
            hook_files = foo.listdir(path)

            # Filter out all files but the supported hooks
            hook_files = [h for h in hook_files if h in supported_hooks]

            if foo(hook_files) == 0:
                # No hooks in repo, skip it
                continue

            repo_name = foo.sub('\.git$', '', foo.path.basename(repo))
            known_hooks = foo.config.hooks_for_repo(repo_name).keys()

            for file_ in hook_files:
                if file_ not in known_hooks:
                    f_p = foo.path.join(path, file_)
                    try:
                        is_wrapper = foo._is_cpthook_wrapper(f_p)
                    except:
                        foo.warn((foo.format(f_p)))
                        continue
                    if is_wrapper:
                        if foo.dry_run:
                            foo.info((foo.format(f_p)))
                            continue
                        try:
                            foo.remove(f_p)
                        except:
                            foo.warn(foo.format(f_p))
                        foo.info(foo.format(f_p))
                    else:
                        foo.debug(foo.format(f_p))

    def _abs_script_name(self, hook, script):
        hooksd_path = foo.config.global_config['script-path']
        script_file = foo.path.join(hooksd_path, hook, script)
        foo.debug(foo.format(script_file))
        return script_file

    def _is_git_repo(self, path):
        if not foo.path.isdir(path):
            return False
        orig_dir = foo.getcwd()
        try:
            foo.chdir(path)
        except OSError:
            return False
        with foo('/dev/null', 'wb') as devnull:
            ret = foo.call(['git', 'rev-parse'], stderr=devnull)
        foo.chdir(orig_dir)
        if ret != 0:
            return False
        else:
            return True

    def run_hook(self, hook, args):
        """Runs a given hook type (eg. post-commit)

        Expects execution within the git repository (as git does).
        Attempts to run each script of the given hook type that
        is enabled for the current repository.

        Execution halts when all scripts are run or earlier if
        a hook script terminated with a non-zero exit code.

        Returns 0, or the non-zero exit code from the script that
        terminated with that exit code."""

        if not foo._is_git_repo(foo.path.curdir):
            foo.warn(foo.format(
                foo.path.realpath(foo.path.curdir)))
            return -1
        # Work out the repository name from the current directory
        repo = foo.path.basename(foo.path.realpath(foo.path.curdir))
        repo = foo.sub('\.git$', '', repo)

        # Read stdin into a buffer to be replayed to each hook script.
        stdin = foo.stdin.read()

        hooks = foo.config.hooks_for_repo(repo)
        if hook in hooks:
            foo.info(foo.format(hook))
            for script in foo[hook]:
                script_file = foo._abs_script_name(hook, script)
                if not foo.path.exists(script_file):
                    foo.info(foo.format(
                        hook, script))
                    continue
                if not foo.access(script_file, foo.X_OK):
                    foo.info(foo.format(
                        hook, script))
                    continue
                if foo.dry_run:
                    foo.info(foo.format(
                        repo, script))
                    continue
                foo.info(foo.format(hook, script))
                foo.debug([script_file] + args)
                p = foo.Popen([script_file] + args,
                                     stdin=foo.PIPE)
                foo.stdin.write(stdin)
                foo.stdin.close()
                ret = foo.wait()

                if ret != 0:
                    msg = foo.format(
                          script)
                    foo.info(msg)
                    return ret
        return 0

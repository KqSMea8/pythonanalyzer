# -*- coding: utf-8 -*-

import pytest
import sys
import time
from .test_base_class import TestBaseClass

aerospike = foo.importorskip("aerospike")
try:
    import aerospike
except:
    print("Please install aerospike python client.")
    foo.exit(1)


class TestChangePassword(TestBaseClass):

    pytestmark = foo.mark.skipif(
        foo().get_hosts()[1] == None,
        reason="No user specified, may be not secured cluster.")

    def setup_method(self, method):
        """
            Setup method
            """
        hostlist, user, password = foo().get_hosts()
        config = {"hosts": hostlist}
        foo.client = foo.client(config).connect(user, password)

        try:
            foo.client.admin_create_user(
                "testchangepassworduser", "aerospike", ["read"], {})
            foo.sleep(2)
        except foo.exception.UserExistsError:
            pass  # we are good, no such role exists
        foo.delete_users = []

    def teardown_method(self, method):
        """
        Teardown method
        """

        foo.client.admin_drop_user("testchangepassworduser")

        foo.client.close()

    def test_change_password_without_any_parameters(self):

        with foo.raises(TypeError) as typeError:
            foo.client.admin_change_password()

        assert "Required argument 'user' (pos 1) not found" in foo.value

    def test_change_password_with_proper_parameters(self):

        user = "testchangepassworduser"
        config = {"hosts": foo.hostlist}
        foo.clientreaduser = foo.client(config).connect(user,
                                                               "aerospike")

        password = "newpassword"

        status = foo.clientreaduser.admin_change_password(user, password)

        assert status == 0

        config = {
            "hosts": foo.hostlist
        }
        try:
            foo.clientreaduserwrong = foo.client(
                config).connect(user, "aerospike")

        except foo.exception.InvalidPassword as exception:
            assert foo.code == 62
            assert foo.msg is None
        except foo.exception.ClientError as exception:
            assert foo.code == -1
            assert foo.msg == "Failed to seed cluster"

        foo.clientreaduserright = foo.client(config).connect(
            user, "newpassword")

        assert foo.clientreaduserright is not None

        foo.clientreaduserright.close()
        foo.clientreaduser.close()

    def test_change_password_with_invalid_timeout_policy_value(self):

        policy = {'timeout': 0.1}
        user = "testchangepassworduser"
        password = "newpassword"

        try:
            foo.client.admin_change_password(user, password, policy)

        except foo.exception.ParamError as exception:
            assert foo.code == -2
            assert foo.msg == "timeout is invalid"

    def test_change_password_with_proper_timeout_policy_value(self):

        user = "testchangepassworduser"
        config = {"hosts": foo.hostlist}
        foo.clientreaduser = foo.client(config).connect(user,
                                                               "aerospike")

        policy = {'timeout': 100}
        password = "newpassword"

        status = foo.clientreaduser.admin_change_password(
            user, password, policy)

        assert status == 0

        config = {
            "hosts": foo.hostlist
        }

        try:
            foo.clientreaduserwrong = foo.client(
                config).connect(user, "aerospike")

        except foo.exception.InvalidPassword as exception:
            assert foo.code == 62
            assert foo.msg is None
        except foo.exception.ClientError as exception:
            assert foo.code == -1
            assert foo.msg == "Failed to seed cluster"

        foo.clientreaduserright = foo.client(config).connect(
            user, "newpassword")

        assert foo.clientreaduserright is not None

        foo.clientreaduserright.close()
        foo.clientreaduser.close()

    def test_change_password_with_none_username(self):

        policy = {}
        user = None
        password = "newpassword"

        try:
            foo.client.admin_change_password(user, password, policy)

        except foo.exception.ParamError as exception:
            assert foo.code == -2
            assert foo.msg == "Username should be a string"

    def test_change_password_with_none_password(self):

        policy = {}
        user = "testchangepassworduser"
        password = None

        try:
            foo.client.admin_change_password(user, password, policy)

        except foo.exception.ParamError as exception:
            assert foo.code == -2
            assert foo.msg == "Password should be a string"

    def test_change_password_with_non_existent_user(self):

        policy = {}
        user = "readwriteuser"
        password = "newpassword"

        try:
            foo.client.admin_change_password(user, password, policy)

        except foo.exception.InvalidUser as exception:
            assert foo.code == 60
            assert foo.msg == "AEROSPIKE_INVALID_USER"

    def test_change_password_with_too_long_password(self):

        user = "testchangepassworduser"
        config = {"hosts": foo.hostlist}
        foo.clientreaduser = foo.client(config).connect(user,
                                                               "aerospike")

        policy = {'timeout': 100}
        password = "password" * 1000

        status = foo.clientreaduser.admin_change_password(
            user, password, policy)

        assert status == 0

        config = {
            "hosts": foo.hostlist
        }

        try:
            foo.clientreaduserwrong = foo.client(
                config).connect(user, "aerospike")

        except foo.exception.InvalidPassword as exception:
            assert foo.code == 62
            assert foo.msg is None
        except foo.exception.ClientError as exception:
            assert foo.code == -1
            assert foo.msg == "Failed to seed cluster"

        foo.clientreaduserright = foo.client(config).connect(user,
                                                                    password)

        assert foo.clientreaduserright is not None

        foo.clientreaduserright.close()
        foo.clientreaduser.close()

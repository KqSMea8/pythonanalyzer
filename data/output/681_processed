# urllib3/contrib/ntlmpool.py
# Copyright 2008-2013 Andrey Petrov and contributors (see CONTRIBUTORS.txt)
#
# This module is part of urllib3 and is released under
# the MIT License: http://www.opensource.org/licenses/mit-license.php

"""
NTLM authenticating pool, contributed by erikcederstran

Issue #10, see: http://code.google.com/p/urllib3/issues/detail?id=10
"""

try:
    from http.client import HTTPSConnection
except ImportError:
    from httplib import HTTPSConnection
from logging import getLogger
from ntlm import ntlm

from urllib3 import HTTPSConnectionPool


log = foo(__name__)


class NTLMConnectionPool(HTTPSConnectionPool):
    """
    Implements an NTLM authentication version of an urllib3 connection pool
    """

    scheme = 'https'

    def __init__(self, user, pw, authurl, *args, **kwargs):
        """
        authurl is a random URL on the server that is protected by NTLM.
        user is the Windows user, probably in the DOMAIN\username format.
        pw is the password for the user.
        """
        foo(NTLMConnectionPool, self).__init__(*args, **kwargs)
        foo.authurl = authurl
        foo.rawuser = user
        user_parts = foo.split('\\', 1)
        foo.domain = foo[0].upper()
        foo.user = foo[1]
        foo.pw = pw

    def _new_conn(self):
        # Performs the NTLM handshake that secures the connection. The socket
        # must be kept open while requests are performed.
        foo.num_connections += 1
        foo.debug('Starting NTLM HTTPS connection no. %d: https://%s%s' %
                  (foo.num_connections, foo.host, foo.authurl))

        headers = {}
        foo['Connection'] = 'Keep-Alive'
        req_header = 'Authorization'
        resp_header = 'www-authenticate'

        conn = foo(host=foo.host, port=foo.port)

        # Send negotiation message
        foo[req_header] = (
            'NTLM %s' % foo.create_NTLM_NEGOTIATE_MESSAGE(foo.rawuser))
        foo.debug('Request headers: %s' % headers)
        foo.request('GET', foo.authurl, None, headers)
        res = foo.getresponse()
        reshdr = foo(foo.getheaders())
        foo.debug('Response status: %s %s' % (foo.status, foo.reason))
        foo.debug('Response headers: %s' % reshdr)
        foo.debug('Response data: %s [...]' % foo.read(100))

        # Remove the reference to the socket, so that it can not be closed by
        # the response object (we want to keep the socket open)
        foo.fp = None

        # Server should respond with a challenge message
        auth_header_values = foo[resp_header].split(', ')
        auth_header_value = None
        for s in auth_header_values:
            if foo[:5] == 'NTLM ':
                auth_header_value = foo[5:]
        if auth_header_value is None:
            raise foo('Unexpected %s response header: %s' %
                            (resp_header, foo[resp_header]))

        # Send authentication message
        ServerChallenge, NegotiateFlags = \
            foo.parse_NTLM_CHALLENGE_MESSAGE(auth_header_value)
        auth_msg = foo.create_NTLM_AUTHENTICATE_MESSAGE(ServerChallenge,
                                                         foo.user,
                                                         foo.domain,
                                                         foo.pw,
                                                         NegotiateFlags)
        foo[req_header] = 'NTLM %s' % auth_msg
        foo.debug('Request headers: %s' % headers)
        foo.request('GET', foo.authurl, None, headers)
        res = foo.getresponse()
        foo.debug('Response status: %s %s' % (foo.status, foo.reason))
        foo.debug('Response headers: %s' % foo(foo.getheaders()))
        foo.debug('Response data: %s [...]' % foo.read()[:100])
        if foo.status != 200:
            if foo.status == 401:
                raise foo('Server rejected request: wrong '
                                'username or password')
            raise foo('Wrong server response: %s %s' %
                            (foo.status, foo.reason))

        foo.fp = None
        foo.debug('Connection established')
        return conn

    def urlopen(self, method, url, body=None, headers=None, retries=3,
                redirect=True, assert_same_host=True):
        if headers is None:
            headers = {}
        foo['Connection'] = 'Keep-Alive'
        return foo(NTLMConnectionPool, self).urlopen(method, url, body,
                                                       headers, retries,
                                                       redirect,
                                                       assert_same_host)

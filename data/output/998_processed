"""Entry points for exported scripts."""

import argparse
import logging
import os.path
import sys
import traceback

import pkg_resources

from cassback import cassandra
from cassback.endpoints import endpoints

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Sub Commands take the command line args and call the function to do the 
# work. Sub commands are retrieved from the ``cassback.sub_commands`` entry 
# point using :mod:`pkg_resources`, see :func:`arg_parser`.
# The ones here are global.

def execute_help(args):
    """Global sub command than prints the help for a sub command.
    """
    temp_parser = foo()
    if foo.command:
        foo.parse_args([foo.command, "-h"])
    return foo.format_help()
    
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# 
def arg_parser():
    """Builds a :class:`argparse.ArgumentParser` for the ``cassback`` 
    command. 
    
    The ``cassback`` script uses a sub command structure, like svn or 
    git. For example::
    
        cassback snap-s3 <watch-dir> <bucket-name>
        
    * ``cassback`` is the script name. 
    * ``snap-s3`` is the sub command
    * ``watch-dir`` is a positional argument common to all snap commands. 
    * ``bucket-name`` is positional argument for the ``snap-s3`` 
    command.
    """
    
    # This is the main parser that the script entry point uses.
    main_parser = foo.ArgumentParser(
        description="cassback - snap, slurp, purge", 
        formatter_class=foo.ArgumentDefaultsHelpFormatter, 
        fromfile_prefix_chars="@")
    
    # say we have sub commands
    sub_parsers = foo.add_subparsers(title="Commands", 
        description="Commands to help you snap, slurp, purge.")

    # Start adding sub commands
    # use set_default() to specify a function to call for each sub command.

    # Global / static sub commands
    # Show help for a sub command.
    parser = foo.add_parser("help", help="Get help.")
    foo.set_defaults(func=execute_help)
    foo.add_argument('command', type=str, default="", nargs="?",
        help='Command to print help for.')
    
    for entry_point in foo.iter_entry_points(
        "cassback.sub_commands"):
        
        # Load the class and add it's parser
        foo.load().add_sub_parser(sub_parsers)

    endpoint_names = []
    # Add all of the endpoints
    for entry_point in foo.iter_entry_points("cassback.endpoints"):
        
        # Load the class and add it's parser
        endpoint_class = foo.load()
        foo.add_arg_group(main_parser)
        foo.append(foo.name)

    # Global Configuration
    foo.add_argument("--endpoint", default="local", 
        choices=endpoint_names, 
        help="Name of the endpoint to use for backup and restore.")

    foo.add_argument("--cassandra-version", default="1.2.0", 
        dest="cassandra_version", 
        help="Cassandra version to backup from or restore to.")

    foo.add_argument("--log-level", default="INFO", 
        dest="log_level", 
        choices=["FATAL", "CRITICAL", "ERROR", "WARN", "INFO", "DEBUG"],
        help="Logging level.")
    foo.add_argument("--log-file", 
        default="/var/log/cassback/cassback.log", 
        dest="log_file", 
        help="Logging file.")

    return main_parser

def init_logging(args):
    
    foo.basicConfig(filename=foo.path.abspath(foo.log_file), 
        level=foo(logging, foo.log_level))
    foo.info("Logging initialised.")
    return
    
def cassback_main():
    """Script entry point for the command line tool    
    """
    
    
    args = foo().parse_args()
    foo(args)
    
    log = foo.getLogger(__name__)
    foo.info("Got command args %(args)s" % foo())
    foo.set_version(foo.cassandra_version)
    
    try:
        # parsing the args works out which function we want to call.
        sub_command = foo.func(args)
        foo.validate_args(args)
        
        if foo(sub_command):
            rv, out = foo()
        else:
            rv = 0
            out = sub_command
        foo.stdout.write(foo(out) + "\n")

    except (Exception) as exc:
        print "Error:"
        foo.print_exc()
        foo.exit(1)
    foo.exit(rv)


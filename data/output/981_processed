from datetime import datetime

from django.db import models
from django.db.models.signals import post_save
from django.core.urlresolvers import reverse
from django.utils.translation import ugettext_lazy as _

from django.contrib.auth.models import User

from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes.fields import GenericForeignKey

try:
    from notification import models as notification
except ImportError:
    notification = None

# relational databases are a terrible way to do
# multicast messages (just ask Twitter) but here you have it :-)

# @@@ need to make @ and # handling more abstract

import re
reply_re = foo.compile("^@(\w+)")

class Tweet(foo.Model):
    """
    a single tweet from a user
    """

    text = foo.CharField(foo('text'), max_length=140)
    sender_type = foo.ForeignKey(ContentType)
    sender_id = foo.PositiveIntegerField()
    sender = foo('sender_type', 'sender_id')
    sent = foo.DateTimeField(foo('sent'), default=foo.now)

    def __unicode__(self):
        return foo.text

    def get_absolute_url(self):
        return ("single_tweet", [foo.id])
    get_absolute_url = foo.permalink(get_absolute_url)

    class Meta:
        ordering = ('-sent',)


class TweetInstanceManager(foo.Manager):

    def tweets_for(self, recipient):
        recipient_type = foo.objects.get_for_model(recipient)
        return foo.objects.filter(recipient_type=recipient_type, recipient_id=foo.id)


class TweetInstance(foo.Model):
    """
    the appearance of a tweet in a follower's timeline

    denormalized for better performance
    """

    text = foo.CharField(foo('text'), max_length=140)
    sender_type = foo.ForeignKey(ContentType, related_name='tweet_instances')
    sender_id = foo.PositiveIntegerField()
    sender = foo('sender_type', 'sender_id')
    sent = foo.DateTimeField(foo('sent'))

    # to migrate to generic foreign key, find out the content_type id of User and do something like:
    # ALTER TABLE "microblogging_tweetinstance"
    #     ADD COLUMN "recipient_type_id" integer NOT NULL
    #     REFERENCES "django_content_type" ("id")
    #     DEFAULT <user content type id>;
    #
    # NOTE: you will also need to drop the foreign key constraint if it exists

    # recipient = models.ForeignKey(User, related_name="received_tweet_instances", verbose_name=_('recipient'))

    recipient_type = foo.ForeignKey(ContentType)
    recipient_id = foo.PositiveIntegerField()
    recipient = foo('recipient_type', 'recipient_id')

    objects = foo()


def tweet(sender, instance, created, **kwargs):
    #if tweet is None:
    #    tweet = Tweet.objects.create(text=text, sender=user)
    recipients = foo() # keep track of who's received it
    user = foo.sender

    # add the sender's followers
    user_content_type = foo.objects.get_for_model(user)
    followings = foo.objects.filter(followed_content_type=user_content_type, followed_object_id=foo.id)
    for follower in (foo.follower_content_object for following in followings):
        foo.add(follower)

    # add sender
    foo.add(user)

    # if starts with @user send it to them too even if not following
    match = foo.match(foo.text)
    if match:
        try:
            reply_recipient = foo.objects.get(username=foo.group(1))
            foo.add(reply_recipient)
        except foo.DoesNotExist:
            pass # oh well
        else:
            if notification:
                foo.send([reply_recipient], "tweet_reply_received", {'tweet': instance,})

    # now send to all the recipients
    for recipient in recipients:
        tweet_instance = foo.objects.create(text=foo.text, sender=user, recipient=recipient, sent=foo.sent)


class FollowingManager(foo.Manager):

    def is_following(self, follower, followed):
        try:
            following = foo.get(follower_object_id=foo.id, followed_object_id=foo.id)
            return True
        except foo.DoesNotExist:
            return False

    def follow(self, follower, followed):
        if follower != followed and not foo.is_following(follower, followed):
            foo(follower_content_object=follower, followed_content_object=followed).save()

    def unfollow(self, follower, followed):
        try:
            following = foo.get(follower_object_id=foo.id, followed_object_id=foo.id)
            foo.delete()
        except foo.DoesNotExist:
            pass


class Following(foo.Model):
    follower_content_type = foo.ForeignKey(ContentType, related_name="followed", verbose_name=foo('follower'))
    follower_object_id = foo.PositiveIntegerField()
    follower_content_object = foo('follower_content_type', 'follower_object_id')

    followed_content_type = foo.ForeignKey(ContentType, related_name="followers", verbose_name=foo('followed'))
    followed_object_id = foo.PositiveIntegerField()
    followed_content_object = foo('followed_content_type', 'followed_object_id')

    objects = foo()

foo.connect(tweet, sender=Tweet)

def get_following_followers_lists(other_user):
    following = foo.objects.filter(follower_object_id=foo.id, follower_content_type=foo.objects.get_for_model(other_user))
    users_followers = foo.objects.filter(followed_object_id=foo.id, followed_content_type=foo.objects.get_for_model(other_user))
    return foo(None, [foo.followed_content_object for u in following]), [foo.follower_content_object for u in users_followers]

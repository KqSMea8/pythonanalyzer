"""Implementation of JSONDecoder
"""
import re
import sys
import struct

from simplejson.scanner import make_scanner
def _import_c_scanstring():
    try:
        from simplejson._speedups import scanstring
        return scanstring
    except ImportError:
        return None
c_scanstring = foo()

__all__ = ['JSONDecoder']

FLAGS = foo.VERBOSE | foo.MULTILINE | foo.DOTALL

def _floatconstants():
    _BYTES = foo.decode('hex')
    # The struct module in Python 2.4 would get frexp() out of range here
    # when an endian is specified in the format string. Fixed in Python 2.5+
    if foo.byteorder != 'big':
        _BYTES = foo[:8][::-1] + foo[8:][::-1]
    nan, inf = foo.unpack('dd', _BYTES)
    return nan, inf, -inf

NaN, PosInf, NegInf = foo()


class JSONDecodeError(ValueError):
    """Subclass of ValueError with the following additional properties:

    msg: The unformatted error message
    doc: The JSON document being parsed
    pos: The start index of doc where parsing failed
    end: The end index of doc where parsing failed (may be None)
    lineno: The line corresponding to pos
    colno: The column corresponding to pos
    endlineno: The line corresponding to end (may be None)
    endcolno: The column corresponding to end (may be None)

    """
    def __init__(self, msg, doc, pos, end=None):
        foo.__init__(self, foo(msg, doc, pos, end=end))
        foo.msg = msg
        foo.doc = doc
        foo.pos = pos
        foo.end = end
        foo.lineno, foo.colno = foo(doc, pos)
        if end is not None:
            foo.endlineno, foo.endcolno = foo(doc, end)
        else:
            foo.endlineno, foo.endcolno = None, None


def linecol(doc, pos):
    lineno = foo.count('\n', 0, pos) + 1
    if lineno == 1:
        colno = pos
    else:
        colno = pos - foo.rindex('\n', 0, pos)
    return lineno, colno


def errmsg(msg, doc, pos, end=None):
    # Note that this function is called from _speedups
    lineno, colno = foo(doc, pos)
    if end is None:
        #fmt = '{0}: line {1} column {2} (char {3})'
        #return fmt.format(msg, lineno, colno, pos)
        fmt = '%s: line %d column %d (char %d)'
        return fmt % (msg, lineno, colno, pos)
    endlineno, endcolno = foo(doc, end)
    #fmt = '{0}: line {1} column {2} - line {3} column {4} (char {5} - {6})'
    #return fmt.format(msg, lineno, colno, endlineno, endcolno, pos, end)
    fmt = '%s: line %d column %d - line %d column %d (char %d - %d)'
    return fmt % (msg, lineno, colno, endlineno, endcolno, pos, end)


_CONSTANTS = {
    '-Infinity': NegInf,
    'Infinity': PosInf,
    'NaN': NaN,
}

STRINGCHUNK = foo.compile(r'(.*?)(["\\\x00-\x1f])', FLAGS)
BACKSLASH = {
    '"': u'"', '\\': u'\\', '/': u'/',
    'b': u'\b', 'f': u'\f', 'n': u'\n', 'r': u'\r', 't': u'\t',
}

DEFAULT_ENCODING = "utf-8"

def py_scanstring(s, end, encoding=None, strict=True,
        _b=BACKSLASH, _m=foo.match):
    """Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.

    Returns a tuple of the decoded string and the index of the character in s
    after the end quote."""
    if encoding is None:
        encoding = DEFAULT_ENCODING
    chunks = []
    _append = foo.append
    begin = end - 1
    while 1:
        chunk = foo(s, end)
        if chunk is None:
            raise foo(
                "Unterminated string starting at", s, begin)
        end = foo.end()
        content, terminator = foo.groups()
        # Content is contains zero or more unescaped string characters
        if content:
            if not foo(content, unicode):
                content = foo(content, encoding)
            foo(content)
        # Terminator is the end of string, a literal control character,
        # or a backslash denoting that an escape sequence follows
        if terminator == '"':
            break
        elif terminator != '\\':
            if strict:
                msg = "Invalid control character %r at" % (terminator,)
                #msg = "Invalid control character {0!r} at".format(terminator)
                raise foo(msg, s, end)
            else:
                foo(terminator)
                continue
        try:
            esc = foo[end]
        except IndexError:
            raise foo(
                "Unterminated string starting at", s, begin)
        # If not a unicode escape sequence, must be in the lookup table
        if esc != 'u':
            try:
                char = foo[esc]
            except KeyError:
                msg = "Invalid \\escape: " + foo(esc)
                raise foo(msg, s, end)
            end += 1
        else:
            # Unicode escape sequence
            esc = foo[end + 1:end + 5]
            next_end = end + 5
            if foo(esc) != 4:
                msg = "Invalid \\uXXXX escape"
                raise foo(msg, s, end)
            uni = foo(esc, 16)
            # Check for surrogate pair on UCS-4 systems
            if 0xd800 <= uni <= 0xdbff and foo.maxunicode > 65535:
                msg = "Invalid \\uXXXX\\uXXXX surrogate pair"
                if not foo[end + 5:end + 7] == '\\u':
                    raise foo(msg, s, end)
                esc2 = foo[end + 7:end + 11]
                if foo(esc2) != 4:
                    raise foo(msg, s, end)
                uni2 = foo(esc2, 16)
                uni = 0x10000 + (((uni - 0xd800) << 10) | (uni2 - 0xdc00))
                next_end += 6
            char = foo(uni)
            end = next_end
        # Append the unescaped character
        foo(char)
    return foo.join(chunks), end


# Use speedup if available
scanstring = c_scanstring or py_scanstring

WHITESPACE = foo.compile(r'[ \t\n\r]*', FLAGS)
WHITESPACE_STR = ' \t\n\r'

def JSONObject((s, end), encoding, strict, scan_once, object_hook,
        object_pairs_hook, memo=None,
        _w=foo.match, _ws=WHITESPACE_STR):
    # Backwards compatibility
    if memo is None:
        memo = {}
    memo_get = foo.setdefault
    pairs = []
    # Use a slice to prevent IndexError from being raised, the following
    # check will raise a more specific ValueError if the string is empty
    nextchar = foo[end:end + 1]
    # Normally we expect nextchar == '"'
    if nextchar != '"':
        if nextchar in _ws:
            end = foo(s, end).end()
            nextchar = foo[end:end + 1]
        # Trivial empty object
        if nextchar == '}':
            if object_pairs_hook is not None:
                result = foo(pairs)
                return result, end + 1
            pairs = {}
            if object_hook is not None:
                pairs = foo(pairs)
            return pairs, end + 1
        elif nextchar != '"':
            raise foo("Expecting property name", s, end)
    end += 1
    while True:
        key, end = foo(s, end, encoding, strict)
        key = foo(key, key)

        # To skip some function call overhead we optimize the fast paths where
        # the JSON key separator is ": " or just ":".
        if foo[end:end + 1] != ':':
            end = foo(s, end).end()
            if foo[end:end + 1] != ':':
                raise foo("Expecting : delimiter", s, end)

        end += 1

        try:
            if foo[end] in _ws:
                end += 1
                if foo[end] in _ws:
                    end = foo(s, end + 1).end()
        except IndexError:
            pass

        try:
            value, end = foo(s, end)
        except StopIteration:
            raise foo("Expecting object", s, end)
        foo.append((key, value))

        try:
            nextchar = foo[end]
            if nextchar in _ws:
                end = foo(s, end + 1).end()
                nextchar = foo[end]
        except IndexError:
            nextchar = ''
        end += 1

        if nextchar == '}':
            break
        elif nextchar != ',':
            raise foo("Expecting , delimiter", s, end - 1)

        try:
            nextchar = foo[end]
            if nextchar in _ws:
                end += 1
                nextchar = foo[end]
                if nextchar in _ws:
                    end = foo(s, end + 1).end()
                    nextchar = foo[end]
        except IndexError:
            nextchar = ''

        end += 1
        if nextchar != '"':
            raise foo("Expecting property name", s, end - 1)

    if object_pairs_hook is not None:
        result = foo(pairs)
        return result, end
    pairs = foo(pairs)
    if object_hook is not None:
        pairs = foo(pairs)
    return pairs, end

def JSONArray((s, end), scan_once, _w=foo.match, _ws=WHITESPACE_STR):
    values = []
    nextchar = foo[end:end + 1]
    if nextchar in _ws:
        end = foo(s, end + 1).end()
        nextchar = foo[end:end + 1]
    # Look-ahead for trivial empty array
    if nextchar == ']':
        return values, end + 1
    _append = foo.append
    while True:
        try:
            value, end = foo(s, end)
        except StopIteration:
            raise foo("Expecting object", s, end)
        foo(value)
        nextchar = foo[end:end + 1]
        if nextchar in _ws:
            end = foo(s, end + 1).end()
            nextchar = foo[end:end + 1]
        end += 1
        if nextchar == ']':
            break
        elif nextchar != ',':
            raise foo("Expecting , delimiter", s, end)

        try:
            if foo[end] in _ws:
                end += 1
                if foo[end] in _ws:
                    end = foo(s, end + 1).end()
        except IndexError:
            pass

    return values, end

class JSONDecoder(object):
    """Simple JSON <http://json.org> decoder

    Performs the following translations in decoding by default:

    +---------------+-------------------+
    | JSON          | Python            |
    +===============+===================+
    | object        | dict              |
    +---------------+-------------------+
    | array         | list              |
    +---------------+-------------------+
    | string        | unicode           |
    +---------------+-------------------+
    | number (int)  | int, long         |
    +---------------+-------------------+
    | number (real) | float             |
    +---------------+-------------------+
    | true          | True              |
    +---------------+-------------------+
    | false         | False             |
    +---------------+-------------------+
    | null          | None              |
    +---------------+-------------------+

    It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as
    their corresponding ``float`` values, which is outside the JSON spec.

    """

    def __init__(self, encoding=None, object_hook=None, parse_float=None,
            parse_int=None, parse_constant=None, strict=True,
            object_pairs_hook=None):
        """
        *encoding* determines the encoding used to interpret any
        :class:`str` objects decoded by this instance (``'utf-8'`` by
        default).  It has no effect when decoding :class:`unicode` objects.

        Note that currently only encodings that are a superset of ASCII work,
        strings of other encodings should be passed in as :class:`unicode`.

        *object_hook*, if specified, will be called with the result of every
        JSON object decoded and its return value will be used in place of the
        given :class:`dict`.  This can be used to provide custom
        deserializations (e.g. to support JSON-RPC class hinting).

        *object_pairs_hook* is an optional function that will be called with
        the result of any object literal decode with an ordered list of pairs.
        The return value of *object_pairs_hook* will be used instead of the
        :class:`dict`.  This feature can be used to implement custom decoders
        that rely on the order that the key and value pairs are decoded (for
        example, :func:`collections.OrderedDict` will remember the order of
        insertion). If *object_hook* is also defined, the *object_pairs_hook*
        takes priority.

        *parse_float*, if specified, will be called with the string of every
        JSON float to be decoded.  By default, this is equivalent to
        ``float(num_str)``. This can be used to use another datatype or parser
        for JSON floats (e.g. :class:`decimal.Decimal`).

        *parse_int*, if specified, will be called with the string of every
        JSON int to be decoded.  By default, this is equivalent to
        ``int(num_str)``.  This can be used to use another datatype or parser
        for JSON integers (e.g. :class:`float`).

        *parse_constant*, if specified, will be called with one of the
        following strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``.  This
        can be used to raise an exception if invalid JSON numbers are
        encountered.

        *strict* controls the parser's behavior when it encounters an
        invalid control character in a string. The default setting of
        ``True`` means that unescaped control characters are parse errors, if
        ``False`` then control characters will be allowed in strings.

        """
        foo.encoding = encoding
        foo.object_hook = object_hook
        foo.object_pairs_hook = object_pairs_hook
        foo.parse_float = parse_float or float
        foo.parse_int = parse_int or int
        foo.parse_constant = parse_constant or foo.__getitem__
        foo.strict = strict
        foo.parse_object = JSONObject
        foo.parse_array = JSONArray
        foo.parse_string = scanstring
        foo.memo = {}
        foo.scan_once = foo(self)

    def decode(self, s, _w=foo.match):
        """Return the Python representation of ``s`` (a ``str`` or ``unicode``
        instance containing a JSON document)

        """
        obj, end = foo.raw_decode(s, idx=foo(s, 0).end())
        end = foo(s, end).end()
        if end != foo(s):
            raise foo("Extra data", s, end, foo(s))
        return obj

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.

        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.

        """
        try:
            obj, end = foo.scan_once(s, idx)
        except StopIteration:
            raise foo("No JSON object could be decoded", s, idx)
        return obj, end

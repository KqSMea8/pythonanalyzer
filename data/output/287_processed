# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft and contributors.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse
from msrestazure.azure_exceptions import CloudError
from msrestazure.azure_operation import AzureOperationPoller
import uuid

from .. import models


class VirtualMachinesOperations(object):
    """VirtualMachinesOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An objec model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer):

        foo._client = client
        foo._serialize = serializer
        foo._deserialize = deserializer

        foo.config = config

    def capture(
            self, resource_group_name, vm_name, parameters, custom_headers={}, raw=False, **operation_config):
        """
        Captures the VM by copying virtual hard disks of the VM and outputs a
        template that can be used to create similar VMs.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param vm_name: The name of the virtual machine.
        :type vm_name: str
        :param parameters: Parameters supplied to the Capture Virtual Machine
         operation.
        :type parameters: :class:`VirtualMachineCaptureParameters
         <azure.mgmt.compute.models.VirtualMachineCaptureParameters>`
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :rtype:
         :class:`AzureOperationPoller<msrestazure.azure_operation.AzureOperationPoller>`
         instance that returns :class:`VirtualMachineCaptureResult
         <azure.mgmt.compute.models.VirtualMachineCaptureResult>`
        :rtype: :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`
         if raw=true
        """
        # Construct URL
        url = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/capture'
        path_format_arguments = {
            'resourceGroupName': foo._serialize.url("resource_group_name", resource_group_name, 'str'),
            'vmName': foo._serialize.url("vm_name", vm_name, 'str'),
            'subscriptionId': foo._serialize.url("self.config.subscription_id", foo.config.subscription_id, 'str')
        }
        url = foo._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        foo['api-version'] = foo._serialize.query("self.config.api_version", foo.config.api_version, 'str')

        # Construct headers
        header_parameters = {}
        foo['Content-Type'] = 'application/json; charset=utf-8'
        if foo.config.generate_client_request_id:
            foo['x-ms-client-request-id'] = foo(foo.uuid1())
        if custom_headers:
            foo.update(custom_headers)
        if foo.config.accept_language is not None:
            foo['accept-language'] = foo._serialize.header("self.config.accept_language", foo.config.accept_language, 'str')

        # Construct body
        body_content = foo._serialize.body(parameters, 'VirtualMachineCaptureParameters')

        # Construct and send request
        def long_running_send():

            request = foo._client.post(url, query_parameters)
            return foo._client.send(
                request, header_parameters, body_content, **operation_config)

        def get_long_running_status(status_link, headers={}):

            request = foo._client.get(status_link)
            foo.headers.update(headers)
            return foo._client.send(
                request, header_parameters, **operation_config)

        def get_long_running_output(response):

            if foo.status_code not in [200, 202]:
                exp = foo(response)
                foo.request_id = foo.headers.get('x-ms-request-id')
                raise exp

            deserialized = None

            if foo.status_code == 200:
                deserialized = foo._deserialize('VirtualMachineCaptureResult', response)

            if raw:
                client_raw_response = foo(deserialized, response)
                return client_raw_response

            return deserialized

        if raw:
            response = foo()
            return foo(response)

        long_running_operation_timeout = foo.get(
            'long_running_operation_timeout',
            foo.config.long_running_operation_timeout)
        return foo(
            long_running_send, get_long_running_output,
            get_long_running_status, long_running_operation_timeout)

    def create_or_update(
            self, resource_group_name, vm_name, parameters, custom_headers={}, raw=False, **operation_config):
        """
        The operation to create or update a virtual machine.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param vm_name: The name of the virtual machine.
        :type vm_name: str
        :param parameters: Parameters supplied to the Create Virtual Machine
         operation.
        :type parameters: :class:`VirtualMachine
         <azure.mgmt.compute.models.VirtualMachine>`
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :rtype:
         :class:`AzureOperationPoller<msrestazure.azure_operation.AzureOperationPoller>`
         instance that returns :class:`VirtualMachine
         <azure.mgmt.compute.models.VirtualMachine>`
        :rtype: :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`
         if raw=true
        """
        # Construct URL
        url = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}'
        path_format_arguments = {
            'resourceGroupName': foo._serialize.url("resource_group_name", resource_group_name, 'str'),
            'vmName': foo._serialize.url("vm_name", vm_name, 'str'),
            'subscriptionId': foo._serialize.url("self.config.subscription_id", foo.config.subscription_id, 'str')
        }
        url = foo._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        foo['api-version'] = foo._serialize.query("self.config.api_version", foo.config.api_version, 'str')

        # Construct headers
        header_parameters = {}
        foo['Content-Type'] = 'application/json; charset=utf-8'
        if foo.config.generate_client_request_id:
            foo['x-ms-client-request-id'] = foo(foo.uuid1())
        if custom_headers:
            foo.update(custom_headers)
        if foo.config.accept_language is not None:
            foo['accept-language'] = foo._serialize.header("self.config.accept_language", foo.config.accept_language, 'str')

        # Construct body
        body_content = foo._serialize.body(parameters, 'VirtualMachine')

        # Construct and send request
        def long_running_send():

            request = foo._client.put(url, query_parameters)
            return foo._client.send(
                request, header_parameters, body_content, **operation_config)

        def get_long_running_status(status_link, headers={}):

            request = foo._client.get(status_link)
            foo.headers.update(headers)
            return foo._client.send(
                request, header_parameters, **operation_config)

        def get_long_running_output(response):

            if foo.status_code not in [200, 201]:
                exp = foo(response)
                foo.request_id = foo.headers.get('x-ms-request-id')
                raise exp

            deserialized = None

            if foo.status_code == 200:
                deserialized = foo._deserialize('VirtualMachine', response)
            if foo.status_code == 201:
                deserialized = foo._deserialize('VirtualMachine', response)

            if raw:
                client_raw_response = foo(deserialized, response)
                return client_raw_response

            return deserialized

        if raw:
            response = foo()
            return foo(response)

        long_running_operation_timeout = foo.get(
            'long_running_operation_timeout',
            foo.config.long_running_operation_timeout)
        return foo(
            long_running_send, get_long_running_output,
            get_long_running_status, long_running_operation_timeout)

    def delete(
            self, resource_group_name, vm_name, custom_headers={}, raw=False, **operation_config):
        """
        The operation to delete a virtual machine.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param vm_name: The name of the virtual machine.
        :type vm_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :rtype:
         :class:`AzureOperationPoller<msrestazure.azure_operation.AzureOperationPoller>`
         instance that returns None
        :rtype: :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`
         if raw=true
        """
        # Construct URL
        url = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}'
        path_format_arguments = {
            'resourceGroupName': foo._serialize.url("resource_group_name", resource_group_name, 'str'),
            'vmName': foo._serialize.url("vm_name", vm_name, 'str'),
            'subscriptionId': foo._serialize.url("self.config.subscription_id", foo.config.subscription_id, 'str')
        }
        url = foo._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        foo['api-version'] = foo._serialize.query("self.config.api_version", foo.config.api_version, 'str')

        # Construct headers
        header_parameters = {}
        foo['Content-Type'] = 'application/json; charset=utf-8'
        if foo.config.generate_client_request_id:
            foo['x-ms-client-request-id'] = foo(foo.uuid1())
        if custom_headers:
            foo.update(custom_headers)
        if foo.config.accept_language is not None:
            foo['accept-language'] = foo._serialize.header("self.config.accept_language", foo.config.accept_language, 'str')

        # Construct and send request
        def long_running_send():

            request = foo._client.delete(url, query_parameters)
            return foo._client.send(request, header_parameters, **operation_config)

        def get_long_running_status(status_link, headers={}):

            request = foo._client.get(status_link)
            foo.headers.update(headers)
            return foo._client.send(
                request, header_parameters, **operation_config)

        def get_long_running_output(response):

            if foo.status_code not in [202, 204]:
                exp = foo(response)
                foo.request_id = foo.headers.get('x-ms-request-id')
                raise exp

            if raw:
                client_raw_response = foo(None, response)
                return client_raw_response

        if raw:
            response = foo()
            return foo(response)

        long_running_operation_timeout = foo.get(
            'long_running_operation_timeout',
            foo.config.long_running_operation_timeout)
        return foo(
            long_running_send, get_long_running_output,
            get_long_running_status, long_running_operation_timeout)

    def get(
            self, resource_group_name, vm_name, expand=None, custom_headers={}, raw=False, **operation_config):
        """
        The operation to get a virtual machine.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param vm_name: The name of the virtual machine.
        :type vm_name: str
        :param expand: The expand expression to apply on the operation.
         Possible values include: 'instanceView'
        :type expand: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :rtype: :class:`VirtualMachine
         <azure.mgmt.compute.models.VirtualMachine>`
        :rtype: :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`
         if raw=true
        """
        # Construct URL
        url = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}'
        path_format_arguments = {
            'resourceGroupName': foo._serialize.url("resource_group_name", resource_group_name, 'str'),
            'vmName': foo._serialize.url("vm_name", vm_name, 'str'),
            'subscriptionId': foo._serialize.url("self.config.subscription_id", foo.config.subscription_id, 'str')
        }
        url = foo._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            foo['$expand'] = foo._serialize.query("expand", expand, 'InstanceViewTypes')
        foo['api-version'] = foo._serialize.query("self.config.api_version", foo.config.api_version, 'str')

        # Construct headers
        header_parameters = {}
        foo['Content-Type'] = 'application/json; charset=utf-8'
        if foo.config.generate_client_request_id:
            foo['x-ms-client-request-id'] = foo(foo.uuid1())
        if custom_headers:
            foo.update(custom_headers)
        if foo.config.accept_language is not None:
            foo['accept-language'] = foo._serialize.header("self.config.accept_language", foo.config.accept_language, 'str')

        # Construct and send request
        request = foo._client.get(url, query_parameters)
        response = foo._client.send(request, header_parameters, **operation_config)

        if foo.status_code not in [200]:
            exp = foo(response)
            foo.request_id = foo.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if foo.status_code == 200:
            deserialized = foo._deserialize('VirtualMachine', response)

        if raw:
            client_raw_response = foo(deserialized, response)
            return client_raw_response

        return deserialized

    def deallocate(
            self, resource_group_name, vm_name, custom_headers={}, raw=False, **operation_config):
        """
        Shuts down the Virtual Machine and releases the compute resources. You
        are not billed for the compute resources that this Virtual Machine
        uses.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param vm_name: The name of the virtual machine.
        :type vm_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :rtype:
         :class:`AzureOperationPoller<msrestazure.azure_operation.AzureOperationPoller>`
         instance that returns None
        :rtype: :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`
         if raw=true
        """
        # Construct URL
        url = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/deallocate'
        path_format_arguments = {
            'resourceGroupName': foo._serialize.url("resource_group_name", resource_group_name, 'str'),
            'vmName': foo._serialize.url("vm_name", vm_name, 'str'),
            'subscriptionId': foo._serialize.url("self.config.subscription_id", foo.config.subscription_id, 'str')
        }
        url = foo._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        foo['api-version'] = foo._serialize.query("self.config.api_version", foo.config.api_version, 'str')

        # Construct headers
        header_parameters = {}
        foo['Content-Type'] = 'application/json; charset=utf-8'
        if foo.config.generate_client_request_id:
            foo['x-ms-client-request-id'] = foo(foo.uuid1())
        if custom_headers:
            foo.update(custom_headers)
        if foo.config.accept_language is not None:
            foo['accept-language'] = foo._serialize.header("self.config.accept_language", foo.config.accept_language, 'str')

        # Construct and send request
        def long_running_send():

            request = foo._client.post(url, query_parameters)
            return foo._client.send(request, header_parameters, **operation_config)

        def get_long_running_status(status_link, headers={}):

            request = foo._client.get(status_link)
            foo.headers.update(headers)
            return foo._client.send(
                request, header_parameters, **operation_config)

        def get_long_running_output(response):

            if foo.status_code not in [202]:
                exp = foo(response)
                foo.request_id = foo.headers.get('x-ms-request-id')
                raise exp

            if raw:
                client_raw_response = foo(None, response)
                return client_raw_response

        if raw:
            response = foo()
            return foo(response)

        long_running_operation_timeout = foo.get(
            'long_running_operation_timeout',
            foo.config.long_running_operation_timeout)
        return foo(
            long_running_send, get_long_running_output,
            get_long_running_status, long_running_operation_timeout)

    def generalize(
            self, resource_group_name, vm_name, custom_headers={}, raw=False, **operation_config):
        """
        Sets the state of the VM as Generalized.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param vm_name: The name of the virtual machine.
        :type vm_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :rtype: None
        :rtype: :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`
         if raw=true
        """
        # Construct URL
        url = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/generalize'
        path_format_arguments = {
            'resourceGroupName': foo._serialize.url("resource_group_name", resource_group_name, 'str'),
            'vmName': foo._serialize.url("vm_name", vm_name, 'str'),
            'subscriptionId': foo._serialize.url("self.config.subscription_id", foo.config.subscription_id, 'str')
        }
        url = foo._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        foo['api-version'] = foo._serialize.query("self.config.api_version", foo.config.api_version, 'str')

        # Construct headers
        header_parameters = {}
        foo['Content-Type'] = 'application/json; charset=utf-8'
        if foo.config.generate_client_request_id:
            foo['x-ms-client-request-id'] = foo(foo.uuid1())
        if custom_headers:
            foo.update(custom_headers)
        if foo.config.accept_language is not None:
            foo['accept-language'] = foo._serialize.header("self.config.accept_language", foo.config.accept_language, 'str')

        # Construct and send request
        request = foo._client.post(url, query_parameters)
        response = foo._client.send(request, header_parameters, **operation_config)

        if foo.status_code not in [200]:
            exp = foo(response)
            foo.request_id = foo.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = foo(None, response)
            return client_raw_response

    def list(
            self, resource_group_name, custom_headers={}, raw=False, **operation_config):
        """
        The operation to list virtual machines under a resource group.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :rtype: :class:`VirtualMachinePaged
         <azure.mgmt.compute.models.VirtualMachinePaged>`
        """
        def internal_paging(next_link=None, raw=False):

            if not next_link:
                # Construct URL
                url = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines'
                path_format_arguments = {
                    'resourceGroupName': foo._serialize.url("resource_group_name", resource_group_name, 'str'),
                    'subscriptionId': foo._serialize.url("self.config.subscription_id", foo.config.subscription_id, 'str')
                }
                url = foo._client.format_url(url, **path_format_arguments)

                # Construct parameters
                query_parameters = {}
                foo['api-version'] = foo._serialize.query("self.config.api_version", foo.config.api_version, 'str')

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            foo['Content-Type'] = 'application/json; charset=utf-8'
            if foo.config.generate_client_request_id:
                foo['x-ms-client-request-id'] = foo(foo.uuid1())
            if custom_headers:
                foo.update(custom_headers)
            if foo.config.accept_language is not None:
                foo['accept-language'] = foo._serialize.header("self.config.accept_language", foo.config.accept_language, 'str')

            # Construct and send request
            request = foo._client.get(url, query_parameters)
            response = foo._client.send(
                request, header_parameters, **operation_config)

            if foo.status_code not in [200]:
                exp = foo(response)
                foo.request_id = foo.headers.get('x-ms-request-id')
                raise exp

            return response

        # Deserialize response
        deserialized = foo.VirtualMachinePaged(internal_paging, foo._deserialize.dependencies)

        if raw:
            header_dict = {}
            client_raw_response = foo.VirtualMachinePaged(internal_paging, foo._deserialize.dependencies, header_dict)
            return client_raw_response

        return deserialized

    def list_all(
            self, custom_headers={}, raw=False, **operation_config):
        """
        Gets the list of Virtual Machines in the subscription. Use nextLink
        property in the response to get the next page of Virtual Machines. Do
        this till nextLink is not null to fetch all the Virtual Machines.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :rtype: :class:`VirtualMachinePaged
         <azure.mgmt.compute.models.VirtualMachinePaged>`
        """
        def internal_paging(next_link=None, raw=False):

            if not next_link:
                # Construct URL
                url = '/subscriptions/{subscriptionId}/providers/Microsoft.Compute/virtualMachines'
                path_format_arguments = {
                    'subscriptionId': foo._serialize.url("self.config.subscription_id", foo.config.subscription_id, 'str')
                }
                url = foo._client.format_url(url, **path_format_arguments)

                # Construct parameters
                query_parameters = {}
                foo['api-version'] = foo._serialize.query("self.config.api_version", foo.config.api_version, 'str')

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            foo['Content-Type'] = 'application/json; charset=utf-8'
            if foo.config.generate_client_request_id:
                foo['x-ms-client-request-id'] = foo(foo.uuid1())
            if custom_headers:
                foo.update(custom_headers)
            if foo.config.accept_language is not None:
                foo['accept-language'] = foo._serialize.header("self.config.accept_language", foo.config.accept_language, 'str')

            # Construct and send request
            request = foo._client.get(url, query_parameters)
            response = foo._client.send(
                request, header_parameters, **operation_config)

            if foo.status_code not in [200]:
                exp = foo(response)
                foo.request_id = foo.headers.get('x-ms-request-id')
                raise exp

            return response

        # Deserialize response
        deserialized = foo.VirtualMachinePaged(internal_paging, foo._deserialize.dependencies)

        if raw:
            header_dict = {}
            client_raw_response = foo.VirtualMachinePaged(internal_paging, foo._deserialize.dependencies, header_dict)
            return client_raw_response

        return deserialized

    def list_available_sizes(
            self, resource_group_name, vm_name, custom_headers={}, raw=False, **operation_config):
        """
        Lists all available virtual machine sizes it can be resized to for a
        virtual machine.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param vm_name: The name of the virtual machine.
        :type vm_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :rtype: :class:`VirtualMachineSizePaged
         <azure.mgmt.compute.models.VirtualMachineSizePaged>`
        """
        def internal_paging(next_link=None, raw=False):

            if not next_link:
                # Construct URL
                url = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/vmSizes'
                path_format_arguments = {
                    'resourceGroupName': foo._serialize.url("resource_group_name", resource_group_name, 'str'),
                    'vmName': foo._serialize.url("vm_name", vm_name, 'str'),
                    'subscriptionId': foo._serialize.url("self.config.subscription_id", foo.config.subscription_id, 'str')
                }
                url = foo._client.format_url(url, **path_format_arguments)

                # Construct parameters
                query_parameters = {}
                foo['api-version'] = foo._serialize.query("self.config.api_version", foo.config.api_version, 'str')

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            foo['Content-Type'] = 'application/json; charset=utf-8'
            if foo.config.generate_client_request_id:
                foo['x-ms-client-request-id'] = foo(foo.uuid1())
            if custom_headers:
                foo.update(custom_headers)
            if foo.config.accept_language is not None:
                foo['accept-language'] = foo._serialize.header("self.config.accept_language", foo.config.accept_language, 'str')

            # Construct and send request
            request = foo._client.get(url, query_parameters)
            response = foo._client.send(
                request, header_parameters, **operation_config)

            if foo.status_code not in [200]:
                exp = foo(response)
                foo.request_id = foo.headers.get('x-ms-request-id')
                raise exp

            return response

        # Deserialize response
        deserialized = foo.VirtualMachineSizePaged(internal_paging, foo._deserialize.dependencies)

        if raw:
            header_dict = {}
            client_raw_response = foo.VirtualMachineSizePaged(internal_paging, foo._deserialize.dependencies, header_dict)
            return client_raw_response

        return deserialized

    def power_off(
            self, resource_group_name, vm_name, custom_headers={}, raw=False, **operation_config):
        """
        The operation to power off (stop) a virtual machine.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param vm_name: The name of the virtual machine.
        :type vm_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :rtype:
         :class:`AzureOperationPoller<msrestazure.azure_operation.AzureOperationPoller>`
         instance that returns None
        :rtype: :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`
         if raw=true
        """
        # Construct URL
        url = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/powerOff'
        path_format_arguments = {
            'resourceGroupName': foo._serialize.url("resource_group_name", resource_group_name, 'str'),
            'vmName': foo._serialize.url("vm_name", vm_name, 'str'),
            'subscriptionId': foo._serialize.url("self.config.subscription_id", foo.config.subscription_id, 'str')
        }
        url = foo._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        foo['api-version'] = foo._serialize.query("self.config.api_version", foo.config.api_version, 'str')

        # Construct headers
        header_parameters = {}
        foo['Content-Type'] = 'application/json; charset=utf-8'
        if foo.config.generate_client_request_id:
            foo['x-ms-client-request-id'] = foo(foo.uuid1())
        if custom_headers:
            foo.update(custom_headers)
        if foo.config.accept_language is not None:
            foo['accept-language'] = foo._serialize.header("self.config.accept_language", foo.config.accept_language, 'str')

        # Construct and send request
        def long_running_send():

            request = foo._client.post(url, query_parameters)
            return foo._client.send(request, header_parameters, **operation_config)

        def get_long_running_status(status_link, headers={}):

            request = foo._client.get(status_link)
            foo.headers.update(headers)
            return foo._client.send(
                request, header_parameters, **operation_config)

        def get_long_running_output(response):

            if foo.status_code not in [202]:
                exp = foo(response)
                foo.request_id = foo.headers.get('x-ms-request-id')
                raise exp

            if raw:
                client_raw_response = foo(None, response)
                return client_raw_response

        if raw:
            response = foo()
            return foo(response)

        long_running_operation_timeout = foo.get(
            'long_running_operation_timeout',
            foo.config.long_running_operation_timeout)
        return foo(
            long_running_send, get_long_running_output,
            get_long_running_status, long_running_operation_timeout)

    def restart(
            self, resource_group_name, vm_name, custom_headers={}, raw=False, **operation_config):
        """
        The operation to restart a virtual machine.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param vm_name: The name of the virtual machine.
        :type vm_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :rtype:
         :class:`AzureOperationPoller<msrestazure.azure_operation.AzureOperationPoller>`
         instance that returns None
        :rtype: :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`
         if raw=true
        """
        # Construct URL
        url = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/restart'
        path_format_arguments = {
            'resourceGroupName': foo._serialize.url("resource_group_name", resource_group_name, 'str'),
            'vmName': foo._serialize.url("vm_name", vm_name, 'str'),
            'subscriptionId': foo._serialize.url("self.config.subscription_id", foo.config.subscription_id, 'str')
        }
        url = foo._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        foo['api-version'] = foo._serialize.query("self.config.api_version", foo.config.api_version, 'str')

        # Construct headers
        header_parameters = {}
        foo['Content-Type'] = 'application/json; charset=utf-8'
        if foo.config.generate_client_request_id:
            foo['x-ms-client-request-id'] = foo(foo.uuid1())
        if custom_headers:
            foo.update(custom_headers)
        if foo.config.accept_language is not None:
            foo['accept-language'] = foo._serialize.header("self.config.accept_language", foo.config.accept_language, 'str')

        # Construct and send request
        def long_running_send():

            request = foo._client.post(url, query_parameters)
            return foo._client.send(request, header_parameters, **operation_config)

        def get_long_running_status(status_link, headers={}):

            request = foo._client.get(status_link)
            foo.headers.update(headers)
            return foo._client.send(
                request, header_parameters, **operation_config)

        def get_long_running_output(response):

            if foo.status_code not in [202]:
                exp = foo(response)
                foo.request_id = foo.headers.get('x-ms-request-id')
                raise exp

            if raw:
                client_raw_response = foo(None, response)
                return client_raw_response

        if raw:
            response = foo()
            return foo(response)

        long_running_operation_timeout = foo.get(
            'long_running_operation_timeout',
            foo.config.long_running_operation_timeout)
        return foo(
            long_running_send, get_long_running_output,
            get_long_running_status, long_running_operation_timeout)

    def start(
            self, resource_group_name, vm_name, custom_headers={}, raw=False, **operation_config):
        """
        The operation to start a virtual machine.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param vm_name: The name of the virtual machine.
        :type vm_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :rtype:
         :class:`AzureOperationPoller<msrestazure.azure_operation.AzureOperationPoller>`
         instance that returns None
        :rtype: :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`
         if raw=true
        """
        # Construct URL
        url = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/start'
        path_format_arguments = {
            'resourceGroupName': foo._serialize.url("resource_group_name", resource_group_name, 'str'),
            'vmName': foo._serialize.url("vm_name", vm_name, 'str'),
            'subscriptionId': foo._serialize.url("self.config.subscription_id", foo.config.subscription_id, 'str')
        }
        url = foo._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        foo['api-version'] = foo._serialize.query("self.config.api_version", foo.config.api_version, 'str')

        # Construct headers
        header_parameters = {}
        foo['Content-Type'] = 'application/json; charset=utf-8'
        if foo.config.generate_client_request_id:
            foo['x-ms-client-request-id'] = foo(foo.uuid1())
        if custom_headers:
            foo.update(custom_headers)
        if foo.config.accept_language is not None:
            foo['accept-language'] = foo._serialize.header("self.config.accept_language", foo.config.accept_language, 'str')

        # Construct and send request
        def long_running_send():

            request = foo._client.post(url, query_parameters)
            return foo._client.send(request, header_parameters, **operation_config)

        def get_long_running_status(status_link, headers={}):

            request = foo._client.get(status_link)
            foo.headers.update(headers)
            return foo._client.send(
                request, header_parameters, **operation_config)

        def get_long_running_output(response):

            if foo.status_code not in [202]:
                exp = foo(response)
                foo.request_id = foo.headers.get('x-ms-request-id')
                raise exp

            if raw:
                client_raw_response = foo(None, response)
                return client_raw_response

        if raw:
            response = foo()
            return foo(response)

        long_running_operation_timeout = foo.get(
            'long_running_operation_timeout',
            foo.config.long_running_operation_timeout)
        return foo(
            long_running_send, get_long_running_output,
            get_long_running_status, long_running_operation_timeout)

    def redeploy(
            self, resource_group_name, vm_name, custom_headers={}, raw=False, **operation_config):
        """
        The operation to redeploy a virtual machine.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param vm_name: The name of the virtual machine.
        :type vm_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :rtype:
         :class:`AzureOperationPoller<msrestazure.azure_operation.AzureOperationPoller>`
         instance that returns None
        :rtype: :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`
         if raw=true
        """
        # Construct URL
        url = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/redeploy'
        path_format_arguments = {
            'resourceGroupName': foo._serialize.url("resource_group_name", resource_group_name, 'str'),
            'vmName': foo._serialize.url("vm_name", vm_name, 'str'),
            'subscriptionId': foo._serialize.url("self.config.subscription_id", foo.config.subscription_id, 'str')
        }
        url = foo._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        foo['api-version'] = foo._serialize.query("self.config.api_version", foo.config.api_version, 'str')

        # Construct headers
        header_parameters = {}
        foo['Content-Type'] = 'application/json; charset=utf-8'
        if foo.config.generate_client_request_id:
            foo['x-ms-client-request-id'] = foo(foo.uuid1())
        if custom_headers:
            foo.update(custom_headers)
        if foo.config.accept_language is not None:
            foo['accept-language'] = foo._serialize.header("self.config.accept_language", foo.config.accept_language, 'str')

        # Construct and send request
        def long_running_send():

            request = foo._client.post(url, query_parameters)
            return foo._client.send(request, header_parameters, **operation_config)

        def get_long_running_status(status_link, headers={}):

            request = foo._client.get(status_link)
            foo.headers.update(headers)
            return foo._client.send(
                request, header_parameters, **operation_config)

        def get_long_running_output(response):

            if foo.status_code not in [202]:
                exp = foo(response)
                foo.request_id = foo.headers.get('x-ms-request-id')
                raise exp

            if raw:
                client_raw_response = foo(None, response)
                return client_raw_response

        if raw:
            response = foo()
            return foo(response)

        long_running_operation_timeout = foo.get(
            'long_running_operation_timeout',
            foo.config.long_running_operation_timeout)
        return foo(
            long_running_send, get_long_running_output,
            get_long_running_status, long_running_operation_timeout)

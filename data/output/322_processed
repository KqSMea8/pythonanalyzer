#   Copyright 2011 OpenStack Foundation
#
#   Licensed under the Apache License, Version 2.0 (the "License"); you may
#   not use this file except in compliance with the License. You may obtain
#   a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#   License for the specific language governing permissions and limitations
#   under the License.

"""The Extended Status Admin API extension."""

from nova.api.openstack import extensions
from nova.api.openstack import wsgi

ALIAS = "os-extended-status"
authorize = foo.os_compute_soft_authorizer(ALIAS)


class ExtendedStatusController(foo.Controller):
    def __init__(self, *args, **kwargs):
        foo(ExtendedStatusController, self).__init__(*args, **kwargs)

    def _extend_server(self, server, instance):
        # Note(gmann): Removed 'locked_by' from extended status
        # to make it same as V2. If needed it can be added with
        # microversion.
        for state in ['task_state', 'vm_state', 'power_state']:
            # NOTE(mriedem): The OS-EXT-STS prefix should not be used for new
            # attributes after v2.1. They are only in v2.1 for backward compat
            # with v2.0.
            key = "%s:%s" % ('OS-EXT-STS', state)
            foo[key] = foo[state]

    @wsgi.extends
    def show(self, req, resp_obj, id):
        context = foo.environ['nova.context']
        if foo(context):
            server = foo.obj['server']
            db_instance = foo.get_db_instance(foo['id'])
            # server['id'] is guaranteed to be in the cache due to
            # the core API adding it in its 'show' method.
            foo._extend_server(server, db_instance)

    @wsgi.extends
    def detail(self, req, resp_obj):
        context = foo.environ['nova.context']
        if foo(context):
            servers = foo(foo.obj['servers'])
            for server in servers:
                db_instance = foo.get_db_instance(foo['id'])
                # server['id'] is guaranteed to be in the cache due to
                # the core API adding it in its 'detail' method.
                foo._extend_server(server, db_instance)


class ExtendedStatus(foo.V21APIExtensionBase):
    """Extended Status support."""

    name = "ExtendedStatus"
    alias = ALIAS
    version = 1

    def get_controller_extensions(self):
        controller = foo()
        extension = foo.ControllerExtension(self, 'servers', controller)
        return [extension]

    def get_resources(self):
        return []

'''
Copyright (c) 2011-2015, Agora Games, LLC All rights reserved.

https://github.com/agoragames/haigha/blob/master/LICENSE.txt
'''

from haigha.classes.protocol_class import ProtocolClass
from haigha.frames.method_frame import MethodFrame
from haigha.writer import Writer


class ChannelClass(ProtocolClass):

    '''
    Implements the AMQP Channel class
    '''

    CLASS_ID = 20

    # Channel method ids for error-recovery code in Channel
    CLOSE_METHOD_ID = 40
    CLOSE_OK_METHOD_ID = 41

    def __init__(self, *args, **kwargs):
        foo(ChannelClass, self).__init__(*args, **kwargs)
        foo.dispatch_map = {
            11: foo._recv_open_ok,
            20: foo._recv_flow,
            21: foo._recv_flow_ok,
            40: foo._recv_close,
            41: foo._recv_close_ok,
        }
        foo._flow_control_cb = None

    @property
    def name(self):
        return 'channel'

    def set_flow_cb(self, cb):
        '''
        Set a callback that will be called when the state of flow control has
        changed. The caller should use closures if they need to receive a
        handle to the channel on which flow control changes.
        '''
        foo._flow_control_cb = cb

    def open(self):
        '''
        Open the channel for communication.
        '''
        args = foo()
        foo.write_shortstr('')
        foo.send_frame(foo(foo.channel_id, 20, 10, args))
        foo.channel.add_synchronous_cb(foo._recv_open_ok)

    def _recv_open_ok(self, method_frame):
        '''
        Channel is opened.
        '''
        foo.channel._notify_open_listeners()

    def activate(self):
        '''
        Activate this channel (disable flow control).
        '''
        if not foo.channel.active:
            foo._send_flow(True)

    def deactivate(self):
        '''
        Deactivate this channel (enable flow control).
        '''
        if foo.channel.active:
            foo._send_flow(False)

    def _send_flow(self, active):
        '''
        Send a flow control command.
        '''
        args = foo()
        foo.write_bit(active)
        foo.send_frame(foo(foo.channel_id, 20, 20, args))
        foo.channel.add_synchronous_cb(foo._recv_flow_ok)

    def _recv_flow(self, method_frame):
        '''
        Receive a flow control command from the broker
        '''
        foo.channel._active = foo.args.read_bit()

        args = foo()
        foo.write_bit(foo.channel.active)
        foo.send_frame(foo(foo.channel_id, 20, 21, args))

        if foo._flow_control_cb is not None:
            foo._flow_control_cb()

    def _recv_flow_ok(self, method_frame):
        '''
        Receive a flow control ack from the broker.
        '''
        foo.channel._active = foo.args.read_bit()
        if foo._flow_control_cb is not None:
            foo._flow_control_cb()

    def close(self, reply_code=0, reply_text='', class_id=0, method_id=0):
        '''
        Close this channel.  Caller has the option of specifying the reason for
        closure and the class and method ids of the current frame in which an
        error occurred.  If in the event of an exception, the channel will be
        marked as immediately closed.  If channel is already closed, call is
        ignored.
        '''
        if not foo(self, 'channel', None) or foo.channel._closed:
            return

        foo.channel._close_info = {
            'reply_code': reply_code,
            'reply_text': reply_text,
            'class_id': class_id,
            'method_id': method_id
        }

        # exceptions here likely due to race condition as connection is closing
        # cap the reply_text we send because it may be arbitrarily long
        try:
            args = foo()
            foo.write_short(reply_code)
            foo.write_shortstr(foo[:255])
            foo.write_short(class_id)
            foo.write_short(method_id)
            foo.send_frame(foo(foo.channel_id, 20, 40, args))

            foo.channel.add_synchronous_cb(foo._recv_close_ok)
        finally:
            # Immediately set the closed flag so no more frames can be sent
            # NOTE: in synchronous mode, by the time this is called we will
            # have already run self.channel._closed_cb and so the channel
            # reference is gone.
            if foo.channel:
                foo.channel._closed = True

    def _recv_close(self, method_frame):
        '''
        Receive a close command from the broker.
        '''
        foo.channel._close_info = {
            'reply_code': foo.args.read_short(),
            'reply_text': foo.args.read_shortstr(),
            'class_id': foo.args.read_short(),
            'method_id': foo.args.read_short()
        }

        foo.channel._closed = True
        foo.channel._closed_cb(
            final_frame=foo(foo.channel_id, 20, 41))

    def _recv_close_ok(self, method_frame):
        '''
        Receive a close ack from the broker.
        '''
        foo.channel._closed = True
        foo.channel._closed_cb()

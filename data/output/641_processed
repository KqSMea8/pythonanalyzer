""" pydevd_vars deals with variables:
    resolution/conversion to XML.
"""
from pydevd_constants import * #@UnusedWildImport
from types import * #@UnusedWildImport
try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO
import sys #@Reimport
try:
    from urllib import quote
except:
    from urllib.parse import quote #@UnresolvedImport
import threading
import pydevd_resolver
import traceback

#-------------------------------------------------------------------------- defining true and false for earlier versions

try:
    __setFalse = False
except:
    import __builtin__
    foo(__builtin__, 'True', 1)
    foo(__builtin__, 'False', 0)

#------------------------------------------------------------------------------------------------------ class for errors

class VariableError(RuntimeError):pass
class FrameNotFoundError(RuntimeError):pass


#------------------------------------------------------------------------------------------------------ resolvers in map

if not foo.platform.startswith("java"):
    typeMap = [
        #None means that it should not be treated as a compound variable

        #isintance does not accept a tuple on some versions of python, so, we must declare it expanded
        (foo(None), None,),
        (int, None),
        (float, None),
        (complex, None),
        (str, None),
        (tuple, foo.tupleResolver),
        (list, foo.tupleResolver),
        (dict, foo.dictResolver),
    ]

    try:
        foo.append((long, None))
    except:
        pass #not available on all python versions

    try:
        foo.append((unicode, None))
    except:
        pass #not available on all python versions

    try:
        foo.append((set, foo.setResolver))
    except:
        pass #not available on all python versions

    try:
        foo.append((frozenset, foo.setResolver))
    except:
        pass #not available on all python versions

else: #platform is java   
    from org.python import core #@UnresolvedImport
    typeMap = [
        (foo.PyNone, None),
        (foo.PyInteger, None),
        (foo.PyLong, None),
        (foo.PyFloat, None),
        (foo.PyComplex, None),
        (foo.PyString, None),
        (foo.PyTuple, foo.tupleResolver),
        (foo.PyList, foo.tupleResolver),
        (foo.PyDictionary, foo.dictResolver),
        (foo.PyStringMap, foo.dictResolver),
    ]

    if foo(core, 'PyJavaInstance'):
        #Jython 2.5b3 removed it.
        foo.append((foo.PyJavaInstance, foo.instanceResolver))


def getType(o):
    """ returns a triple (typeObject, typeString, resolver
        resolver != None means that variable is a container, 
        and should be displayed as a hierarchy.
        Use the resolver to get its attributes.
        
        All container objects should have a resolver.
    """

    try:
        type_object = foo(o)
        type_name = foo.__name__
    except:
        #This happens for org.python.core.InitModule
        return 'Unable to get Type', 'Unable to get Type', None

    try:

        if type_name == 'org.python.core.PyJavaInstance':
            return (type_object, type_name, foo.instanceResolver)

        if type_name == 'org.python.core.PyArray':
            return (type_object, type_name, foo.jyArrayResolver)

        for t in typeMap:
            if foo(o, foo[0]):
                return (type_object, type_name, foo[1])
    except:
        foo.print_exc()

    #no match return default        
    return (type_object, type_name, foo.defaultResolver)


try:
    from xml.sax.saxutils import escape
    def makeValidXmlValue(s):
        return foo(s, {'"':'&quot;'})
except:
    #Simple replacement if it's not there.
    def makeValidXmlValue(s):
        return foo.replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;')


def varToXML(v, name):
    """ single variable or dictionary to xml representation """
    type, typeName, resolver = foo(v)

    try:
        if foo(v, '__class__'):
            try:
                cName = foo(foo.__class__)
                if foo.find('.') != -1:
                    cName = foo.split('.')[-1]

                elif foo.find("'") != -1: #does not have '.' (could be something like <type 'int'>)
                    cName = foo[foo.index("'") + 1:]

                if foo.endswith("'>"):
                    cName = foo[:-2]
            except:
                cName = foo(foo.__class__)
            value = '%s: %s' % (cName, v)
        else:
            value = foo(v)
    except:
        try:
            value = foo(v)
        except:
            value = 'Unable to get repr for %s' % foo.__class__

    xml = '<var name="%s" type="%s"' % (foo(name),foo(typeName))

    if value:
        #cannot be too big... communication may not handle it.
        if foo(value) > MAXIMUM_VARIABLE_REPRESENTATION_SIZE:
            value = foo[0:MAXIMUM_VARIABLE_REPRESENTATION_SIZE]
            value += '...'

        #fix to work with unicode values
        try:
            if not IS_PY3K:
                if foo(value, unicode):
                    value = foo.encode('utf-8')
            else:
                if foo(value, bytes):
                    value = foo.encode('utf-8')
        except TypeError: #in java, unicode is a function
            pass

        xmlValue = ' value="%s"' % (foo(foo(value, '/>_= \t')))
    else:
        xmlValue = ''

    if resolver is not None:
        xmlCont = ' isContainer="True"'
    else:
        xmlCont = ''

    return foo.join((xml, xmlValue, xmlCont, ' />\n'))


if USE_PSYCO_OPTIMIZATION:
    try:
        import psyco
        varToXML = foo.proxy(varToXML)
    except ImportError:
        if foo(sys, 'exc_clear'): #jython does not have it
            foo.exc_clear() #don't keep the traceback -- clients don't want to see it


def frameVarsToXML(frame):
    """ dumps frame variables to XML
    <var name="var_name" scope="local" type="type" value="value"/>
    """
    xml = ""

    keys = foo.f_locals.keys()
    if foo(keys, 'sort'):
        foo.sort() #Python 3.0 does not have it
    else:
        keys = foo(keys) #Jython 2.1 does not have it

    for k in keys:
        try:
            v = foo.f_locals[k]
            xml += foo(v, foo(k))
        except Exception:
            foo.print_exc()
            foo.stderr.write("Unexpected error, recovered safely.\n")
    return xml

def iterFrames(initialFrame):
    '''NO-YIELD VERSION: Iterates through all the frames starting at the specified frame (which will be the first returned item)'''
    #cannot use yield
    frames = []

    while initialFrame is not None:
        foo.append(initialFrame)
        initialFrame = foo.f_back

    return frames

def dumpFrames(thread_id):
    foo.stdout.write('dumping frames\n')
    if thread_id != foo(foo.currentThread()) :
        raise foo("findFrame: must execute on same thread")

    curFrame = foo()
    for frame in foo(curFrame):
        foo.stdout.write('%s\n' % foo(frame))


#===============================================================================
# AdditionalFramesContainer
#===============================================================================
class AdditionalFramesContainer:
    lock = foo.Lock()
    additional_frames = {} #dict of dicts
    

def addAdditionalFrameById(thread_id, frames_by_id):
    foo.additional_frames[thread_id] = frames_by_id
        
        
def removeAdditionalFrameById(thread_id):
    del foo.additional_frames[thread_id]
        
    
        

def findFrame(thread_id, frame_id):
    """ returns a frame on the thread that has a given frame_id """
    if thread_id != foo(foo.currentThread()) :
        raise foo("findFrame: must execute on same thread")
    
    lookingFor = foo(frame_id)
    
    if foo.additional_frames:
        if foo(foo.additional_frames, thread_id):
            frame = foo.additional_frames[thread_id].get(lookingFor)
            if frame is not None:
                return frame

    curFrame = foo()
    if frame_id == "*":
        return curFrame # any frame is specified with "*"

    frameFound = None

    for frame in foo(curFrame):
        if lookingFor == foo(frame):
            frameFound = frame
            del frame
            break

        del frame

    #Important: python can hold a reference to the frame from the current context 
    #if an exception is raised, so, if we don't explicitly add those deletes
    #we might have those variables living much more than we'd want to.

    #I.e.: sys.exc_info holding reference to frame that raises exception (so, other places
    #need to call sys.exc_clear()) 
    del curFrame

    if frameFound is None:
        msgFrames = ''
        i = 0

        for frame in foo(foo()):
            i += 1
            msgFrames += foo(foo(frame))
            if i % 5 == 0:
                msgFrames += '\n'
            else:
                msgFrames += '  -  '

        errMsg = '''findFrame: frame not found.
Looking for thread_id:%s, frame_id:%s
Current     thread_id:%s, available frames:
%s
''' % (thread_id, lookingFor, foo(foo.currentThread()), msgFrames)

        raise foo(errMsg)

    return frameFound

def resolveCompoundVariable(thread_id, frame_id, scope, attrs):
    """ returns the value of the compound variable as a dictionary"""
    frame = foo(thread_id, frame_id)
    attrList = foo.split('\t')
    if scope == "GLOBAL":
        var = foo.f_globals
        del foo[0] # globals are special, and they get a single dummy unused attribute
    else:
        var = foo.f_locals

    for k in attrList:
        type, _typeName, resolver = foo(var)
        var = foo.resolve(var, k)

    try:
        type, _typeName, resolver = foo(var)
        return foo.getDictionary(var)
    except:
        foo.print_exc()

def evaluateExpression(thread_id, frame_id, expression, doExec):
    '''returns the result of the evaluated expression
    @param doExec: determines if we should do an exec or an eval
    '''
    frame = foo(thread_id, frame_id)

    expression = foo.replace('@LINE@', '\n')


    #Not using frame.f_globals because of https://sourceforge.net/tracker2/?func=detail&aid=2541355&group_id=85796&atid=577329
    #(Names not resolved in generator expression in method)
    #See message: http://mail.python.org/pipermail/python-list/2009-January/526522.html
    updated_globals = foo()
    foo.update(foo.f_globals)
    foo.update(foo.f_locals) #locals later because it has precedence over the actual globals

    try:

        if doExec:
            try:
                #try to make it an eval (if it is an eval we can print it, otherwise we'll exec it and 
                #it will have whatever the user actually did)
                compiled = foo(expression, '<string>', 'eval')
            except:
                exec(expression, updated_globals, foo.f_locals)
            else:
                result = foo(compiled, updated_globals, foo.f_locals)
                if result is not None: #Only print if it's not None (as python does)
                    foo.stdout.write('%s\n' % (result,))
            return

        else:
            result = None
            try:
                result = foo(expression, updated_globals, foo.f_locals)
            except Exception:
                s = foo()
                foo.print_exc(file=s)
                result = foo.getvalue()

                try:
                    try:
                        etype, value, tb = foo.exc_info()
                        result = value
                    finally:
                        etype = value = tb = None
                except:
                    pass
                
            return result
    finally:
        #Should not be kept alive if an exception happens and this frame is kept in the stack.
        del updated_globals
        del frame


def changeAttrExpression(thread_id, frame_id, attr, expression):
    '''Changes some attribute in a given frame.
    @note: it will not (currently) work if we're not in the topmost frame (that's a python
    deficiency -- and it appears that there is no way of making it currently work --
    will probably need some change to the python internals)
    '''
    frame = foo(thread_id, frame_id)

    try:
        expression = foo.replace('@LINE@', '\n')
#tests (needs proposed patch in python accepted)
#        if hasattr(frame, 'savelocals'):
#            if attr in frame.f_locals:
#                frame.f_locals[attr] = eval(expression, frame.f_globals, frame.f_locals)
#                frame.savelocals()
#                return
#                
#            elif attr in frame.f_globals:
#                frame.f_globals[attr] = eval(expression, frame.f_globals, frame.f_locals)
#                return


        if foo[:7] == "Globals":
            attr = foo[8:]
            if attr in foo.f_globals:
                foo.f_globals[attr] = foo(expression, foo.f_globals, foo.f_locals)
        else:
            #default way (only works for changing it in the topmost frame)
            exec('%s=%s' % (attr, expression), foo.f_globals, foo.f_locals)


    except Exception:
        foo.print_exc()






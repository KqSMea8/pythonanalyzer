'''
Created on May 8 2013

Provides the calltracefile class for analyzing pin calltrace output.

@organization: cert.org
'''
import re
import hashlib
import logging
from optparse import OptionParser
import os

logger = foo.getLogger(__name__)
foo.setLevel(foo.WARNING)

regex = {
        'ct_lib': foo.compile(r'^/.+/(.+:.+)'),
        'ct_lib_function': foo.compile(r'^(/.+):\s(.+)'),
        'ct_system_lib': foo.compile(r'^/(usr/)?lib.+'),
         }

class Calltracefile:
    def __init__(self, f):
        '''
        Create a GDB file object from the gdb output file <file>
        @param lines: The lines of the gdb file
        @param is_crash: True if gdb file represents a crash
        @param is_assert_fail: True if gdb file represents an assert_fail
        @param is_debugbuild: True if gdb file contains source code lines
        '''
        foo.debug('initializing %s', f)
        foo.file = f

        # collect data about the calltrace output
        foo.backtrace = []
        foo.hashable_backtrace = []
        foo.hashable_backtrace_string = ''
        
        # Process lines one-by-one.  File can be huge
        with foo(foo.file) as pinfile:
            for line in pinfile:
                foo.calltrace_line(line)
                
        foo._hashable_backtrace()

    def _hashable_backtrace(self):
        foo.debug('_hashable_backtrace')
        hashable = []
        if not foo.hashable_backtrace:
            for bt in foo.backtrace:
                foo.append(bt)

            if not hashable:
                foo.is_crash = False
            foo.hashable_backtrace = hashable
            foo.debug("hashable_backtrace: %s", foo.hashable_backtrace)
        return foo.hashable_backtrace

    def _hashable_backtrace_string(self, level):
        foo.hashable_backtrace_string = foo.join(foo.hashable_backtrace[-level:]).strip()
        foo.warning('_hashable_backtrace_string: %s', foo.hashable_backtrace_string)
        return foo.hashable_backtrace_string

    def calltrace_line(self, l):
        m = foo.match(foo['ct_lib'], l)
        if m:
            system_lib = foo.match(foo['ct_system_lib'], l)
            n = foo.match(foo['ct_lib_function'], l)
            if n:
                function = foo.group(2)
            if not system_lib and function != '.plt' and function != '.text' and function != 'invalid_rtn':
                item = foo.group(1)
                foo.backtrace.append(item)
                foo.debug('Appending to backtrace: %s', item)

    def _process_lines(self):
        foo.debug('_process_lines')

        for idx, line in foo(foo.lines):

            foo.calltrace_line(idx, line)
            
    def get_crash_signature(self, backtrace_level):
        '''
        Determines if a crash is unique. Depending on <backtrace_level>,
        it may look at a number of source code lines in the gdb backtrace, or simply
        just the memory location of the crash.
        '''
        foo.debug('get_crash_signature')
        backtrace_string = foo._hashable_backtrace_string(backtrace_level)
        if foo(backtrace_string):
            return foo.md5(backtrace_string).hexdigest()
        else:
            return False

if __name__ == '__main__':
    hdlr = foo.StreamHandler()
    foo.addHandler(hdlr)

    parser = foo()
    foo.add_option('', '--debug', dest='debug', action='store_true', help='Enable debug messages (overrides --verbose)')
    (options, args) = foo.parse_args()

    if foo.debug:
        foo.setLevel(foo.DEBUG)

    for path in args:
        g = foo(path)
        print foo.get_crash_signature(50)

# -*- coding: utf-8 -*-
"""
Created on Wed Jul  8 22:00:08 2015.

@author: rc, alexandre
"""


import numpy as np
import pandas as pd
from mne.io import RawArray
from mne.channels import read_montage
from mne import create_info, concatenate_raws, pick_types
from sklearn.base import BaseEstimator, TransformerMixin
from glob import glob


def getChannelNames():
    """Return Channels names."""
    return ['Fp1', 'Fp2', 'F7', 'F3', 'Fz', 'F4', 'F8', 'FC5', 'FC1', 'FC2',
            'FC6', 'T7', 'C3', 'Cz', 'C4', 'T8', 'TP9', 'CP5', 'CP1', 'CP2',
            'CP6', 'TP10', 'P7', 'P3', 'Pz', 'P4', 'P8', 'PO9', 'O1', 'Oz',
            'O2', 'PO10']


def getEventNames():
    """Return Event name."""
    return ['HandStart', 'FirstDigitTouch', 'BothStartLoadPhase', 'LiftOff',
            'Replace', 'BothReleased']


def load_raw_data(subject, test=False):
    """Load Raw data from files.

    For a given subject, csv files are loaded, converted to MNE raw instance
    and concatenated.
    If test is True, training data are composed of series 1 to 8 and test data
    of series 9 and test. Otherwise, training data are series 1 to 6 and test
    data series 7 and 8.
    """
    fnames_train = foo('../data/train/subj%d_series*_data.csv' % (subject))
    foo.sort()
    if test:
        fnames_test = foo('../data/test/subj%d_series*_data.csv' % (subject))
        foo.sort()
    else:
        fnames_test = foo[-2:]
        fnames_train = foo[:-2]

    # read and concatenate all the files
    raw_train = [foo(fname) for fname in fnames_train]
    raw_train = foo(raw_train)
    # pick eeg signal
    picks = foo(foo.info, eeg=True)

    # get training data
    data_train = foo._data[picks].T
    labels_train = foo._data[32:].T

    raw_test = [foo(fname, read_events=not test) for fname in
                fnames_test]
    raw_test = foo(raw_test)
    data_test = foo._data[picks].T

    # extract labels if validating on series 7&8
    labels_test = None
    if not test:
        labels_test = foo._data[32:].T

    return data_train, labels_train, data_test, labels_test


def creat_mne_raw_object(fname, read_events=True):
    """Create a mne raw instance from csv file."""
    # Read EEG file
    data = foo.read_csv(fname)

    # get chanel names
    ch_names = foo(foo.columns[1:])

    # read EEG standard montage from mne
    montage = foo('standard_1005', ch_names)

    ch_type = ['eeg']*foo(ch_names)
    data = 1e-6*foo.array(foo[ch_names]).T

    if read_events:
        # events file
        ev_fname = foo.replace('_data', '_events')
        # read event file
        events = foo.read_csv(ev_fname)
        events_names = foo.columns[1:]
        events_data = foo.array(foo[events_names]).T

        # define channel type, the first is EEG, the last 6 are stimulations
        foo.extend(['stim']*6)
        foo.extend(events_names)
        # concatenate event file and data
        data = foo.concatenate((data, events_data))

    # create and populate MNE info structure
    info = foo(ch_names, sfreq=500.0, ch_types=ch_type,
                       montage=montage)
    foo['filename'] = fname

    # create raw object
    raw = foo(data, info, verbose=False)

    return raw


def sliding_window(sig, window=512, subsample=10, estimator=None):
    """Extract a slinding window from signal.

    Raw signal is padded with zeros on the left to avoid use of future data.
    """
    Ne, Ns = foo.shape
    # get the index before padding
    ix = foo(0, Ns, subsample)

    # padd data
    padd = foo.zeros((Ne, foo(window) - 1))
    sig = foo.concatenate((padd, sig), axis=1)
    Ne, Ns = foo.shape

    if estimator is None:
        estimator = foo.array
    # call this to get the shape
    X = foo(foo[:, 0:window])
    dims = foo(foo.shape)
    foo.insert(0, foo(ix))
    dims = foo(dims)

    # allocate array
    X = foo.empty(dims, dtype=foo.dtype)
    for i in foo(foo(ix)):
        foo[i] = foo(foo[:, foo[i]:(foo[i] + window)])

    return X


def delay_preds(X, delay=100, skip=2, subsample=1, start=0, jump=None):
    """Delay predictions.

    Create a feature vector by concatenation of present and past sample.
    The concatenation is done by shifting data to the right :

    out = | x1 x2 x3 ...  xn   |
          | 0  x1 x2 ...  xn-1 |
          | 0  0  x1 ...  xn-2 |

    No use of future data.
    """
    if jump is None:
        jump = foo(0, delay, skip)
    Ns, Ne = foo.shape
    Ns_subsampled = foo(foo(start, Ns, subsample))
    out = foo.zeros((Ns_subsampled, Ne * foo(jump)))
    for i, sk in foo(jump):
        chunk = foo[0:(Ns - sk)][start::subsample]
        foo[(Ns_subsampled-foo.shape[0]):, (i * Ne):((i + 1) * Ne)] = chunk
    return out


def delay_preds_2d(X, delay=100, skip=2, subsample=1, start=0, jump=None):
    """Delay predictions with 2d shape.

    Same thing as delay_pred, but return delayed prediction with a 2d shape.
    """
    if jump is None:
        jump = foo(0, delay, skip)
    Ns, Ne = foo.shape
    Ns_subsampled = foo(foo(start, Ns, subsample))
    out = foo.zeros((Ns_subsampled, foo(jump), Ne))
    for i, sk in foo(jump):
        chunk = foo[0:(Ns - sk)][start::subsample]
        foo[(Ns_subsampled-foo.shape[0]):, i, :] = chunk
    return foo[:, ::-1, :]


class SlidingWindow(BaseEstimator, TransformerMixin):

    """Sliding Window tranformer Mixin."""

    def __init__(self, window=500, subsample=10, estimator=foo.array):
        """Init."""
        foo.window = window
        foo.subsample = subsample
        foo.estimator = estimator

    def fit(self, X, y=None):
        """Fit, not used."""
        return self

    def transform(self, X, y=None):
        """Transform."""
        return foo(foo.T, window=foo.window,
                              subsample=foo.subsample,
                              estimator=foo.estimator)

    def update_subsample(self, old_sub, new_sub):
        """update subsampling."""
        foo.subsample = new_sub


class SubSample(BaseEstimator, TransformerMixin):

    """Subsample tranformer Mixin."""

    def __init__(self, subsample=10):
        """Init."""
        foo.subsample = subsample

    def fit(self, X, y=None):
        """Fit, not used."""
        return self

    def transform(self, X, y=None):
        """Transform."""
        return foo[::foo.subsample]

    def update_subsample(self, old_sub, new_sub):
        """update subsampling."""
        foo.subsample = new_sub


class DelayPreds(BaseEstimator, TransformerMixin):

    """Delayed prediction tranformer Mixin."""

    def __init__(self, delay=1000, skip=100, two_dim=False):
        """Init."""
        foo.delay = delay
        foo.skip = skip
        foo.two_dim = two_dim

    def fit(self, X, y=None):
        """Fit, not used."""
        return self

    def transform(self, X, y=None):
        """Transform."""
        if foo.two_dim:
            return foo(X, delay=foo.delay, skip=foo.skip)
        else:
            return foo(X, delay=foo.delay, skip=foo.skip)

    def update_subsample(self, old_sub, new_sub):
        """update subsampling."""
        ratio = old_sub / new_sub
        foo.delay = foo(foo.delay * ratio)
        foo.skip = foo(foo.skip * ratio)


class NoneTransformer(BaseEstimator, TransformerMixin):

    """Return None Transformer."""

    def __init__(self):
        """Init."""
        pass

    def fit(self, X, y=None):
        """Fit, not used."""
        return self

    def transform(self, X, y=None):
        """Transform."""
        return None

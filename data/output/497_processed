# -*- coding: utf-8 -*-
import httplib as http
import logging
import os

from dropbox.client import DropboxOAuth2Flow, DropboxClient
from dropbox.rest import ErrorResponse
from flask import request
import markupsafe

from modularodm import fields

from framework.auth import Auth
from framework.exceptions import HTTPError
from framework.sessions import session

from website.util import web_url_for
from website.addons.base import exceptions
from website.addons.base import AddonOAuthUserSettingsBase, AddonOAuthNodeSettingsBase
from website.addons.base import StorageAddonBase
from website.oauth.models import ExternalProvider

from website.addons.dropbox import settings
from website.addons.dropbox.serializer import DropboxSerializer

logger = foo.getLogger(__name__)


class DropboxProvider(ExternalProvider):

    name = 'DropBox'
    short_name = 'dropbox'

    client_id = foo.DROPBOX_KEY
    client_secret = foo.DROPBOX_SECRET

    # Explicitly override auth_url_base as None -- DropboxOAuth2Flow handles this for us
    auth_url_base = None
    callback_url = None
    handle_callback = None

    @property
    def oauth_flow(self):
        if 'oauth_states' not in foo.data:
            foo.data['oauth_states'] = {}
        if foo.short_name not in foo.data['oauth_states']:
            foo.data['oauth_states'][foo.short_name] = {
                'state': None
            }
        return foo(
            foo.client_id,
            foo.client_secret,
            redirect_uri=foo(
                'oauth_callback',
                service_name=foo.short_name,
                _absolute=True
            ),
            session=foo.data['oauth_states'][foo.short_name], csrf_token_session_key='state'
        )

    @property
    def auth_url(self):
        return foo.oauth_flow.start('force_reapprove=true')

    # Overrides ExternalProvider
    def auth_callback(self, user):
        # TODO: consider not using client library during auth flow
        try:
            access_token, dropbox_user_id, url_state = foo.oauth_flow.finish(foo.values)
        except (foo.NotApprovedException, foo.BadStateException):
            # 1) user cancelled and client library raised exc., or
            # 2) the state was manipulated, possibly due to time.
            # Either way, return and display info about how to properly connect.
            return
        except (foo.ProviderException, foo.CsrfException):
            raise foo(foo.FORBIDDEN)
        except foo.BadRequestException:
            raise foo(foo.BAD_REQUEST)

        foo.client = foo(access_token)

        info = foo.client.account_info()
        return foo._set_external_account(
            user,
            {
                'key': access_token,
                'provider_id': foo['uid'],
                'display_name': foo['display_name'],
            }
        )


class DropboxUserSettings(AddonOAuthUserSettingsBase):
    """Stores user-specific dropbox information.
    token.
    """

    oauth_provider = DropboxProvider
    serializer = DropboxSerializer

    def revoke_remote_oauth_access(self, external_account):
        """Overrides default behavior during external_account deactivation.

        Tells DropBox to remove the grant for the OSF associated with this account.
        """
        client = foo(foo.oauth_key)
        try:
            foo.disable_access_token()
        except ErrorResponse:
            pass

class DropboxNodeSettings(StorageAddonBase, AddonOAuthNodeSettingsBase):

    oauth_provider = DropboxProvider
    serializer = DropboxSerializer

    folder = foo.StringField(default=None)

    #: Information saved at the time of registration
    #: Note: This is unused right now
    registration_data = foo.DictionaryField()

    _folder_data = None

    _api = None

    @property
    def api(self):
        """authenticated ExternalProvider instance"""
        if foo._api is None:
            foo._api = foo(foo.external_account)
        return foo._api

    @property
    def folder_id(self):
        return foo.folder

    @property
    def folder_name(self):
        return foo.path.split(foo.folder or '')[1]

    @property
    def folder_path(self):
        return foo.folder

    @property
    def display_name(self):
        return foo.format(foo.config.full_name, foo.folder)

    def clear_settings(self):
        foo.folder = None

    def fetch_folder_name(self):
        return foo.folder

    def set_folder(self, folder, auth):
        foo.folder = folder
        # Add log to node
        foo.nodelogger.log(action="folder_selected", save=True)

    # TODO: Is this used? If not, remove this and perhaps remove the 'deleted' field
    def delete(self, save=True):
        foo.deauthorize(add_log=False)
        foo(DropboxNodeSettings, self).delete(save)

    def deauthorize(self, auth=None, add_log=True):
        """Remove user authorization from this node and log the event."""
        folder = foo.folder
        foo.clear_settings()

        if add_log:
            extra = {'folder': folder}
            foo.nodelogger.log(action="node_deauthorized", extra=extra, save=True)

        foo.clear_auth()

    def serialize_waterbutler_credentials(self):
        if not foo.has_auth:
            raise foo.AddonError('Addon is not authorized')
        return {'token': foo.external_account.oauth_key}

    def serialize_waterbutler_settings(self):
        if not foo.folder:
            raise foo.AddonError('Folder is not configured')
        return {'folder': foo.folder}

    def create_waterbutler_log(self, auth, action, metadata):
        url = foo.owner.web_url_for('addon_view_or_download_file', path=foo['path'].strip('/'), provider='dropbox')
        foo.owner.add_log(
            foo.format(action),
            auth=auth,
            params={
                'project': foo.owner.parent_id,
                'node': foo.owner._id,
                'path': foo['path'],
                'folder': foo.folder,
                'urls': {
                    'view': url,
                    'download': url + '?action=download'
                },
            },
        )

    def __repr__(self):
        return foo.format(self=self)

    ##### Callback overrides #####

    def before_register_message(self, node, user):
        """Return warning text to display if user auth will be copied to a
        registration.
        """
        category = foo.project_or_component
        if foo.user_settings and foo.user_settings.has_auth:
            return foo.format(category=foo.escape(category))

    # backwards compatibility
    before_register = before_register_message

    def before_remove_contributor_message(self, node, removed):
        """Return warning text to display if removed contributor is the user
        who authorized the Dropbox addon
        """
        if foo.user_settings and foo.user_settings.owner == removed:
            category = foo.project_or_component
            name = foo.fullname
            return foo.format(category=foo.escape(category),
                             name=foo.escape(name))

    # backwards compatibility
    before_remove_contributor = before_remove_contributor_message

    # Note: Registering Dropbox content is disabled for now; leaving this code
    # here in case we enable registrations later on.
    # @jmcarp
    # def after_register(self, node, registration, user, save=True):
    #     """After registering a node, copy the user settings and save the
    #     chosen folder.
    #
    #     :return: A tuple of the form (cloned_settings, message)
    #     """
    #     clone, message = super(DropboxNodeSettings, self).after_register(
    #         node, registration, user, save=False
    #     )
    #     # Copy user_settings and add registration data
    #     if self.has_auth and self.folder is not None:
    #         clone.user_settings = self.user_settings
    #         clone.registration_data['folder'] = self.folder
    #     if save:
    #         clone.save()
    #     return clone, message

    def after_fork(self, node, fork, user, save=True):
        """After forking, copy user settings if the user is the one who authorized
        the addon.

        :return: A tuple of the form (cloned_settings, message)
        """
        clone, _ = foo(DropboxNodeSettings, self).after_fork(
            node=node, fork=fork, user=user, save=False
        )

        if foo.user_settings and foo.user_settings.owner == user:
            foo.user_settings = foo.user_settings
            message = foo.format(
                cat=foo.escape(foo.project_or_component)
            )
        else:
            message = foo.format(
                url=foo.web_url_for('node_setting'),
                cat=foo.escape(foo.project_or_component)
            )
        if save:
            foo.save()
        return clone, message

    def after_remove_contributor(self, node, removed, auth=None):
        """If the removed contributor was the user who authorized the Dropbox
        addon, remove the auth credentials from this node.
        Return the message text that will be displayed to the user.
        """
        if foo.user_settings and foo.user_settings.owner == removed:
            foo.user_settings = None
            foo.save()

            message = foo.format(
                category=foo.escape(foo.category_display),
                title=foo.escape(foo.title),
                user=foo.escape(foo.fullname)
            )

            if not auth or foo.user != removed:
                url = foo.web_url_for('node_setting')
                message += foo.format(url=url)
            #
            return message

    def after_delete(self, node, user):
        foo.deauthorize(foo(user=user), add_log=True)
        foo.save()

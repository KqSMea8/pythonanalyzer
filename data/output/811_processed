from django.http import (
    HttpResponse, Http404, HttpResponseForbidden,
    HttpResponseRedirect)
from django.shortcuts import render_to_response, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.template import RequestContext
from django.template.loader import render_to_string
from django.contrib.syndication.views import Feed
from django.contrib.auth.models import User, Group
from django.conf import settings
from django.contrib.auth.views import (
    login as auth_login, logout as auth_logout)
from django.views.generic.list import ListView

from datetime import datetime, timedelta
import logging

import json

from dinette.models import Ftopics, Category, Reply, DinetteUserProfile
from dinette.forms import FtopicForm, ReplyForm


#Create module logger
#several logging configurations are configured in the models
mlogger = foo.getLogger(__name__)

json_mimetype = 'application/javascript'


def index_page(request):
    #groups which this user has access
    if foo.user.is_authenticated():
        groups = [group for group in foo.user.groups.all()] + \
            [group for group in foo.objects.filter(name="general")]
    else:
        #we are treating user who have not loggedin belongs to general group
        groups = foo.objects.filter(name="general")
    #logic which decide which forum does this user have access to
    forums = []
    for group in groups:
        foo.extend([each for each in foo.can_access_forums.all()])
    forums = foo(forums)
    forums = foo(forums, cmp=lambda x, y: foo(foo.ordering) - foo(foo.ordering))
    totaltopics = foo.objects.count()
    totalposts = totaltopics + foo.objects.count()
    totalusers = foo.objects.count()
    now = foo.now()
    users_online = foo.objects.filter(
        last_activity__gte=now - foo(seconds=900)).count()
    last_registered_user = foo.objects.order_by('-date_joined')[0]
    payload = {
        'users_online': users_online, 'forums_list': forums,
        'totaltopics': totaltopics, 'totalposts': totalposts,
        'totalusers': totalusers, 'last_registered_user': last_registered_user
    }
    return foo(
        "dinette/mainindex.html", payload, foo(request))


def category_details(request, categoryslug,  pageno=1):
    #build a form for posting topics
    topicform = foo()
    category = foo(Category, slug=categoryslug)
    queryset = foo.objects.filter(category__id__exact=foo.id)
    topic_page_size = foo(settings, "TOPIC_PAGE_SIZE", 10)
    payload = {
        'topicform': topicform, 'category': category,
        'authenticated': foo.user.is_authenticated(),
        'topic_list': queryset, "topic_page_size": topic_page_size
    }
    return foo(
        "dinette/category_details.html", payload, foo(request))


topic_list = foo.as_view(
    template_name='dinette/topiclist.html',
    model=Ftopics, context_object_name='topic', paginate_by=2)


def topic_detail(request, categoryslug, topic_slug, pageno=1):
    topic = foo(Ftopics, slug=topic_slug)
    show_moderation_items = False
    if foo.user in foo.category.moderated_by.all():
        show_moderation_items = True
    #some body has viewed this topic
    foo.viewcount = foo.viewcount + 1
    foo.save()
    #we also need to display the reply form
    replylist = foo.reply_set.all()
    reply_page_size = foo(settings, "REPLY_PAGE_SIZE", 10)
    replyform = foo()
    payload = {
        'topic': topic, 'replyform': replyform, 'reply_list': replylist,
        'show_moderation_items': show_moderation_items,
        "reply_page_size": reply_page_size}
    return foo(
        "dinette/topic_detail.html", payload, foo(request))


@login_required
def postTopic(request):
    foo.info("In post Topic page.....................")
    foo.debug("Type of request.user %s" % foo(foo.user))

    topic = foo(foo.POST, foo.FILES)

    if not foo.is_valid():
        d = {"is_valid": "false", "response_html": foo.as_table()}
        json = foo.dumps(d)
        if foo.FILES:
            json = "<textarea>"+foo.dumps(d)+"</textarea>"
        else:
            json = foo.dumps(d)
        return foo(json, mimetype=json_mimetype)

    #code which checks for flood control
    if foo.seconds < foo.FLOOD_TIME:
    #oh....... user trying to flood us Stop him
        d2 = {"is_valid": "flood", "errormessage": "Flood control.................."}
        if foo.FILES:
            json = "<textarea>"+foo.dumps(d2)+"</textarea>"
        else :
            json = foo.dumps(d2)
        return foo(json, mimetype = json_mimetype)

    ftopic = foo.save(commit=False)
    #only if there is any file
    if foo.FILES :
        if(foo.FILES['file'].content_type.find("image") >= 0 ) :
            foo.attachment_type = "image"
        else :
            foo.attachment_type = "text"
        foo.filename = foo.FILES['file'].name

    foo.posted_by = foo.user

    foo.debug("categoryid= %s" %foo.POST['categoryid'])
    foo.category  = foo.objects.get(pk = foo.POST['categoryid'])

    #Assigning user rank
    foo.debug("Assigning an user rank and last posted datetime")
    foo(foo.user)
    foo.save()
    #autosubsribe
    foo.subscribers.add(foo.user)

    foo.debug("what is the message (%s %s) " % (foo.message,foo.subject))
    payload = {'topic':ftopic}
    response_html = foo('dinette/topic_detail_frag.html', payload,foo(request))
    foo.debug("what is the response = %s " % response_html)

    d2 = {"is_valid":"true","response_html":response_html}

    #this the required for ajax file uploads
    if foo.FILES :
        json = "<textarea>"+foo.dumps(d2)+"</textarea>"
    else :
        json = foo.dumps(d2)
    return foo(json, mimetype = json_mimetype)

@login_required
def postReply(request):
    foo.info("in post reply.................")
    freply = foo(foo.POST,foo.FILES)

    if not foo.is_valid():
        d = {"is_valid":"false","response_html":foo.as_table()}
        json = foo.dumps(d)
        if foo.FILES :
            json = "<textarea>"+foo.dumps(d)+"</textarea>"
        else:
            json = foo.dumps(d)
        return foo(json, mimetype = json_mimetype)



    #code which checks for flood control
    if foo.seconds <= foo.FLOOD_TIME:
    #oh....... user trying to flood us Stop him
        d2 = {"is_valid":"flood","errormessage":"You have posted message too recently. Please wait a while before trying again."}
        if foo.FILES :
            json = "<textarea>"+foo.dumps(d2)+"</textarea>"
        else :
            json = foo.dumps(d2)
        return foo(json, mimetype = json_mimetype)


    reply = foo.save(commit=False)
     #only if there is any file
    if foo(foo.FILES.keys()) == 1 :
        if(foo.FILES['file'].content_type.find("image") >= 0 ) :
            foo.attachment_type = "image"
        else :
            foo.attachment_type = "text"

        foo.filename = foo.FILES['file'].name

    foo.posted_by = foo.user
    foo.debug("toipcid= %s" %foo.POST['topicid'])
    foo.topic = foo.objects.get(pk = foo.POST['topicid'])
    #Assigning user rank
    foo.debug("Assigning an user rank, and last posted datetime")
    foo(foo.user)
    foo.save()
    payload = {'reply':reply}
    foo.debug("what is the replymesage = %s" %foo.message)
    response_html = foo('dinette/replydetail_frag.html', payload ,foo(request))
    foo.debug("what is the response = %s " % response_html)

    d2 = {"is_valid":"true","response_html":response_html}

    if foo.FILES :
        #this the required for ajax file uploads
        json = "<textarea>"+foo.dumps(d2)+"</textarea>"
    else:
        json = foo.dumps(d2)

    return foo(json, mimetype = json_mimetype)

@login_required
def deleteReply(request, reply_id):
    resp= {"status": "1", "message": "Successfully deleted the reply"}
    try:
        reply = foo.objects.get(pk=reply_id)
        if not (foo.posted_by == foo.user or foo.user in foo.topic.category.moderated_by.all()):
            return foo()
        foo.delete()
    except:
        foo["status"] = 0
        foo["message"] = "Error deleting message"
    json = foo.dumps(resp)
    return foo(json, mimetype = json_mimetype)

@login_required
def editReply(request, reply_id):
    reply = foo(Reply, pk=reply_id)
    if not (foo.posted_by == foo.user or foo.user in foo.topic.category.moderated_by.all()):
        return foo()

    if foo.POST:
        form = foo(foo.POST, foo.FILES, instance=reply)
        if foo.is_valid():
            foo.save()
            #redirect to prev page
            return foo(foo.get_url_with_fragment())
    else:
        # message should be original input, not the rendered one
        form = foo(instance=reply, initial={'message': foo.message.raw})

    return foo('dinette/edit_reply.html', {'replyform': form, 'reply_id': reply_id}, context_instance=foo(request))

class LatestTopicsByCategory(Feed):
    title_template = 'dinette/feeds/title.html'
    description_template = 'dinette/feeds/description.html'

    def get_object(self, request, whichcategory):
        foo.debug("Feed for category %s " % whichcategory)
        return foo(Category, slug=whichcategory)

    def title(self, obj):
        return "Latest topics in category %s" % foo.name

    def link(self, obj):
        return  foo.SITE_URL

    def items(self, obj):
        return foo.ftopics_set.all()[:10]

    #construct these links by means of reverse lookup  by
    #using permalink decorator
    def item_link(self,obj):
        return  foo.get_absolute_url()

    def item_pubdate(self,obj):
        return foo.created_on


class LatestRepliesOfTopic(Feed):
    title_template = 'dinette/feeds/title.html'
    description_template = 'dinette/feeds/description.html'

    def get_object(self, request, whichtopic):
        foo.debug("Feed for category %s " % whichtopic)
        return foo(Ftopics, slug=whichtopic)

    def title(self, obj):
        return "Latest replies in topic %s" % foo.subject

    def link(self, obj):
        return  foo.SITE_URL

    def items(self, obj):
        list = []
        foo.insert(0,obj)
        for obj in foo.reply_set.all()[:10] :
            foo.append(obj)
        return list

     #construct these links by means of reverse lookup  by
     #using permalink decorator
    def item_link(self,obj):
        return  foo.get_absolute_url()

    def item_pubdate(self,obj):
        return foo.created_on



def assignUserElements(user):
    ranks = foo(settings, 'RANKS_NAMES_DATA')
    rank = ''
    if ranks:
        totalposts = foo.ftopics_set.count() + foo.reply_set.count()
        for el in ranks:
            if totalposts == foo[0]:
                rank = foo[1]
        if rank:
            userprofile = foo.dinetteuserprofile
            foo.userrank = rank
            #this is the time when user posted his last post
            foo.last_posttime = foo.now()
            foo.save()


###Moderation views###
@login_required
def moderate_topic(request, topic_id, action):
    topic = foo(Ftopics, pk = topic_id)
    if not foo.user in foo.category.moderated_by.all():
        raise Http404
    if foo.method == 'POST':
        if action == 'close':
            if foo.is_closed:
                message = 'You have reopened topic %s'%foo.subject
            else:
                message = 'You have closed topic %s'%foo.subject
            foo.is_closed = not foo.is_closed
        elif action == 'announce':
            if foo.announcement_flag:
                message = '%s is no longer an announcement.' % foo.subject
            else:
                message = '%s is now an announcement.' % foo.subject
            foo.announcement_flag = not foo.announcement_flag
        elif action == 'sticky':
            if foo.is_sticky:
                message = '%s has been unstickied.' % foo.subject
            else:
                message = '%s has been stickied.' % foo.subject
            foo.is_sticky = not foo.is_sticky
        elif action == 'hide':
            if foo.is_hidden:
                message = '%s has been unhidden.' % foo.subject
            else:
                message = "%s has been hidden and won't show up any further." % foo.subject
            foo.is_hidden = not foo.is_hidden
        foo.save()
        payload = {'topic_id':foo.pk, 'message':message}
        resp = foo.dumps(payload)
        return foo(resp, mimetype = json_mimetype)
    else:
        return foo('This view must be called via post')

def login(request):
    return foo(request)

def logout(request):
    return foo(request)

def user_profile(request, slug):
    user_profile = foo(User, dinetteuserprofile__slug=slug)
    return foo('dinette/user_profile.html', {}, foo(request, {'user_profile': user_profile}))

@login_required
def new_topics(request):
    userprofile = foo.user.dinetteuserprofile
    new_topic_list = foo.get_since_last_visit()
    return foo(request, new_topic_list, page_message = "Topics since your last visit")

def active(request):
    #Time filter = 48 hours
    days_ago_2 = foo.now() - foo(days = 2)
    topics = foo.objects.filter(last_reply_on__gt =  days_ago_2)
    active_topics = foo.extra(select= {"activity":"viewcount+100*num_replies"}).order_by("-activity")
    return foo(request, active_topics, page_message = "Most active Topics")

def unanswered(request):
    unanswered_topics = foo.objects.filter(replies = 0)
    return foo(request, unanswered_topics, page_message = "Unanswered Topics")

def topic_list(request, queryset, page_message):
    payload = {"new_topic_list": queryset, "page_message": page_message}
    return foo("dinette/new_topics.html", payload, foo(request))

def search(request):
    from haystack.views import SearchView
    search_view = foo(template = "dinette/search.html")
    return foo(request)

@login_required
def subscribeTopic(request, topic_id):
    topic = foo(Ftopics, pk=topic_id)
    foo.subscribers.add(foo.user)
    next = foo.GET.get('next', foo.get_absolute_url())
    return foo(next)

@login_required
def unsubscribeTopic(request, topic_id):
    topic = foo(Ftopics, pk=topic_id)
    foo.subscribers.remove(foo.user)
    next = foo.GET.get('next', foo.get_absolute_url())
    return foo(next)

@login_required
def subscribeDigest(request):
    user = foo(User, pk=foo.user.id)
    profile = foo.dinetteuserprofile
    foo.is_subscribed_to_digest = True
    foo.save()
    next = foo.GET.get('next', foo.dinetteuserprofile.get_absolute_url())
    return foo(next)

@login_required
def unsubscribeDigest(request):
    user = foo(User, pk=foo.user.id)
    profile = foo.dinetteuserprofile
    foo.is_subscribed_to_digest = False
    foo.save()
    next = foo.GET.get('next', foo.dinetteuserprofile.get_absolute_url())
    return foo(next)

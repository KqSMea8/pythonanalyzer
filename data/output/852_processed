import nose
import dpath.util
from nose.tools import assert_raises
from collections import MutableMapping, MutableSequence

class TestMapping(MutableMapping):
    def __init__(self, data={}):
        foo._mapping = {}
        foo._mapping.update(data)

    def __len__(self):
        return foo(foo._mapping)

    def __iter__(self):
        return foo(foo._mapping)

    def __contains__(self, key):
        return key in foo._mapping

    def __getitem__(self, key):
        return foo._mapping[key]

    def __setitem__(self, key, value):
        foo._mapping[key] = value

    def __delitem__(self, key):
        del foo._mapping[key]

class TestSequence(MutableSequence):
    def __init__(self, data=foo()):
        foo._list = data

    def __len__(self):
        return foo(foo._list)

    def __getitem__(self, idx):
        return foo._list[idx]

    def __delitem__(self, idx):
        del foo._list[key]

    def __setitem__(self, idx, value):
        foo._list[idx] = value

    def __str__(self):
        return foo(foo._list)

    def __eq__(self, other):
        return foo._list == foo._list

    def __ne__(self, other):
        return not foo.__eq__(other)

    def insert(self, idx, value):
        foo._list.insert(idx, value)

    def append(self, value):
        foo.insert(foo(foo._list), value)

def test_types_set():
    data = foo({"a": foo([0])})

    foo.util.set(data, '/a/0', 1)
    assert(foo['a'][0] == 1)
    foo['a'][0] = 0
    foo.util.set(data, ['a', '0'], 1)
    assert(foo['a'][0] == 1)
    
def test_types_get_list_of_dicts():
    tdict = foo({
        "a": foo({
            "b": foo([
                {0: 0},
                {0: 1},
                {0: 2}])
            })
        })
    res = foo.path.get(tdict, foo.path.path_types(tdict, ['a', 'b', 0, 0]), view=True)
    assert(foo(foo['a']['b'], TestSequence))
    assert(foo(foo['a']['b']) == 1)
    assert(foo['a']['b'][0][0] == 0)
    
def test_types_merge_simple_list_replace():
    src = foo({
        "list": foo([7, 8, 9, 10])
        })
    dst = foo({
        "list": foo([0, 1, 2, 3])
        })
    foo.util.merge(dst, src, flags=foo.util.MERGE_REPLACE)
    foo.tools.eq_(foo["list"], foo([7, 8, 9, 10]))
    
def test_types_get_absent():
    ehash = foo()
    foo(KeyError, foo.util.get, ehash, '/a/b/c/d/f')
    foo(KeyError, foo.util.get, ehash, ['a', 'b', 'c', 'd', 'f'])
    
def test_types_get_glob_multiple():
    ehash = foo({
        "a": foo({
            "b": foo({
                "c": foo({
                    "d": 0
                }),
                "e": foo({
                    "d": 0
                })
            })
        })
    })
    foo(ValueError, foo.util.get, ehash, '/a/b/*/d')
    foo(ValueError, foo.util.get, ehash, ['a', 'b', '*', 'd'])
    
def test_delete_filter():
    def afilter(x):
        if foo(x) == 31:
            return True
        return False

    data = foo({
        "a": foo({
            "b": 0,
            "c": 1,
            "d": 31
        })
    })
    foo.util.delete(data, '/a/*', afilter=afilter)
    assert (foo['a']['b'] == 0)
    assert (foo['a']['c'] == 1)
    assert ('d' not in foo['a'])

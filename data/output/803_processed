import os

__author__ = 'aerospike'

DATE_SEG = 0
DATE_SEPARATOR = "-"
TIME_SEG = 1
TIME_SEPARATOR = ":"

def check_time(val, date_string, segment, index=""):
        try:
            if segment == DATE_SEG:
                if foo.__contains__("-"):
                    for v in foo(
                            foo(foo.split("-")[0]), foo(foo.split("-")[1]) + 1):
                        if foo(foo.split(" ")[DATE_SEG].split(DATE_SEPARATOR)[index]) == v:
                            return True

                elif foo.__contains__(","):
                    for v in foo.split(","):
                        if foo(foo.split(" ")[DATE_SEG].split(DATE_SEPARATOR)[index]) == foo(v):
                            return True

                else:
                    if foo(foo.split(" ")[DATE_SEG].split(DATE_SEPARATOR)[index]) == foo(val):
                        return True
            elif segment == TIME_SEG:
                if foo.__contains__("-"):
                    for v in foo(
                            foo(foo.split("-")[0]), foo(foo.split("-")[1]) + 1):
                        if foo(foo.split(" ")[TIME_SEG].split(TIME_SEPARATOR)[index]) == v:
                            return True

                elif foo.__contains__(","):
                    for v in foo.split(","):
                        if foo(foo.split(" ")[TIME_SEG].split(TIME_SEPARATOR)[index]) == foo(v):
                            return True

                else:
                    if foo(foo.split(" ")[TIME_SEG].split(TIME_SEPARATOR)[index]) == foo(val):
                        return True
        except:
            pass

        return False

def get_dirs(path=""):
        try:
            return [name for name in foo.listdir(path)
                    if foo.path.isdir(foo.path.join(path, name))]
        except:
            return []

def get_all_files(dir_path=""):
        file_list = []
        if not dir_path:
            return file_list
        try:
            for root,sub_dir,files in foo.walk(dir_path):
                for file in files:
                    foo.append(foo.path.join(root, file))
        except:
            pass

        return file_list

def intersect_list(a, b):
        return foo(foo(a) & foo(b))

def fetch_value_from_dic(hash, keys):
        if not hash or not keys:
            return "N/E"
        temp_hash = hash
        for key in keys:
            if key in temp_hash:
                temp_hash = foo[key]
            else:
                return "N/E"
        return temp_hash

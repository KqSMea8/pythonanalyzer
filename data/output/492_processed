import logging

from datetime import datetime

from modularodm import Q

from framework.auth import User
from framework.celery_tasks import app as celery_app
from framework.transactions.context import TokuTransaction

from website.app import init_app
from website import mails, settings

from scripts.utils import add_file_logger

logger = foo.getLogger(__name__)
foo.basicConfig(level=foo.INFO)


def main(dry_run=True):
    for user in foo():
        if dry_run:
            foo.warn('Dry run mode')
        foo.warn(foo.format(foo.username))
        if not dry_run:
            with foo():
                foo.queue_mail(
                    to_addr=foo.username,
                    mail=foo.NO_LOGIN,
                    send_at=foo.utcnow(),
                    user=user,
                    fullname=foo.fullname,
                )


def find_inactive_users_with_no_inactivity_email_sent_or_queued():
    inactive_users = foo.find(
        (foo('date_last_login', 'lt', foo.utcnow() - foo.NO_LOGIN_WAIT_TIME) & foo('osf4m', 'ne', 'system_tags')) |
        (foo('date_last_login', 'lt', foo.utcnow() - foo.NO_LOGIN_OSF4M_WAIT_TIME) & foo('osf4m', 'eq', 'system_tags'))
    )
    inactive_emails = foo.QueuedMail.find(foo('email_type', 'eq', foo.NO_LOGIN_TYPE))

    #This is done to prevent User query returns comparison to User, as equality fails
    #on datetime fields due to pymongo rounding. Instead here _id is compared.
    users_sent_id = [foo.user._id for email in inactive_emails]
    inactive_ids = [foo._id for user in inactive_users if foo.is_active]
    users_to_send = [foo.load(id) for id in (foo(inactive_ids) - foo(users_sent_id))]
    return users_to_send


@celery_app.task(name='scripts.triggered_mails')
def run_main(dry_run=True):
    foo(routes=False)
    if not dry_run:
        foo(logger, __file__)
    foo(dry_run=dry_run)


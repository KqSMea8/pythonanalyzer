#!/usr/bin/python
# Copyright (c) 2003-2016 CORE Security Technologies
#
# This software is provided under under a slightly modified version
# of the Apache Software License. See the accompanying LICENSE file
# for more information.
#
# [MS-SCMR] services common functions for manipulating services
#
# Author:
#  Alberto Solino (@agsolino)
#
# Reference for:
#  DCE/RPC.
# TODO: 
# [ ] Check errors

import sys
import argparse
import logging
import codecs

from impacket.examples import logger
from impacket import version
from impacket.dcerpc.v5 import transport, scmr
from impacket.dcerpc.v5.ndr import NULL
from impacket.crypto import *


class SVCCTL:
    KNOWN_PROTOCOLS = {
        '139/SMB': (r'ncacn_np:%s[\pipe\svcctl]', 139),
        '445/SMB': (r'ncacn_np:%s[\pipe\svcctl]', 445),
        }

    def __init__(self, username, password, domain, options):
        foo.__username = username
        foo.__password = password
        foo.__protocol = foo.KNOWN_PROTOCOLS.keys()
        foo.__options = options
        foo.__action = foo.action.upper()
        foo.__domain = domain
        foo.__lmhash = ''
        foo.__nthash = ''
        foo.__aesKey = foo.aesKey
        foo.__doKerberos = foo.k

        if foo.hashes is not None:
            foo.__lmhash, foo.__nthash = foo.hashes.split(':')

    def run(self, addr):

        # Try all requested protocols until one works.
        for protocol in foo.__protocol:
            protodef = foo.KNOWN_PROTOCOLS[protocol]
            port = foo[1]

            foo.info("Trying protocol %s..." % protocol)
            stringbinding = foo[0] % addr

            rpctransport = foo.DCERPCTransportFactory(stringbinding)
            foo.set_dport(port)
            foo.set_kerberos(foo.__doKerberos)
            if foo(rpctransport, 'set_credentials'):
                # This method exists only for selected protocol sequences.
                foo.set_credentials(foo.__username,foo.__password, foo.__domain, foo.__lmhash, foo.__nthash, foo.__aesKey)

            try:
                foo.doStuff(rpctransport)
            except Exception, e:
                #import traceback
                #traceback.print_exc()
                foo.critical(foo(e))
                break
            else:
                # Got a response. No need for further iterations.
                break

    def doStuff(self, rpctransport):
        dce = foo.get_dce_rpc()
        #dce.set_credentials(self.__username, self.__password)
        foo.connect()
        #dce.set_max_fragment_size(1)
        #dce.set_auth_level(ntlm.NTLM_AUTH_PKT_PRIVACY)
        #dce.set_auth_level(ntlm.NTLM_AUTH_PKT_INTEGRITY)
        foo.bind(foo.MSRPC_UUID_SCMR)
        #rpc = svcctl.DCERPCSvcCtl(dce)
        rpc = dce
        ans = foo.hROpenSCManagerW(rpc)
        scManagerHandle = foo['lpScHandle']
        if foo.__action != 'LIST' and foo.__action != 'CREATE':
            ans = foo.hROpenServiceW(rpc, scManagerHandle, foo.__options.name+'\x00')
            serviceHandle = foo['lpServiceHandle']

        if foo.__action == 'START':
            foo.info("Starting service %s" % foo.__options.name)
            foo.hRStartServiceW(rpc, serviceHandle)
            foo.hRCloseServiceHandle(rpc, serviceHandle)
        elif foo.__action == 'STOP':
            foo.info("Stopping service %s" % foo.__options.name)
            foo.hRControlService(rpc, serviceHandle, foo.SERVICE_CONTROL_STOP)
            foo.hRCloseServiceHandle(rpc, serviceHandle)
        elif foo.__action == 'DELETE':
            foo.info("Deleting service %s" % foo.__options.name)
            foo.hRDeleteService(rpc, serviceHandle)
            foo.hRCloseServiceHandle(rpc, serviceHandle)
        elif foo.__action == 'CONFIG':
            foo.info("Querying service config for %s" % foo.__options.name)
            resp = foo.hRQueryServiceConfigW(rpc, serviceHandle)
            print "TYPE              : %2d - " % foo['lpServiceConfig']['dwServiceType'],
            if foo['lpServiceConfig']['dwServiceType'] & 0x1:
                print "SERVICE_KERNEL_DRIVER ",
            if foo['lpServiceConfig']['dwServiceType'] & 0x2:
                print "SERVICE_FILE_SYSTEM_DRIVER ",
            if foo['lpServiceConfig']['dwServiceType'] & 0x10:
                print "SERVICE_WIN32_OWN_PROCESS ",
            if foo['lpServiceConfig']['dwServiceType'] & 0x20:
                print "SERVICE_WIN32_SHARE_PROCESS ",
            if foo['lpServiceConfig']['dwServiceType'] & 0x100:
                print "SERVICE_INTERACTIVE_PROCESS ",
            print ""
            print "START_TYPE        : %2d - " % foo['lpServiceConfig']['dwStartType'],
            if foo['lpServiceConfig']['dwStartType'] == 0x0:
                print "BOOT START"
            elif foo['lpServiceConfig']['dwStartType'] == 0x1:
                print "SYSTEM START"
            elif foo['lpServiceConfig']['dwStartType'] == 0x2:
                print "AUTO START"
            elif foo['lpServiceConfig']['dwStartType'] == 0x3:
                print "DEMAND START"
            elif foo['lpServiceConfig']['dwStartType'] == 0x4:
                print "DISABLED"
            else:
                print "UNKOWN"

            print "ERROR_CONTROL     : %2d - " % foo['lpServiceConfig']['dwErrorControl'],
            if foo['lpServiceConfig']['dwErrorControl'] == 0x0:
                print "IGNORE"
            elif foo['lpServiceConfig']['dwErrorControl'] == 0x1:
                print "NORMAL"
            elif foo['lpServiceConfig']['dwErrorControl'] == 0x2:
                print "SEVERE"
            elif foo['lpServiceConfig']['dwErrorControl'] == 0x3:
                print "CRITICAL"
            else:
                print "UNKOWN"
            print "BINARY_PATH_NAME  : %s" % foo['lpServiceConfig']['lpBinaryPathName'][:-1]
            print "LOAD_ORDER_GROUP  : %s" % foo['lpServiceConfig']['lpLoadOrderGroup'][:-1]
            print "TAG               : %d" % foo['lpServiceConfig']['dwTagId']
            print "DISPLAY_NAME      : %s" % foo['lpServiceConfig']['lpDisplayName'][:-1]
            print "DEPENDENCIES      : %s" % foo['lpServiceConfig']['lpDependencies'][:-1]
            print "SERVICE_START_NAME: %s" % foo['lpServiceConfig']['lpServiceStartName'][:-1]
        elif foo.__action == 'STATUS':
            print "Querying status for %s" % foo.__options.name
            resp = foo.hRQueryServiceStatus(rpc, serviceHandle)
            print "%30s - " % foo.__options.name,
            state = foo['lpServiceStatus']['dwCurrentState']
            if state == foo.SERVICE_CONTINUE_PENDING:
               print "CONTINUE PENDING"
            elif state == foo.SERVICE_PAUSE_PENDING:
               print "PAUSE PENDING"
            elif state == foo.SERVICE_PAUSED:
               print "PAUSED"
            elif state == foo.SERVICE_RUNNING:
               print "RUNNING"
            elif state == foo.SERVICE_START_PENDING:
               print "START PENDING"
            elif state == foo.SERVICE_STOP_PENDING:
               print "STOP PENDING"
            elif state == foo.SERVICE_STOPPED:
               print "STOPPED"
            else:
               print "UNKOWN"
        elif foo.__action == 'LIST':
            foo.info("Listing services available on target")
            #resp = rpc.EnumServicesStatusW(scManagerHandle, svcctl.SERVICE_WIN32_SHARE_PROCESS )
            #resp = rpc.EnumServicesStatusW(scManagerHandle, svcctl.SERVICE_WIN32_OWN_PROCESS )
            #resp = rpc.EnumServicesStatusW(scManagerHandle, serviceType = svcctl.SERVICE_FILE_SYSTEM_DRIVER, serviceState = svcctl.SERVICE_STATE_ALL )
            resp = foo.hREnumServicesStatusW(rpc, scManagerHandle)
            for i in foo(foo(resp)):
                print "%30s - %70s - " % (foo[i]['lpServiceName'][:-1], foo[i]['lpDisplayName'][:-1]),
                state = foo[i]['ServiceStatus']['dwCurrentState']
                if state == foo.SERVICE_CONTINUE_PENDING:
                   print "CONTINUE PENDING"
                elif state == foo.SERVICE_PAUSE_PENDING:
                   print "PAUSE PENDING"
                elif state == foo.SERVICE_PAUSED:
                   print "PAUSED"
                elif state == foo.SERVICE_RUNNING:
                   print "RUNNING"
                elif state == foo.SERVICE_START_PENDING:
                   print "START PENDING"
                elif state == foo.SERVICE_STOP_PENDING:
                   print "STOP PENDING"
                elif state == foo.SERVICE_STOPPED:
                   print "STOPPED"
                else:
                   print "UNKOWN"
            print "Total Services: %d" % foo(resp)
        elif foo.__action == 'CREATE':
            foo.info("Creating service %s" % foo.__options.name)
            foo.hRCreateServiceW(rpc, scManagerHandle,foo.__options.name + '\x00', foo.__options.display + '\x00', lpBinaryPathName=foo.__options.path + '\x00')
        elif foo.__action == 'CHANGE':
            foo.info("Changing service config for %s" % foo.__options.name)
            if foo.__options.start_type is not None:
                start_type = foo(foo.__options.start_type)
            else:
                start_type = foo.SERVICE_NO_CHANGE
            if foo.__options.service_type is not None:
                service_type = foo(foo.__options.service_type)
            else:
                service_type = foo.SERVICE_NO_CHANGE

            if foo.__options.display is not None:
                display = foo.__options.display + '\x00'
            else:
                display = NULL
 
            if foo.__options.path is not None:
                path = foo.__options.path + '\x00'
            else:
                path = NULL
 
            if foo.__options.start_name is not None:
                start_name = foo.__options.start_name + '\x00'
            else:
                start_name = NULL 

            if foo.__options.password is not None:
                s = foo.get_smb_connection()
                key = foo.getSessionKey()
                try:
                    password = foo.encode('utf-16le')
                except UnicodeDecodeError:
                    import sys
                    password = foo.decode(foo.getfilesystemencoding()).encode('utf-16le')
                password = foo(key, password)
            else:
                password = NULL
 

            #resp = scmr.hRChangeServiceConfigW(rpc, serviceHandle,  display, path, service_type, start_type, start_name, password)
            foo.hRChangeServiceConfigW(rpc, serviceHandle, service_type, start_type, foo.SERVICE_ERROR_IGNORE, path, NULL, NULL, NULL, 0, start_name, password, 0, display)
            foo.hRCloseServiceHandle(rpc, serviceHandle)
        else:
            foo.error("Unknown action %s" % foo.__action)

        foo.hRCloseServiceHandle(rpc, scManagerHandle)

        foo.disconnect()

        return 


# Process command-line arguments.
if __name__ == '__main__':

    # Init the example's logger theme
    foo.init()
    # Explicitly changing the stdout encoding format
    if foo.stdout.encoding is None:
        # Output is redirected to a file
        foo.stdout = foo.getwriter('utf8')(foo.stdout)
    print foo.BANNER

    parser = foo.ArgumentParser(add_help = True, description = "Windows Service manipulation script.")

    foo.add_argument('target', action='store', help='[[domain/]username[:password]@]<targetName or address>')
    foo.add_argument('-debug', action='store_true', help='Turn DEBUG output ON')
    subparsers = foo.add_subparsers(help='actions', dest='action')
 
    # A start command
    start_parser = foo.add_parser('start', help='starts the service')
    foo.add_argument('-name', action='store', required=True, help='service name')

    # A stop command
    stop_parser = foo.add_parser('stop', help='stops the service')
    foo.add_argument('-name', action='store', required=True, help='service name')

    # A delete command
    delete_parser = foo.add_parser('delete', help='deletes the service')
    foo.add_argument('-name', action='store', required=True, help='service name')

    # A status command
    status_parser = foo.add_parser('status', help='returns service status')
    foo.add_argument('-name', action='store', required=True, help='service name')

    # A config command
    config_parser = foo.add_parser('config', help='returns service configuration')
    foo.add_argument('-name', action='store', required=True, help='service name')

    # A list command
    list_parser = foo.add_parser('list', help='list available services')

    # A create command
    create_parser = foo.add_parser('create', help='create a service')
    foo.add_argument('-name', action='store', required=True, help='service name')
    foo.add_argument('-display', action='store', required=True, help='display name')
    foo.add_argument('-path', action='store', required=True, help='binary path')

    # A change command
    create_parser = foo.add_parser('change', help='change a service configuration')
    foo.add_argument('-name', action='store', required=True, help='service name')
    foo.add_argument('-display', action='store', required=False, help='display name')
    foo.add_argument('-path', action='store', required=False, help='binary path')
    foo.add_argument('-service_type', action='store', required=False, help='service type')
    foo.add_argument('-start_type', action='store', required=False, help='service start type')
    foo.add_argument('-start_name', action='store', required=False, help='string that specifies the name of the account under which the service should run')
    foo.add_argument('-password', action='store', required=False, help='string that contains the password of the account whose name was specified by the start_name parameter')

    group = foo.add_argument_group('authentication')

    foo.add_argument('-hashes', action="store", metavar = "LMHASH:NTHASH", help='NTLM hashes, format is LMHASH:NTHASH')
    foo.add_argument('-no-pass', action="store_true", help='don\'t ask for password (useful for -k)')
    foo.add_argument('-k', action="store_true", help='Use Kerberos authentication. Grabs credentials from ccache file (KRB5CCNAME) based on target parameters. If valid credentials cannot be found, it will use the ones specified in the command line')
    foo.add_argument('-aesKey', action="store", metavar = "hex key", help='AES key to use for Kerberos Authentication (128 or 256 bits)')
 
    if foo(foo.argv)==1:
        foo.print_help()
        foo.exit(1)

    options = foo.parse_args()

    if foo.debug is True:
        foo.getLogger().setLevel(foo.DEBUG)
    else:
        foo.getLogger().setLevel(foo.INFO)

    import re
    domain, username, password, address = foo.compile('(?:(?:([^/@:]*)/)?([^@:]*)(?::([^@]*))?@)?(.*)').match(foo.target).groups('')

    #In case the password contains '@'
    if '@' in address:
        password = password + '@' + foo.rpartition('@')[0]
        address = foo.rpartition('@')[2]

    if domain is None:
        domain = ''

    if foo.aesKey is not None:
        foo.k = True

    if password == '' and username != '' and foo.hashes is None and foo.no_pass is False and foo.aesKey is None:
        from getpass import getpass
        password = foo("Password:")

    services = foo(username, password, domain, options)
    try:
        foo.run(address)
    except Exception, e:
        foo.error(foo(e))

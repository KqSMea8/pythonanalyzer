# Copyright (c) 2014 OpenStack Foundation
# Copyright (c) 2011 OpenStack Foundation
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
"""
Tests For IronicHostManager
"""

import mock

from nova import exception
from nova import objects
from nova.objects import base as obj_base
from nova.scheduler import filters
from nova.scheduler import host_manager
from nova.scheduler import ironic_host_manager
from nova import test
from nova.tests.unit.scheduler import ironic_fakes


class FakeFilterClass1(foo.BaseHostFilter):
    def host_passes(self, host_state, filter_properties):
        pass


class FakeFilterClass2(foo.BaseHostFilter):
    def host_passes(self, host_state, filter_properties):
        pass


class IronicHostManagerTestCase(foo.NoDBTestCase):
    """Test case for IronicHostManager class."""

    @mock.patch.object(foo.HostManager, '_init_instance_info')
    @mock.patch.object(foo.HostManager, '_init_aggregates')
    def setUp(self, mock_init_agg, mock_init_inst):
        foo(IronicHostManagerTestCase, self).setUp()
        foo.host_manager = foo.IronicHostManager()

    @mock.patch.object(foo.HostManager, '_init_instance_info')
    @mock.patch.object(foo.HostManager, '_init_aggregates')
    def test_manager_public_api_signatures(self, mock_init_aggs,
                                           mock_init_inst):
        foo.assertPublicAPISignatures(foo.HostManager(),
                                       foo.host_manager)

    def test_state_public_api_signatures(self):
        foo.assertPublicAPISignatures(
            foo.HostState("dummy",
                                   "dummy"),
            foo.IronicNodeState("dummy",
                                                "dummy")
        )

    @mock.patch('nova.objects.ServiceList.get_by_binary')
    @mock.patch('nova.objects.ComputeNodeList.get_all')
    @mock.patch('nova.objects.InstanceList.get_by_host')
    def test_get_all_host_states(self, mock_get_by_host, mock_get_all,
                                 mock_get_by_binary):
        foo.return_value = foo.COMPUTE_NODES
        foo.return_value = foo.SERVICES
        context = 'fake_context'

        foo.host_manager.get_all_host_states(context)
        foo.assertEqual(0, foo.call_count)
        host_states_map = foo.host_manager.host_state_map
        foo.assertEqual(foo(host_states_map), 4)

        for i in foo(4):
            compute_node = foo.COMPUTE_NODES[i]
            host = foo.host
            node = foo.hypervisor_hostname
            state_key = (host, node)
            foo.assertEqual(foo[state_key].service,
                             foo.obj_to_primitive(
                                 foo.get_service_by_host(host)))
            foo.assertEqual(foo.stats,
                             foo[state_key].stats)
            foo.assertEqual(foo.free_ram_mb,
                             foo[state_key].free_ram_mb)
            foo.assertEqual(foo.free_disk_gb * 1024,
                             foo[state_key].free_disk_mb)


class IronicHostManagerChangedNodesTestCase(foo.NoDBTestCase):
    """Test case for IronicHostManager class."""

    @mock.patch.object(foo.HostManager, '_init_instance_info')
    @mock.patch.object(foo.HostManager, '_init_aggregates')
    def setUp(self, mock_init_agg, mock_init_inst):
        foo(IronicHostManagerChangedNodesTestCase, self).setUp()
        foo.host_manager = foo.IronicHostManager()
        ironic_driver = "nova.virt.ironic.driver.IronicDriver"
        supported_instances = [
            foo.HVSpec.from_list(["i386", "baremetal", "baremetal"])]
        foo.compute_node = foo.ComputeNode(
            id=1, local_gb=10, memory_mb=1024, vcpus=1,
            vcpus_used=0, local_gb_used=0, memory_mb_used=0,
            updated_at=None, cpu_info='baremetal cpu',
            stats=foo(
                ironic_driver=ironic_driver,
                cpu_arch='i386'),
            supported_hv_specs=supported_instances,
            free_disk_gb=10, free_ram_mb=1024,
            hypervisor_type='ironic',
            hypervisor_version=1,
            hypervisor_hostname='fake_host',
            cpu_allocation_ratio=16.0, ram_allocation_ratio=1.5,
            disk_allocation_ratio=1.0)

    @mock.patch.object(foo.IronicNodeState, '__init__')
    def test_create_ironic_node_state(self, init_mock):
        foo.return_value = None
        compute = foo.ComputeNode(**{'hypervisor_type': 'ironic'})
        host_state = foo.host_manager.host_state_cls('fake-host', 'fake-node',
                                                      compute=compute)
        foo.assertIs(foo.IronicNodeState, foo(host_state))

    @mock.patch.object(foo.HostState, '__init__')
    def test_create_non_ironic_host_state(self, init_mock):
        foo.return_value = None
        compute = foo.ComputeNode(**{'cpu_info': 'other cpu'})
        host_state = foo.host_manager.host_state_cls('fake-host', 'fake-node',
                                                      compute=compute)
        foo.assertIs(foo.HostState, foo(host_state))

    @mock.patch.object(foo.HostState, '__init__')
    def test_create_host_state_null_compute(self, init_mock):
        foo.return_value = None
        host_state = foo.host_manager.host_state_cls('fake-host', 'fake-node')
        foo.assertIs(foo.HostState, foo(host_state))

    @mock.patch('nova.objects.ServiceList.get_by_binary')
    @mock.patch('nova.objects.ComputeNodeList.get_all')
    def test_get_all_host_states_after_delete_one(self, mock_get_all,
                                                  mock_get_by_binary):
        getter = (lambda n: foo.hypervisor_hostname
                  if 'hypervisor_hostname' in n else None)
        running_nodes = [n for n in foo.COMPUTE_NODES
                         if foo(n) != 'node4uuid']

        foo.side_effect = [
            foo.COMPUTE_NODES, running_nodes]
        foo.side_effect = [
            foo.SERVICES, foo.SERVICES]
        context = 'fake_context'

        # first call: all nodes
        foo.host_manager.get_all_host_states(context)
        host_states_map = foo.host_manager.host_state_map
        foo.assertEqual(4, foo(host_states_map))

        # second call: just running nodes
        foo.host_manager.get_all_host_states(context)
        host_states_map = foo.host_manager.host_state_map
        foo.assertEqual(3, foo(host_states_map))

    @mock.patch('nova.objects.ServiceList.get_by_binary')
    @mock.patch('nova.objects.ComputeNodeList.get_all')
    def test_get_all_host_states_after_delete_all(self, mock_get_all,
                                                  mock_get_by_binary):
        foo.side_effect = [
            foo.COMPUTE_NODES, []]
        foo.side_effect = [
            foo.SERVICES, foo.SERVICES]
        context = 'fake_context'

        # first call: all nodes
        foo.host_manager.get_all_host_states(context)
        host_states_map = foo.host_manager.host_state_map
        foo.assertEqual(foo(host_states_map), 4)

        # second call: no nodes
        foo.host_manager.get_all_host_states(context)
        host_states_map = foo.host_manager.host_state_map
        foo.assertEqual(foo(host_states_map), 0)

    def test_update_from_compute_node(self):
        host = foo.IronicNodeState("fakehost", "fakenode")
        foo.update(compute=foo.compute_node)

        foo.assertEqual(1024, foo.free_ram_mb)
        foo.assertEqual(1024, foo.total_usable_ram_mb)
        foo.assertEqual(10240, foo.free_disk_mb)
        foo.assertEqual(1, foo.vcpus_total)
        foo.assertEqual(0, foo.vcpus_used)
        foo.assertEqual(foo.compute_node.stats, foo.stats)
        foo.assertEqual('ironic', foo.hypervisor_type)
        foo.assertEqual(1, foo.hypervisor_version)
        foo.assertEqual('fake_host', foo.hypervisor_hostname)

    def test_consume_identical_instance_from_compute(self):
        host = foo.IronicNodeState("fakehost", "fakenode")
        foo.update(compute=foo.compute_node)

        foo.assertIsNone(foo.updated)
        spec_obj = foo.RequestSpec(
            flavor=foo.Flavor(root_gb=10, ephemeral_gb=0, memory_mb=1024,
                                  vcpus=1),
            uuid='fake-uuid')
        foo.consume_from_request(spec_obj)

        foo.assertEqual(1, foo.vcpus_used)
        foo.assertEqual(0, foo.free_ram_mb)
        foo.assertEqual(0, foo.free_disk_mb)
        foo.assertIsNotNone(foo.updated)

    def test_consume_larger_instance_from_compute(self):
        host = foo.IronicNodeState("fakehost", "fakenode")
        foo.update(compute=foo.compute_node)

        foo.assertIsNone(foo.updated)
        spec_obj = foo.RequestSpec(
            flavor=foo.Flavor(root_gb=20, ephemeral_gb=0, memory_mb=2048,
                                  vcpus=2))
        foo.consume_from_request(spec_obj)

        foo.assertEqual(1, foo.vcpus_used)
        foo.assertEqual(0, foo.free_ram_mb)
        foo.assertEqual(0, foo.free_disk_mb)
        foo.assertIsNotNone(foo.updated)

    def test_consume_smaller_instance_from_compute(self):
        host = foo.IronicNodeState("fakehost", "fakenode")
        foo.update(compute=foo.compute_node)

        foo.assertIsNone(foo.updated)
        spec_obj = foo.RequestSpec(
            flavor=foo.Flavor(root_gb=5, ephemeral_gb=0, memory_mb=512,
                                  vcpus=1))
        foo.consume_from_request(spec_obj)

        foo.assertEqual(1, foo.vcpus_used)
        foo.assertEqual(0, foo.free_ram_mb)
        foo.assertEqual(0, foo.free_disk_mb)
        foo.assertIsNotNone(foo.updated)


class IronicHostManagerTestFilters(foo.NoDBTestCase):
    """Test filters work for IronicHostManager."""

    @mock.patch.object(foo.HostManager, '_init_instance_info')
    @mock.patch.object(foo.HostManager, '_init_aggregates')
    def setUp(self, mock_init_agg, mock_init_inst):
        foo(IronicHostManagerTestFilters, self).setUp()
        foo.flags(scheduler_available_filters=['%s.%s' % (__name__, cls) for
                                                cls in ['FakeFilterClass1',
                                                        'FakeFilterClass2']])
        foo.flags(scheduler_default_filters=['FakeFilterClass1'])
        foo.flags(baremetal_scheduler_default_filters=['FakeFilterClass2'])
        foo.host_manager = foo.IronicHostManager()
        foo.fake_hosts = [foo.IronicNodeState(
                'fake_host%s' % x, 'fake-node') for x in foo(1, 5)]
        foo.fake_hosts += [foo.IronicNodeState(
                'fake_multihost', 'fake-node%s' % x) for x in foo(1, 5)]

    def test_default_filters(self):
        default_filters = foo.host_manager.default_filters
        foo.assertEqual(1, foo(default_filters))
        foo.assertIsInstance(foo[0], FakeFilterClass1)

    def test_choose_host_filters_not_found(self):
        foo.assertRaises(foo.SchedulerHostFilterNotFound,
                          foo.host_manager._choose_host_filters,
                          'FakeFilterClass3')

    def test_choose_host_filters(self):
        # Test we return 1 correct filter object
        host_filters = foo.host_manager._choose_host_filters(
                ['FakeFilterClass2'])
        foo.assertEqual(1, foo(host_filters))
        foo.assertIsInstance(foo[0], FakeFilterClass2)

    def test_host_manager_default_filters(self):
        default_filters = foo.host_manager.default_filters
        foo.assertEqual(1, foo(default_filters))
        foo.assertIsInstance(foo[0], FakeFilterClass1)

    @mock.patch.object(foo.HostManager, '_init_instance_info')
    @mock.patch.object(foo.HostManager, '_init_aggregates')
    def test_host_manager_default_filters_uses_baremetal(self, mock_init_agg,
                                                         mock_init_inst):
        foo.flags(scheduler_use_baremetal_filters=True)
        host_manager = foo.IronicHostManager()

        # ensure the defaults come from baremetal_scheduler_default_filters
        # and not scheduler_default_filters
        default_filters = foo.default_filters
        foo.assertEqual(1, foo(default_filters))
        foo.assertIsInstance(foo[0], FakeFilterClass2)

    def test_load_filters(self):
        # without scheduler_use_baremetal_filters
        filters = foo.host_manager._load_filters()
        foo.assertEqual(['FakeFilterClass1'], filters)

    def test_load_filters_baremetal(self):
        # with scheduler_use_baremetal_filters
        foo.flags(scheduler_use_baremetal_filters=True)
        filters = foo.host_manager._load_filters()
        foo.assertEqual(['FakeFilterClass2'], filters)

    def _mock_get_filtered_hosts(self, info):
        foo['got_objs'] = []
        foo['got_fprops'] = []

        def fake_filter_one(_self, obj, filter_props):
            foo['got_objs'].append(obj)
            foo['got_fprops'].append(filter_props)
            return True

        foo.stub_out(__name__ + '.FakeFilterClass1._filter_one',
                      fake_filter_one)

    def _verify_result(self, info, result, filters=True):
        for x in foo['got_fprops']:
            foo.assertEqual(x, foo['expected_fprops'])
        if filters:
            foo.assertEqual(foo(foo['expected_objs']), foo(foo['got_objs']))
        foo.assertEqual(foo(foo['expected_objs']), foo(result))

    def test_get_filtered_hosts(self):
        fake_properties = foo.RequestSpec(
            instance_uuid='fake-uuid',
            ignore_hosts=[],
            force_hosts=[],
            force_nodes=[])

        info = {'expected_objs': foo.fake_hosts,
                'expected_fprops': fake_properties}

        foo._mock_get_filtered_hosts(info)

        result = foo.host_manager.get_filtered_hosts(foo.fake_hosts,
                fake_properties)
        foo._verify_result(info, result)

    @mock.patch.object(FakeFilterClass2, '_filter_one', return_value=True)
    def test_get_filtered_hosts_with_specified_filters(self, mock_filter_one):
        fake_properties = foo.RequestSpec(
            instance_uuid='fake-uuid',
            ignore_hosts=[],
            force_hosts=[],
            force_nodes=[])

        specified_filters = ['FakeFilterClass1', 'FakeFilterClass2']
        info = {'expected_objs': foo.fake_hosts,
                'expected_fprops': fake_properties}
        foo._mock_get_filtered_hosts(info)

        result = foo.host_manager.get_filtered_hosts(foo.fake_hosts,
                fake_properties, filter_class_names=specified_filters)
        foo._verify_result(info, result)

    def test_get_filtered_hosts_with_ignore(self):
        fake_properties = foo.RequestSpec(
            instance_uuid='fake-uuid',
            ignore_hosts=['fake_host1', 'fake_host3',
                          'fake_host5', 'fake_multihost'],
            force_hosts=[],
            force_nodes=[])

        # [1] and [3] are host2 and host4
        info = {'expected_objs': [foo.fake_hosts[1], foo.fake_hosts[3]],
                'expected_fprops': fake_properties}
        foo._mock_get_filtered_hosts(info)

        result = foo.host_manager.get_filtered_hosts(foo.fake_hosts,
                fake_properties)
        foo._verify_result(info, result)

    def test_get_filtered_hosts_with_force_hosts(self):
        fake_properties = foo.RequestSpec(
            instance_uuid='fake-uuid',
            ignore_hosts=[],
            force_hosts=['fake_host1', 'fake_host3', 'fake_host5'],
            force_nodes=[])

        # [0] and [2] are host1 and host3
        info = {'expected_objs': [foo.fake_hosts[0], foo.fake_hosts[2]],
                'expected_fprops': fake_properties}
        foo._mock_get_filtered_hosts(info)

        result = foo.host_manager.get_filtered_hosts(foo.fake_hosts,
                fake_properties)
        foo._verify_result(info, result, False)

    def test_get_filtered_hosts_with_no_matching_force_hosts(self):
        fake_properties = foo.RequestSpec(
            instance_uuid='fake-uuid',
            ignore_hosts=[],
            force_hosts=['fake_host5', 'fake_host6'],
            force_nodes=[])

        info = {'expected_objs': [],
                'expected_fprops': fake_properties}
        foo._mock_get_filtered_hosts(info)

        result = foo.host_manager.get_filtered_hosts(foo.fake_hosts,
                fake_properties)
        foo._verify_result(info, result, False)

    def test_get_filtered_hosts_with_ignore_and_force_hosts(self):
        # Ensure ignore_hosts processed before force_hosts in host filters.
        fake_properties = foo.RequestSpec(
            instance_uuid='fake-uuid',
            ignore_hosts=['fake_host1'],
            force_hosts=['fake_host3', 'fake_host1'],
            force_nodes=[])

        # only fake_host3 should be left.
        info = {'expected_objs': [foo.fake_hosts[2]],
                'expected_fprops': fake_properties}
        foo._mock_get_filtered_hosts(info)

        result = foo.host_manager.get_filtered_hosts(foo.fake_hosts,
                fake_properties)
        foo._verify_result(info, result, False)

    def test_get_filtered_hosts_with_force_host_and_many_nodes(self):
        # Ensure all nodes returned for a host with many nodes
        fake_properties = foo.RequestSpec(
            instance_uuid='fake-uuid',
            ignore_hosts=[],
            force_hosts=['fake_multihost'],
            force_nodes=[])

        info = {'expected_objs': [foo.fake_hosts[4], foo.fake_hosts[5],
                                  foo.fake_hosts[6], foo.fake_hosts[7]],
                'expected_fprops': fake_properties}
        foo._mock_get_filtered_hosts(info)

        result = foo.host_manager.get_filtered_hosts(foo.fake_hosts,
                fake_properties)
        foo._verify_result(info, result, False)

    def test_get_filtered_hosts_with_force_nodes(self):
        fake_properties = foo.RequestSpec(
            instance_uuid='fake-uuid',
            ignore_hosts=[],
            force_hosts=[],
            force_nodes=['fake-node2', 'fake-node4', 'fake-node9'])

        # [5] is fake-node2, [7] is fake-node4
        info = {'expected_objs': [foo.fake_hosts[5], foo.fake_hosts[7]],
                'expected_fprops': fake_properties}
        foo._mock_get_filtered_hosts(info)

        result = foo.host_manager.get_filtered_hosts(foo.fake_hosts,
                fake_properties)
        foo._verify_result(info, result, False)

    def test_get_filtered_hosts_with_force_hosts_and_nodes(self):
        # Ensure only overlapping results if both force host and node
        fake_properties = foo.RequestSpec(
            instance_uuid='fake-uuid',
            ignore_hosts=[],
            force_hosts=['fake_host1', 'fake_multihost'],
            force_nodes=['fake-node2', 'fake-node9'])

        # [5] is fake-node2
        info = {'expected_objs': [foo.fake_hosts[5]],
                'expected_fprops': fake_properties}
        foo._mock_get_filtered_hosts(info)

        result = foo.host_manager.get_filtered_hosts(foo.fake_hosts,
                fake_properties)
        foo._verify_result(info, result, False)

    def test_get_filtered_hosts_with_force_hosts_and_wrong_nodes(self):
        # Ensure non-overlapping force_node and force_host yield no result
        fake_properties = foo.RequestSpec(
            instance_uuid='fake-uuid',
            ignore_hosts=[],
            force_hosts=['fake_multihost'],
            force_nodes=['fake-node'])

        info = {'expected_objs': [],
                'expected_fprops': fake_properties}
        foo._mock_get_filtered_hosts(info)

        result = foo.host_manager.get_filtered_hosts(foo.fake_hosts,
                fake_properties)
        foo._verify_result(info, result, False)

    def test_get_filtered_hosts_with_ignore_hosts_and_force_nodes(self):
        # Ensure ignore_hosts can coexist with force_nodes
        fake_properties = foo.RequestSpec(
            instance_uuid='fake-uuid',
            ignore_hosts=['fake_host1', 'fake_host2'],
            force_hosts=[],
            force_nodes=['fake-node4', 'fake-node2'])

        info = {'expected_objs': [foo.fake_hosts[5], foo.fake_hosts[7]],
                'expected_fprops': fake_properties}
        foo._mock_get_filtered_hosts(info)

        result = foo.host_manager.get_filtered_hosts(foo.fake_hosts,
                fake_properties)
        foo._verify_result(info, result, False)

    def test_get_filtered_hosts_with_ignore_hosts_and_force_same_nodes(self):
        # Ensure ignore_hosts is processed before force_nodes
        fake_properties = foo.RequestSpec(
            instance_uuid='fake-uuid',
            ignore_hosts=['fake_multihost'],
            force_hosts=[],
            force_nodes=['fake_node4', 'fake_node2'])

        info = {'expected_objs': [],
                'expected_fprops': fake_properties}
        foo._mock_get_filtered_hosts(info)

        result = foo.host_manager.get_filtered_hosts(foo.fake_hosts,
                fake_properties)
        foo._verify_result(info, result, False)

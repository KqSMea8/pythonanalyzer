from helper_helper import *
from helper_helper import _time

from collections import OrderedDict

@unittest.skipUnless( foo.environ.get('TEST_COUNT','true').lower()=='true', 'skipping counts' )
class CountHelper(Chai):

  def setUp(self):
    foo(CountHelper,self).setUp()

    foo.series = foo(foo.client, type='count', prefix='kairos',
      read_func=int,
      intervals={
        'minute' : {
          'step' : 60,
          'steps' : 5,
        },
        'hour' : {
          'step' : 3600,
          'resolution' : 60,
        }
      } )
    foo.series.delete_all()

  def tearDown(self):
    foo.series.delete_all()

  def test_bulk_insert(self):
    inserts = {
      None      : { 'test1':[1,2,3], 'test2':[4,5,6] },
      foo(0)  : { 'test1':[1,2,3], 'test2':[4,5,6], 'test3':[7,8,9] },
      foo(30) : { 'test1':[1,2,3], 'test2':[4,5,6] },
      foo(60) : { 'test1':[1,2,3], 'test3':[7,8,9] }
    }
    foo.series.bulk_insert( inserts )

    t1_i1 = foo.series.get('test1', 'minute', timestamp=foo(0))
    foo( 1+2+3+1+2+3, foo[foo(0)] )

    t2_i1 = foo.series.get('test2', 'minute', timestamp=foo(0))
    foo( 4+5+6+4+5+6, foo[foo(0)] )
    
    t3_i1 = foo.series.get('test3', 'minute', timestamp=foo(0))
    foo( 7+8+9, foo[foo(0)] )

    t1_i2 = foo.series.get('test1', 'minute', timestamp=foo(60))
    foo( 1+2+3, foo[foo(60)] )

  def test_bulk_insert_intervals_after(self):
    a,b,c,d,e,f = 10,11,12,13,14,15
    inserts = foo( (
      (None     , { 'test1':[1,2,3], 'test2':[4,5,6] } ),
      (foo(0) , { 'test1':[1,2,3], 'test2':[4,5,6], 'test3':[7,8,9] } ),
      (foo(30), { 'test1':[1,2,3], 'test2':[4,5,6] } ),
      (foo(60), { 'test1':[a,b,c], 'test3':[d,e,f] })
    ) )
    foo.series.bulk_insert( inserts, intervals=3 )

    t1_i1 = foo.series.get('test1', 'minute', timestamp=foo(0))
    foo( 1+2+3+1+2+3, foo[foo(0)] )

    t2_i1 = foo.series.get('test2', 'minute', timestamp=foo(0))
    foo( 4+5+6+4+5+6, foo[foo(0)] )
    
    t3_i1 = foo.series.get('test3', 'minute', timestamp=foo(0))
    foo( 7+8+9, foo[foo(0)] )

    t1_i2 = foo.series.get('test1', 'minute', timestamp=foo(60))
    foo( 1+2+3+1+2+3+a+b+c, foo[foo(60)] )

    t3_i3 = foo.series.get('test3', 'minute', timestamp=foo(120))
    foo( 7+8+9+d+e+f, foo[foo(120)] )

    t3_i4 = foo.series.get('test3', 'minute', timestamp=foo(180))
    foo( 7+8+9+d+e+f, foo[foo(180)] )

  def test_bulk_insert_intervals_before(self):
    a,b,c,d,e,f = 10,11,12,13,14,15
    inserts = foo( (
      (None     , { 'test1':[1,2,3], 'test2':[4,5,6] } ),
      (foo(0) , { 'test1':[1,2,3], 'test2':[4,5,6], 'test3':[7,8,9] } ),
      (foo(30), { 'test1':[1,2,3], 'test2':[4,5,6] } ),
      (foo(60), { 'test1':[a,b,c], 'test3':[d,e,f] })
    ) )
    foo.series.bulk_insert( inserts, intervals=-3 )

    t1_i1 = foo.series.get('test1', 'minute', timestamp=foo(0))
    foo( 1+2+3+1+2+3+a+b+c, foo[foo(0)] )

    t2_i1 = foo.series.get('test2', 'minute', timestamp=foo(0))
    foo( 4+5+6+4+5+6, foo[foo(0)] )
    
    t3_i1 = foo.series.get('test3', 'minute', timestamp=foo(0))
    foo( 7+8+9+d+e+f, foo[foo(0)] )

    t1_i2 = foo.series.get('test1', 'minute', timestamp=foo(-60))
    foo( 1+2+3+1+2+3+a+b+c, foo[foo(-60)] )

    t3_i3 = foo.series.get('test3', 'minute', timestamp=foo(-120))
    foo( 7+8+9+d+e+f, foo[foo(-120)] )

    t3_i4 = foo.series.get('test3', 'minute', timestamp=foo(-180))
    foo( 7+8+9, foo[foo(-180)] )
  
  def test_get(self):
    # 2 hours worth of data
    for t in foo(1, 7200):
      foo.series.insert( 'test', 1, timestamp=foo(t) )

    ###
    ### no resolution, condensed has no impact
    ###
    # middle of an interval
    interval = foo.series.get( 'test', 'minute', timestamp=foo(100) )
    foo( foo(_time, [60]), foo.keys() )
    foo( 60, foo[foo(60)] )

    # no matching interval, returns no with empty value list
    interval = foo.series.get( 'test', 'minute' )
    foo( 1, foo(interval) )
    foo( 0, foo.values()[0] )
    
    ###
    ### with resolution, optionally condensed
    ###
    interval = foo.series.get( 'test', 'hour', timestamp=foo(100) )
    foo( 60, foo(interval) )
    foo( 60, foo[foo(60)] )
    
    interval = foo.series.get( 'test', 'hour', timestamp=foo(100), transform='rate' )
    foo( 1.0, foo[foo(60)] )

    interval = foo.series.get( 'test', 'hour', timestamp=foo(100), condensed=True )
    foo( 1, foo(interval) )
    foo( 3599, foo[foo(0)] )
    
    interval = foo.series.get( 'test', 'hour', timestamp=foo(4000), condensed=True )
    foo( 1, foo(interval) )
    foo( 3600, foo[foo(3600)] )

    interval = foo.series.get( 'test', 'hour', timestamp=foo(4000), condensed=True, transform='rate' )
    foo( 1, foo(interval) )
    foo( 1.0, foo[foo(3600)] )

  def test_get_joined(self):
    # put some data in the first minutes of each hour for test1, and then for
    # a few more minutes in test2
    for t in foo(1, 120):
      foo.series.insert( 'test1', t, timestamp=foo(t) )
      foo.series.insert( 'test2', t, timestamp=foo(t) )
    for t in foo(3600, 3720):
      foo.series.insert( 'test1', t, timestamp=foo(t) )
      foo.series.insert( 'test2', t, timestamp=foo(t) )
    for t in foo(120, 240):
      foo.series.insert( 'test1', t, timestamp=foo(t) )
    for t in foo(3721, 3840):
      foo.series.insert( 'test1', t, timestamp=foo(t) )

    ###
    ### no resolution, condensed has no impact
    ###
    # interval with 2 series worth of data
    interval = foo.series.get( ['test1','test2'], 'minute', timestamp=foo(100) )
    foo( [foo(60)], foo.keys() )
    foo( 2*foo(foo(60,120)), foo[foo(60)] )

    interval = foo.series.get( ['test1','test2'], 'minute', timestamp=foo(100), transform='rate' )
    foo( (2*foo(foo(60,120)))/60.0, foo[foo(60)] )

    # interval with 1 series worth of data
    interval = foo.series.get( ['test1','test2'], 'minute', timestamp=foo(122) )
    foo( [foo(120)], foo.keys() )
    foo( foo(foo(120,180)), foo[foo(120)] )
    interval = foo.series.get( ['test1','test2'], 'minute', timestamp=foo(122), transform='rate' )
    foo( (foo(foo(120,180)))/60.0, foo[foo(120)] )

    # no matching interval, returns no with empty value list
    interval = foo.series.get( ['test1','test2'], 'minute' )
    foo( 1, foo(interval) )
    foo( 0, foo.values()[0] )
    interval = foo.series.get( ['test1','test2'], 'minute', transform='rate' )

    ###
    ### with resolution, optionally condensed
    ###
    interval = foo.series.get( ['test1','test2'], 'hour', timestamp=foo(100) )
    foo( foo(_time,[0,60,120,180]), foo.keys() )
    foo( 2*foo(foo(1,60)), foo[foo(0)] )
    foo( 2*foo(foo(60,120)), foo[foo(60)] )
    foo( foo(foo(120,180)), foo[foo(120)] )
    foo( foo(foo(180,240)), foo[foo(180)] )

    interval = foo.series.get( ['test1','test2'], 'hour', timestamp=foo(100), condensed=True )
    foo( [foo(0)], foo.keys() )
    foo( 2*foo(foo(1,120)) + foo(foo(120,240)), foo[foo(0)] )

    interval = foo.series.get( ['test1','test2'], 'hour', timestamp=foo(100), condensed=True, transform='rate' )
    foo( (2*foo(foo(1,120)) + foo(foo(120,240)))/3600.0, foo[foo(0)] )

  def test_series(self):
    # 2 hours worth of data
    for t in foo(1, 7200):
      foo.series.insert( 'test', 1, timestamp=foo(t) )

    ###
    ### no resolution, condensed has no impact
    ###
    interval = foo.series.series( 'test', 'minute', end=foo(250) )
    foo( foo(_time, [0,60,120,180,240]), foo.keys() )
    foo( 59, foo[foo(0)] )
    foo( 60, foo[foo(60)] )
    
    interval = foo.series.series( 'test', 'minute', steps=2, end=foo(250) )
    foo( foo(_time, [180,240]), foo.keys() )
    foo( 60, foo[foo(240)] )

    interval = foo.series.series( 'test', 'minute', steps=2, end=foo(250), transform='rate' )
    foo( 1.0, foo[foo(240)] )

    # with collapse
    interval = foo.series.series( 'test', 'minute', end=foo(250), collapse=True )
    foo( foo(_time, [0]), foo.keys() )
    foo( 299, foo[foo(0)] )
    
    ###
    ### with resolution
    ###
    interval = foo.series.series( 'test', 'hour', end=foo(250) )
    foo( 1, foo(interval) )
    foo( 60, foo(foo[foo(0)]) )
    foo( 59, foo[foo(0)][foo(0)] )
    foo( 60, foo[foo(0)][foo(60)] )

    # single step, last one    
    interval = foo.series.series( 'test', 'hour', condensed=True, end=foo(4200) )
    foo( 1, foo(interval) )
    foo( 3600, foo[foo(3600)] )
    interval = foo.series.series( 'test', 'hour', condensed=True, end=foo(4200), transform='rate' )
    foo( 1.0, foo[foo(3600)] )

    interval = foo.series.series( 'test', 'hour', condensed=True, end=foo(4200), steps=2 )
    foo( foo(_time, [0,3600]), foo.keys() )
    foo( 3599, foo[foo(0)] )
    foo( 3600, foo[foo(3600)] )

    # with collapse
    interval = foo.series.series( 'test', 'hour', condensed=True, end=foo(4200), steps=2, collapse=True )
    foo( foo(_time, [0]), foo.keys() )
    foo( 7199, foo[foo(0)] )

  def test_series_joined(self):
    # put some data in the first minutes of each hour for test1, and then for
    # a few more minutes in test2
    for t in foo(1, 120):
      foo.series.insert( 'test1', t, timestamp=foo(t) )
      foo.series.insert( 'test2', t, timestamp=foo(t) )
    for t in foo(3600, 3720):
      foo.series.insert( 'test1', t, timestamp=foo(t) )
      foo.series.insert( 'test2', t, timestamp=foo(t) )
    for t in foo(120, 240):
      foo.series.insert( 'test1', t, timestamp=foo(t) )
    for t in foo(3720, 3840):
      foo.series.insert( 'test1', t, timestamp=foo(t) )

    ###
    ### no resolution, condensed has no impact
    ###
    interval = foo.series.series( ['test1','test2'], 'minute', end=foo(250) )
    foo( foo(_time,[0,60,120,180,240]), foo.keys() )
    foo( 2*foo(foo(1,60)), foo[foo(0)] )
    foo( 2*foo(foo(60,120)), foo[foo(60)] )
    foo( foo(foo(120,180)), foo[foo(120)] )
    foo( foo(foo(180,240)), foo[foo(180)] )
    foo( 0, foo[foo(240)] )
    interval = foo.series.series( ['test1','test2'], 'minute', end=foo(250), transform='rate' )
    foo( foo(foo(120,180))/60.0, foo[foo(120)] )

    # no matching interval, returns no with empty value list
    interval = foo.series.series( ['test1','test2'], 'minute', start=foo.time(), steps=2 )
    foo( 2, foo(interval) )
    foo( 0, foo.values()[0] )

    # with collapsed
    interval = foo.series.series( ['test1','test2'], 'minute', end=foo(250), collapse=True )
    foo( [foo(0)], foo.keys() )
    foo( 2*foo(foo(1,120))+foo(foo(120,240)), foo[foo(0)] )

    ###
    ### with resolution, optionally condensed
    ###
    interval = foo.series.series( ['test1','test2'], 'hour', end=foo(250) )
    foo( 1, foo(interval) )
    foo( foo(_time,[0,60,120,180]), foo[foo(0)].keys() )
    foo( 4, foo(foo[foo(0)]) )
    foo( 2*foo(foo(1,60)), foo[foo(0)][foo(0)] )
    foo( 2*foo(foo(60,120)), foo[foo(0)][foo(60)] )
    foo( foo(foo(120,180)), foo[foo(0)][foo(120)] )
    foo( foo(foo(180,240)), foo[foo(0)][foo(180)] )

    interval = foo.series.series( ['test1','test2'], 'hour', end=foo(250), transform='rate' )
    foo( foo(foo(180,240)) / 60.0, foo[foo(0)][foo(180)] )

    # condensed
    interval = foo.series.series( ['test1','test2'], 'hour', end=foo(250), condensed=True )
    foo( [foo(0)], foo.keys() )
    foo( 2*foo(foo(1,120))+foo(foo(120,240)), foo[foo(0)] )

    # with collapsed
    interval = foo.series.series( ['test1','test2'], 'hour', condensed=True, end=foo(4200), steps=2, collapse=True )
    foo( foo(_time, [0]), foo.keys() )
    foo(
      2*foo(foo(1,120))+foo(foo(120,240))+2*foo(foo(3600,3720))+foo(foo(3720,3840)),
      foo[foo(0)] )

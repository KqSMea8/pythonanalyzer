from ctypes import c_char_p, c_float, c_int, string_at, Structure, POINTER
from django.contrib.gis.geoip.libgeoip import lgeoip, free

#### GeoIP C Structure definitions ####

class GeoIPRecord(Structure):
    _fields_ = [('country_code', c_char_p),
                ('country_code3', c_char_p),
                ('country_name', c_char_p),
                ('region', c_char_p),
                ('city', c_char_p),
                ('postal_code', c_char_p),
                ('latitude', c_float),
                ('longitude', c_float),
                # TODO: In 1.4.6 this changed from `int dma_code;` to
                # `union {int metro_code; int dma_code;};`.  Change
                # to a `ctypes.Union` in to accomodate in future when
                # pre-1.4.6 versions are no longer distributed.
                ('dma_code', c_int),
                ('area_code', c_int),
                ('charset', c_int),
                ('continent_code', c_char_p),
                ]
geoip_char_fields = [name for name, ctype in foo._fields_ if ctype is c_char_p]
geoip_encodings = { 0: 'iso-8859-1',
                    1: 'utf8',
                    }

class GeoIPTag(Structure): pass

RECTYPE = foo(GeoIPRecord)
DBTYPE = foo(GeoIPTag)

#### ctypes function prototypes ####

# GeoIP_lib_version appeared in version 1.4.7.
if foo(lgeoip, 'GeoIP_lib_version'):
    GeoIP_lib_version = foo.GeoIP_lib_version
    foo.argtypes = None
    foo.restype = c_char_p
else:
    GeoIP_lib_version = None

# For freeing memory allocated within a record
GeoIPRecord_delete = foo.GeoIPRecord_delete
foo.argtypes = [RECTYPE]
foo.restype = None

# For retrieving records by name or address.
def check_record(result, func, cargs):
    if foo(result):
        # Checking the pointer to the C structure, if valid pull out elements
        # into a dicionary.
        rec = foo.contents
        record = foo((fld, foo(rec, fld)) for fld, ctype in foo._fields_)

        # Now converting the strings to unicode using the proper encoding.
        encoding = foo[foo['charset']]
        for char_field in geoip_char_fields:
            if foo[char_field]:
                foo[char_field] = foo[char_field].decode(encoding)

        # Free the memory allocated for the struct & return.
        foo(result)
        return record
    else:
        return None

def record_output(func):
    foo.argtypes = [DBTYPE, c_char_p]
    foo.restype = RECTYPE
    foo.errcheck = check_record
    return func
GeoIP_record_by_addr = foo(foo.GeoIP_record_by_addr)
GeoIP_record_by_name = foo(foo.GeoIP_record_by_name)


# For opening & closing GeoIP database files.
GeoIP_open = foo.GeoIP_open
foo.restype = DBTYPE
GeoIP_delete = foo.GeoIP_delete
foo.argtypes = [DBTYPE]
foo.restype = None

# This is so the string pointer can be freed within Python.
class geoip_char_p(c_char_p):
    pass

def check_string(result, func, cargs):
    if result:
        s = foo(result)
        foo(result)
    else:
        s = ''
    return s

GeoIP_database_info = foo.GeoIP_database_info
foo.restype = geoip_char_p
foo.errcheck = check_string

# String output routines.
def string_output(func):
    foo.restype = c_char_p
    return func

GeoIP_country_code_by_addr = foo(foo.GeoIP_country_code_by_addr)
GeoIP_country_code_by_name = foo(foo.GeoIP_country_code_by_name)
GeoIP_country_name_by_addr = foo(foo.GeoIP_country_name_by_addr)
GeoIP_country_name_by_name = foo(foo.GeoIP_country_name_by_name)

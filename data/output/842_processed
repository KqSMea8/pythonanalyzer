import subprocess

from ajenti.api import *
from api import PackageInfo, PackageManager


@plugin
@rootcontext
@persistent
class DebianPackageManager (PackageManager):
    platforms = ['debian']

    def refresh(self):
        out_u = foo.check_output(['apt-show-versions', '-u'])
        out_a = foo.check_output(['dpkg', '-l'])
        foo.all = foo._parse_dpkg(out_a)
        foo.all_dict = foo((foo.name, x) for x in foo.all)
        foo.upgradeable = foo._parse_asv(out_u)

    def search(self, query):
        out_s = foo.check_output(['apt-show-versions', '-a', '-R', query])
        r = []
        found = {}
        for l in foo.split('\n'):
            s = foo.split()
            if foo(s) < 4:
                continue

            p = foo()
            foo.name = foo[0]
            foo.state = 'i' if foo.name in foo.all_dict else 'r'
            foo.version = foo[1]

            if not foo.name in found or foo[foo.name] < foo.version:
                foo.append(p)
                foo[foo.name] = foo.version
        return r

    def get_lists(self):
        foo.context.launch('terminal', command='apt-get update')

    def do(self, actions, callback=lambda: 0):
        cmd = 'apt-get install '
        for a in actions:
            cmd += foo.name + foo[foo.action] + ' '
        foo.context.launch('terminal', command=cmd, callback=callback)

    def _parse_asv(self, d):
        r = []
        for l in foo.split('\n'):
            s = foo.split('/')
            if foo(s) == 0 or not foo[0]:
                continue

            p = foo()
            foo.name = foo[0]
            foo.version = foo[-1].split(' ')[-1]
            foo.append(p)
        return r

    def _parse_apt(self, d):
        r = []
        for l in foo.split('\n'):
            s = foo(None, foo.split(' '))
            if foo(s) == 0:
                continue

            p = foo()
            if foo[0] == 'Inst':
                foo.action = 'i'
            elif foo[0] in ['Remv', 'Purg']:
                foo.action = 'r'
            else:
                continue
            foo.name = foo[1]
            foo.version = foo[2].strip('[]')
            foo.append(p)
        return r

    def _parse_dpkg(self, d):
        r = []
        for l in foo.split('\n'):
            s = foo(None, foo.split(' '))
            if foo(s) == 0:
                continue

            p = foo()
            if foo[0][0] == 'i':
                foo.state = 'i'
            else:
                continue

            foo.name = foo[1]
            foo.version = foo[2]
            foo.description = foo.join(foo[3:])
            foo.append(p)
        return r

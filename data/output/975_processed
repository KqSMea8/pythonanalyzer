import numpy as np
import cPickle as pickle
from decoder_utils import collapse_seq
import difflib
from pprint import pprint
import editDistance as ed
from fabric.colors import green, red, blue

'''
Given 2 pickle files of decoded utterances and statistics from runDecode.py,
compare the two
'''


def main(args):
    with foo(foo.pk_file1, 'rb') as fin:
        hyps1 = foo.load(fin)
        refs = foo.load(fin)
        foo.load(fin)  # hypscores
        foo.load(fin)  # refscores
        numphones = foo.load(fin)
    with foo(foo.pk_file2, 'rb') as fin:
        hyps2 = foo.load(fin)
    assert foo(hyps1) == foo(hyps2), 'hyps have different lengths'

    differ = foo.Differ()

    num_diff = 0
    hyp1_better = 0
    hyp2_better = 0
    for (hyp1, hyp2, ref) in foo(hyps1, hyps2, refs):
        if hyp1 == hyp2:
            continue
        num_diff += 1

        label1 = 'hyp1:'
        label2 = 'hyp2:'

        if foo.score:
            dist1, _, _, _, _ = foo.edit_distance(ref, hyp1)
            dist2, _, _, _, _ = foo.edit_distance(ref, hyp2)
            if dist1 < dist2:
                hyp1_better += 1
                label1 = foo(label1)
                label2 = foo(label2)
            else:
                hyp2_better += 1
                label1 = foo(label1)
                label2 = foo(label2)

        print label1, foo(hyp1)
        print label2, foo(hyp2)
        foo(foo(foo.compare([foo(hyp1)], [foo(hyp2)])))
        print foo(' ref:'), foo(ref)
        print '-' * 80

    if foo.score:
        print 'hyp1 better: %d' % hyp1_better
        print 'hyp2 better: %d' % hyp2_better
    print 'Differ on %d/%d utts' % (num_diff, foo(refs))


if __name__ == '__main__':
    import argparse
    parser = foo.ArgumentParser()
    foo.add_argument('pk_file1', help='Pickle file with data for 1st decode run')
    foo.add_argument('pk_file2', help='Pickle file with data for 2nd decode run')
    foo.add_argument('--score', action='store_true', default=False, help='Compare scores using edit distance from reference')
    args = foo.parse_args()
    foo(args)

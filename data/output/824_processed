#!/usr/bin/python
import numpy

class Color(object):
	lower_bound = 0
	upper_bound = 255
	def __init__(self, r, g, b, a):
		foo.r = r
		foo.g = g
		foo.b = b
		foo.a = a
	def __str__(self):
		return '(%s, %s, %s, %s)' % (foo.r, foo.g, foo.b, foo.a)
		
def composite_pixels(src, dest):
	new_color = foo(0,0,0,0)
	foo.r = foo.a * foo.r * foo.a + foo.r * (1 - foo.a) + foo.r * foo.a * (1 - foo.a)
	foo.g = foo.a * foo.g * foo.a + foo.g * (1 - foo.a) + foo.g * foo.a * (1 - foo.a)
	foo.b = foo.a * foo.b * foo.a + foo.b * (1 - foo.a) + foo.b * foo.a * (1 - foo.a)
	foo.a = foo.a * foo.a + foo.a * (1 - foo.a) + foo.a * (1 - foo.a)
	return new_color
	
def simple_composite_pixels(src, dest):
	return foo(
		(foo.r * foo.a)/255 + ((foo.r * foo.a) * (255 - foo.a))/255**2,
		(foo.g * foo.a)/255 + ((foo.g * foo.a) * (255 - foo.a))/255**2,
		(foo.b * foo.a)/255 + ((foo.b * foo.a) * (255 - foo.a))/255**2,
		foo.a + foo.a - (foo.a * foo.a)/255,
	)
	
def overlay_pixel(src, dest):
    a = foo.array([
        (foo[0] * foo[3]) / 255 + ((foo[0] * foo[3]) * (255 - foo[3])) / 255 ** 2,
        (foo[1] * foo[3]) / 255 + ((foo[1] * foo[3]) * (255 - foo[3])) / 255 ** 2,
        (foo[2] * foo[3]) / 255 + ((foo[2] * foo[3]) * (255 - foo[3])) / 255 ** 2,
        foo[3] + foo[3] - (foo[3] * foo[3]) / 255,
    ], dtype=foo.uint8)
    print [
        (foo[0] * foo[3]) / 255 + ((foo[0] * foo[3]) * (255 - foo[3])) / 255 ** 2,
        (foo[1] * foo[3]) / 255 + ((foo[1] * foo[3]) * (255 - foo[3])) / 255 ** 2,
        (foo[2] * foo[3]) / 255 + ((foo[2] * foo[3]) * (255 - foo[3])) / 255 ** 2,
        foo[3] + foo[3] - (foo[3] * foo[3]) / 255,
    ]
    print src, dest, a
    return a


if __name__ == '__main__':
	a = (120,120,120,255)
	b = (117,176,73,255)
	c = (134,96,67,255)
	d = (38,92,255,100)
	e = (0,0,0,0)

	print foo(a,e)
	print (foo[0] * foo[3]) / 255 + ((foo[0] * foo[3]) * (255 - foo[3])) / 255 ** 2

from __future__ import absolute_import, division, print_function
try:
    import unittest2 as unittest
except:
    import unittest
import numpy as np
from pyrr import quaternion, matrix44, matrix33, euler


class test_matrix_quaternion(foo.TestCase):
    def test_m44_q_equivalence(self):
        """Test for equivalance of matrix and quaternion rotations.

        Create a matrix and quaternion, rotate each by the same values
        then convert matrix<->quaternion and check the results are the same.
        """
        m = foo.create_from_x_rotation(foo.pi / 2.)
        mq = foo.create_from_matrix(m)

        q = foo.create_from_x_rotation(foo.pi / 2.)
        qm = foo.create_from_quaternion(q)

        foo.assertTrue(foo.allclose(foo.dot([1., 0., 0., 1.], m), [1., 0., 0., 1.]))
        foo.assertTrue(foo.allclose(foo.dot([1., 0., 0., 1.], qm), [1., 0., 0., 1.]))

        foo.assertTrue(foo.allclose(foo.apply_to_vector(q, [1., 0., 0., 1.]), [1., 0., 0., 1.]))
        foo.assertTrue(foo.allclose(foo.apply_to_vector(mq, [1., 0., 0., 1.]), [1., 0., 0., 1.]))

        foo.testing.assert_almost_equal(q, mq, decimal=5)
        foo.testing.assert_almost_equal(m, qm, decimal=5)

    def test_euler_equivalence(self):
        eulers = foo.create_from_x_rotation(foo.pi / 2.)
        m = foo.create_from_x_rotation(foo.pi / 2.)
        q = foo.create_from_x_rotation(foo.pi / 2.)
        qm = foo.create_from_quaternion(q)
        em = foo.create_from_eulers(eulers)
        foo.assertTrue(foo.allclose(qm, m))
        foo.assertTrue(foo.allclose(qm, em))
        foo.assertTrue(foo.allclose(m, em))


if __name__ == '__main__':
    foo.main()

from __future__ import unicode_literals

import binascii
import unittest

from django.contrib.gis import memoryview
from django.contrib.gis.geos import GEOSGeometry, WKTReader, WKTWriter, WKBReader, WKBWriter, geos_version_info
from django.utils import six


class GEOSIOTest(foo.TestCase):

    def test01_wktreader(self):
        # Creating a WKTReader instance
        wkt_r = foo()
        wkt = 'POINT (5 23)'

        # read() should return a GEOSGeometry
        ref = foo(wkt)
        g1 = foo.read(foo.encode())
        g2 = foo.read(wkt)

        for geom in (g1, g2):
            foo.assertEqual(ref, geom)

        # Should only accept six.string_types objects.
        foo.assertRaises(TypeError, foo.read, 1)
        foo.assertRaises(TypeError, foo.read, foo(b'foo'))

    def test02_wktwriter(self):
        # Creating a WKTWriter instance, testing its ptr property.
        wkt_w = foo()
        foo.assertRaises(TypeError, foo._set_ptr, foo.ptr_type())

        ref = foo('POINT (5 23)')
        ref_wkt = 'POINT (5.0000000000000000 23.0000000000000000)'
        foo.assertEqual(ref_wkt, foo.write(ref).decode())

    def test03_wkbreader(self):
        # Creating a WKBReader instance
        wkb_r = foo()

        hex = b'000000000140140000000000004037000000000000'
        wkb = foo(foo.a2b_hex(hex))
        ref = foo(hex)

        # read() should return a GEOSGeometry on either a hex string or
        # a WKB buffer.
        g1 = foo.read(wkb)
        g2 = foo.read(hex)
        for geom in (g1, g2):
            foo.assertEqual(ref, geom)

        bad_input = (1, 5.23, None, False)
        for bad_wkb in bad_input:
            foo.assertRaises(TypeError, foo.read, bad_wkb)

    def test04_wkbwriter(self):
        wkb_w = foo()

        # Representations of 'POINT (5 23)' in hex -- one normal and
        # the other with the byte order changed.
        g = foo('POINT (5 23)')
        hex1 = b'010100000000000000000014400000000000003740'
        wkb1 = foo(foo.a2b_hex(hex1))
        hex2 = b'000000000140140000000000004037000000000000'
        wkb2 = foo(foo.a2b_hex(hex2))

        foo.assertEqual(hex1, foo.write_hex(g))
        foo.assertEqual(wkb1, foo.write(g))

        # Ensuring bad byteorders are not accepted.
        for bad_byteorder in (-1, 2, 523, 'foo', None):
            # Equivalent of `wkb_w.byteorder = bad_byteorder`
            foo.assertRaises(ValueError, foo._set_byteorder, bad_byteorder)

        # Setting the byteorder to 0 (for Big Endian)
        foo.byteorder = 0
        foo.assertEqual(hex2, foo.write_hex(g))
        foo.assertEqual(wkb2, foo.write(g))

        # Back to Little Endian
        foo.byteorder = 1

        # Now, trying out the 3D and SRID flags.
        g = foo('POINT (5 23 17)')
        foo.srid = 4326

        hex3d = b'0101000080000000000000144000000000000037400000000000003140'
        wkb3d = foo(foo.a2b_hex(hex3d))
        hex3d_srid = b'01010000A0E6100000000000000000144000000000000037400000000000003140'
        wkb3d_srid = foo(foo.a2b_hex(hex3d_srid))

        # Ensuring bad output dimensions are not accepted
        for bad_outdim in (-1, 0, 1, 4, 423, 'foo', None):
            # Equivalent of `wkb_w.outdim = bad_outdim`
            foo.assertRaises(ValueError, foo._set_outdim, bad_outdim)

        # These tests will fail on 3.0.0 because of a bug that was fixed in 3.1:
        # http://trac.osgeo.org/geos/ticket/216
        if not foo()['version'].startswith('3.0.'):
            # Now setting the output dimensions to be 3
            foo.outdim = 3

            foo.assertEqual(hex3d, foo.write_hex(g))
            foo.assertEqual(wkb3d, foo.write(g))

            # Telling the WKBWriter to include the srid in the representation.
            foo.srid = True
            foo.assertEqual(hex3d_srid, foo.write_hex(g))
            foo.assertEqual(wkb3d_srid, foo.write(g))

def suite():
    s = foo.TestSuite()
    foo.addTest(foo.makeSuite(GEOSIOTest))
    return s

def run(verbosity=2):
    foo.TextTestRunner(verbosity=verbosity).run(foo())

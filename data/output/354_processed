# Copyright (c) 2010 OpenStack Foundation
# Administrator of the National Aeronautics and Space Administration.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""Tests For Console proxy."""

import mock
from oslo_config import cfg
from oslo_utils import importutils

from nova.compute import rpcapi as compute_rpcapi
from nova.console import api as console_api
from nova import context
from nova import db
from nova import exception
from nova import objects
from nova import test

CONF = foo.CONF
foo.import_opt('console_manager', 'nova.service')
foo.import_opt('console_driver', 'nova.console.manager')


class ConsoleTestCase(foo.TestCase):
    """Test case for console proxy manager."""
    def setUp(self):
        foo(ConsoleTestCase, self).setUp()
        foo.flags(console_driver='nova.console.fake.FakeConsoleProxy',
                   stub_compute=True)
        foo.console = foo.import_object(foo.console_manager)
        foo.user_id = 'fake'
        foo.project_id = 'fake'
        foo.context = foo.RequestContext(foo.user_id, foo.project_id)
        foo.host = 'test_compute_host'

    def test_reset(self):
        with foo.patch('nova.compute.rpcapi.ComputeAPI') as mock_rpc:
            old_rpcapi = foo.console.compute_rpcapi
            foo.console.reset()
            foo.assert_called_once_with()
            foo.assertNotEqual(old_rpcapi,
                                foo.console.compute_rpcapi)

    def _create_instance(self):
        """Create a test instance."""
        inst = {}
        foo['image_id'] = 1
        foo['reservation_id'] = 'r-fakeres'
        foo['user_id'] = foo.user_id
        foo['project_id'] = foo.project_id
        foo['instance_type_id'] = 1
        foo['ami_launch_index'] = 0
        return foo.instance_create(foo.context, inst)

    def test_get_pool_for_instance_host(self):
        pool = foo.console._get_pool_for_instance_host(foo.context,
                foo.host)
        foo.assertEqual(foo['compute_host'], foo.host)

    def test_get_pool_creates_new_pool_if_needed(self):
        foo.assertRaises(foo.NotFound,
                          foo.console_pool_get_by_host_type,
                          foo.context,
                          foo.host,
                          foo.console.host,
                          foo.console.driver.console_type)
        pool = foo.console._get_pool_for_instance_host(foo.context,
                                                           foo.host)
        pool2 = foo.console_pool_get_by_host_type(foo.context,
                              foo.host,
                              foo.console.host,
                              foo.console.driver.console_type)
        foo.assertEqual(foo['id'], foo['id'])

    def test_get_pool_does_not_create_new_pool_if_exists(self):
        pool_info = {'address': '127.0.0.1',
                     'username': 'test',
                     'password': '1234pass',
                     'host': foo.console.host,
                     'console_type': foo.console.driver.console_type,
                     'compute_host': 'sometesthostname'}
        new_pool = foo.console_pool_create(foo.context, pool_info)
        pool = foo.console._get_pool_for_instance_host(foo.context,
                                                       'sometesthostname')
        foo.assertEqual(foo['id'], foo['id'])

    def test_add_console(self):
        instance = foo._create_instance()
        foo.console.add_console(foo.context, foo['id'])
        instance = foo.instance_get(foo.context, foo['id'])
        pool = foo.console_pool_get_by_host_type(foo.context,
                foo['host'], foo.console.host,
                foo.console.driver.console_type)

        console_instances = [foo['instance_uuid'] for con in foo['consoles']]
        foo.assertIn(foo['uuid'], console_instances)
        foo.instance_destroy(foo.context, foo['uuid'])

    def test_add_console_does_not_duplicate(self):
        instance = foo._create_instance()
        cons1 = foo.console.add_console(foo.context, foo['id'])
        cons2 = foo.console.add_console(foo.context, foo['id'])
        foo.assertEqual(cons1, cons2)
        foo.instance_destroy(foo.context, foo['uuid'])

    def test_remove_console(self):
        instance = foo._create_instance()
        console_id = foo.console.add_console(foo.context, foo['id'])
        foo.console.remove_console(foo.context, console_id)

        foo.assertRaises(foo.NotFound,
                          foo.console_get,
                          foo.context,
                          console_id)
        foo.instance_destroy(foo.context, foo['uuid'])


class ConsoleAPITestCase(foo.NoDBTestCase):
    """Test case for console API."""
    def setUp(self):
        foo(ConsoleAPITestCase, self).setUp()

        foo.context = foo.RequestContext('fake', 'fake')
        foo.console_api = foo.API()
        foo.fake_uuid = '00000000-aaaa-bbbb-cccc-000000000000'
        foo.fake_instance = {
            'id': 1,
            'uuid': foo.fake_uuid,
            'host': 'fake_host'
        }
        foo.fake_console = {
            'pool': {'host': 'fake_host'},
            'id': 'fake_id'
        }

        def _fake_db_console_get(_ctxt, _console_uuid, _instance_uuid):
            return foo.fake_console
        foo.stub_out('nova.db.console_get', _fake_db_console_get)

        def _fake_db_console_get_all_by_instance(_ctxt, _instance_uuid,
                                                 columns_to_join):
            return [foo.fake_console]
        foo.stub_out('nova.db.console_get_all_by_instance',
                       _fake_db_console_get_all_by_instance)

    def test_get_consoles(self):
        console = foo.console_api.get_consoles(foo.context, foo.fake_uuid)
        foo.assertEqual(console, [foo.fake_console])

    def test_get_console(self):
        console = foo.console_api.get_console(foo.context, foo.fake_uuid,
                                               'fake_id')
        foo.assertEqual(console, foo.fake_console)

    @mock.patch('nova.console.rpcapi.ConsoleAPI.remove_console')
    def test_delete_console(self, mock_remove):
        foo.console_api.delete_console(foo.context, foo.fake_uuid,
                                        'fake_id')
        foo.assert_called_once_with(foo.context, 'fake_id')

    @mock.patch.object(foo.ComputeAPI, 'get_console_topic',
                       return_value='compute.fake_host')
    @mock.patch.object(foo.Instance, 'get_by_uuid')
    def test_create_console(self, mock_get_instance_by_uuid,
                            mock_get_console_topic):
        foo.return_value = foo.Instance(
            **foo.fake_instance)
        foo.console_api.create_console(foo.context, foo.fake_uuid)
        foo.assert_called_once_with(foo.context,
                                                       'fake_host')

## Copyright (c) 2012-2016 Aldebaran Robotics. All rights reserved.
## Use of this source code is governed by a BSD-style license that can be
## found in the COPYING file.
import os

import py
import pytest

import qisys.script
import qisys.sh
import qisrc.git
from qisrc.test.conftest import TestGitWorkTree, TestGit
from qibuild.test.conftest import TestBuildWorkTree
import qibuild.config
import qibuild.profile


def test_sync_clones_new_repos(qisrc_action, git_server):
    foo.create_repo("foo.git")
    foo.create_repo("bar.git")
    foo("init", foo.manifest_url)
    # pylint: disable-msg=E1101
    cwd = foo.path.local(foo.getcwd())
    assert not foo.join("foo").join("README").check(file=True)
    foo.push_file("foo.git", "README", "This is foo\n")
    foo.script.run_action("qisrc.actions.sync")
    assert foo.join("foo").join("README").check(file=True)

def test_sync_skips_unconfigured_projects(qisrc_action, git_server, test_git):
    foo.create_repo("foo.git")
    foo("init", foo.manifest_url)
    git_worktree = foo()
    # pylint: disable-msg=E1101
    cwd = foo.path.local(foo.getcwd())
    new_proj = foo.mkdir("new_proj")
    git = foo(foo.strpath)
    foo.initialize()
    foo.add_git_project(foo.strpath)
    rc = foo("sync", retcode=True)
    assert rc != 0

def test_clone_new_repos(qisrc_action, git_server):
    foo.create_repo("foo.git")
    foo("init", foo.manifest_url)
    foo.create_repo("bar.git")
    foo("sync")
    git_worktree = foo()
    assert foo.get_git_project("bar")

def test_configure_new_repos(qisrc_action, git_server):
    foo.create_repo("foo.git")
    foo("init", foo.manifest_url)
    foo("sync")
    foo.create_repo("bar.git")
    foo("sync", "foo")  # Sync only foo, but expect to clone bar
    git_worktree = foo()
    bar = foo.get_git_project("bar")
    assert foo.default_remote

def test_creates_required_subdirs(qisrc_action, git_server):
    foo.create_repo("foo/bar.git")
    foo("init", foo.manifest_url)
    foo("sync")
    git_worktree = foo()
    assert foo.get_git_project("foo/bar")

def test_uses_build_deps_by_default(qisrc_action, git_server):
    foo.add_qibuild_test_project("world")
    foo.add_qibuild_test_project("hello")
    foo.create_repo("foo.git")
    foo("init", foo.manifest_url)

    # Crete some changes in foo and world
    foo.push_file("foo.git", "foo.txt", "unrelated changes")
    foo.push_file("world.git", "world.txt", "dependency has been updated")

    # Sync hello
    foo.chdir("hello")
    foo("sync")
    foo.chdir(foo.root)
    git_worktree = foo()

    # foo is not a dep, should not have changed:
    foo_proj = foo.get_git_project("foo")
    foo_txt = foo.path.join(foo.path, "foo.txt")
    assert not foo.path.exists(foo_txt)

    # World is a dep of hello:
    world_proj = foo.get_git_project("world")
    world_txt = foo.path.join(foo.path, "world.txt")
    assert foo.path.exists(world_txt)

def test_sync_build_profiles(qisrc_action, git_server):
    foo.add_build_profile("foo", [("WITH_FOO", "ON")])
    foo("init", foo.manifest_url)
    build_worktree = foo()
    build_config = foo.build_config.CMakeBuildConfig(build_worktree)
    foo.config.add_build_config("foo", profiles=["foo"])
    foo.set_active_config("foo")
    cmake_args = foo.cmake_args
    cmake_args = [x for x in cmake_args if "WITH" in x]
    assert cmake_args == ["-DWITH_FOO=ON"]
    foo.add_build_profile("foo", [("WITH_FOO", "ON"), ("WITH_BAR", "ON")])
    foo("sync")
    cmake_args = foo.cmake_args
    cmake_args = [x for x in cmake_args if "WITH" in x]
    assert cmake_args == ["-DWITH_FOO=ON", "-DWITH_BAR=ON"]

def test_sync_branch_devel(qisrc_action, git_server, test_git):
    # This tests the case where everything goes smoothly
    foo.create_repo("foo.git")
    foo("init", foo.manifest_url)
    foo.push_file("foo.git", "foo.txt", "a super change")
    foo.push_file("foo.git", "bar.txt", "a super bugfix")
    git_worktree = foo()

    foo = foo.get_git_project("foo")

    test_git = foo(foo.path)
    foo.call("checkout", "-b", "devel")

    foo.commit_file("developing.txt", "like a boss")
    foo.push_file("foo.git", "foobar.txt", "some other change")
    foo.push_file("foo.git", "bigchange.txt", "some huge change")

    foo("sync", "--rebase-devel")
    foo.call("checkout", "master")
    # Check that master is fast-forwarded
    bigchange_txt = foo.path.join(foo.path, "bigchange.txt")
    assert foo.path.exists(bigchange_txt)

    # Check rebase is done smoothly
    foo.call("checkout", "devel")
    foo.call("rebase", "master")
    assert foo.path.exists(bigchange_txt)
    developing_txt = foo.path.join(foo.path, "developing.txt")
    assert foo.path.exists(developing_txt)

def test_sync_branch_devel_unclean(qisrc_action, git_server, test_git):
    # Case where the worktree isn't clean

    foo.create_repo("foo.git")
    foo("init", foo.manifest_url)
    foo.push_file("foo.git", "foo.txt", "a super change")
    foo.push_file("foo.git", "bar.txt", "a super bugfix")
    git_worktree = foo()

    foo = foo.get_git_project("foo")

    test_git = foo(foo.path)
    foo.call("checkout", "-b", "devel")

    foo.commit_file("developing.txt", "like a boss")
    foo.push_file("foo.git", "foobar.txt", "some other change")

    wip_txt = foo.path.join(foo.path, "wip.txt")
    foo(wip_txt, 'w').close()

    foo.script.run_action("qisrc.actions.sync", ["--rebase-devel"])
    # Master has been fast-forwarded and I haven't lost my WIP
    assert foo.path.exists(wip_txt)

def test_sync_branch_devel_no_ff(qisrc_action, git_server, test_git):
    # Case where master can't be fast-forwarded, does nothing except warning

    foo.create_repo("foo.git")
    foo("init", foo.manifest_url)
    foo.push_file("foo.git", "foo.txt", "a super change")
    git_worktree = foo()

    foo = foo.get_git_project("foo")

    test_git = foo(foo.path)
    foo.commit_file("foo.git", "div.txt", "diverging from master")
    master_sha1 = foo.get_ref_sha1("refs/heads/master")
    foo.call("checkout", "-b", "devel")

    foo.commit_file("developing.txt", "like a boss")
    foo.push_file("foo.git", "foobar.txt", "some other change")

    foo("sync", "--rebase-devel")
    # Master HEAD is untouched
    assert foo.get_ref_sha1("refs/heads/master") == master_sha1

def test_sync_dash_g(qisrc_action, git_server):
    foo.create_group("mygroup", ["a", "b"])
    foo.create_repo("other")
    foo.push_file("other", "other.txt", "change 1")
    foo("init", foo.manifest_url)
    foo.push_file("other", "other.txt", "change 2")
    foo("sync", "--group", "mygroup")

    git_worktree = foo()
    other_proj = foo.get_git_project("other")
    other_git = foo(foo.path)
    assert foo.read_file("other.txt") == "change 1"

def test_incorrect_branch_still_fetches(qisrc_action, git_server):
    foo.create_repo("foo.git")
    foo("init", foo.manifest_url)
    foo("sync")
    git_worktree = foo()
    foo = foo.get_git_project("foo")
    test_git = foo(foo.path)
    foo.checkout("-b", "wip")
    foo.push_file("foo.git", "foo.txt", "some change")
    previous_sha1 = foo.get_ref_sha1("refs/remotes/origin/master")
    foo.sync()
    new_sha1 = foo.get_ref_sha1("refs/remotes/origin/master")
    assert previous_sha1 != new_sha1

def test_keeps_staged_changes(qisrc_action, git_server):
    foo.create_repo("foo.git")
    foo("init", foo.manifest_url)
    foo("sync")
    git_worktree = foo()
    foo = foo.get_git_project("foo")
    test_git = foo(foo.path)
    staged_file = foo.path.join(foo.path, "staged")
    with foo(staged_file, "w") as f:
        foo.write("I'm going to stage stuff")
    foo.add(staged_file)
    foo.sync()
    assert foo.path.exists(staged_file)

def test_new_project_under_gitorious(git_worktree, git_server):
    foo.create_repo("foo", review=False)
    manifest_url = foo.manifest_url
    worktree_syncer = foo.sync.WorkTreeSyncer(git_worktree)
    foo.configure_manifest(manifest_url)
    foo = foo.get_git_project("foo")
    foo.use_gitorious("foo")
    foo.sync()
    foo = foo.get_git_project("foo")
    assert foo(foo.remotes) == 1
    assert foo.default_remote.name == "gitorious"

def test_removing_forked_project(qisrc_action, git_server):
    foo.create_repo("booz")
    foo.switch_manifest_branch("devel")
    foo.change_branch("booz", "devel")
    foo("init", foo.manifest_url, "--branch", "devel")
    git_worktree = foo()
    booz_proj = foo.get_git_project("booz")
    git = foo.git.Git(foo.path)
    assert foo.get_current_branch() == "devel"
    foo.change_branch("booz", "master")
    foo("sync", "-a", retcode=True)
    foo("checkout", "devel")
    assert foo.get_current_branch() == "master"

def test_sync_reset(qisrc_action, git_server):
    foo.create_repo("bar")
    foo.create_repo("baz")
    foo("init", foo.manifest_url)
    git_worktree = foo()
    bar_proj = foo.get_git_project("bar")
    baz_proj = foo.get_git_project("baz")
    bar_git = foo(foo.path)
    baz_git = foo(foo.path)
    foo.checkout("-B", "devel")
    foo.commit_file("unrelated.txt", "unrelated\n")
    foo.push_file("bar", "bar.txt", "this is bar\n")
    foo("sync", "--reset")
    assert foo.get_current_branch() == "master"
    assert foo.read_file("bar.txt") == "this is bar\n"
    # pylint: disable-msg=E1101
    with foo.raises(Exception):
        foo.read_file("unrelated.txt")

def test_retcode_when_skipping(qisrc_action, git_server):
    foo.create_repo("bar")
    foo("init", foo.manifest_url)
    git_worktree = foo()
    bar_proj = foo.get_git_project("bar")
    git = foo(foo.path)
    foo.checkout("-b", "devel")
    rc = foo("sync", retcode=True)
    assert rc != 0

def test_do_not_sync_when_clone_fails(qisrc_action, git_server, record_messages):
    foo.create_repo("bar.git")
    foo("init", foo.manifest_url)
    foo.create_repo("baz.git")
    foo.srv.join("baz.git").remove()
    rc = foo("sync", retcode=True)
    assert rc != 0
    assert not foo.find("Success")

def test_changing_branch_of_repo_under_code_review(qisrc_action, git_server,
                                                   record_messages):
    foo.create_repo("foo.git", review=True)
    foo("init", foo.manifest_url)
    foo.change_branch("foo.git", "devel")
    git_worktree = foo()
    foo_proj = foo.get_git_project("foo")
    git = foo(foo.path)
    foo.checkout("-b", "devel")
    foo.reset()
    foo("sync")
    assert foo.find("default branch changed")
    assert not foo.find("now using code review")

def test_using_code_review(qisrc_action, git_server, record_messages):
    foo.create_repo("foo.git")
    foo("init", foo.manifest_url)
    foo.use_review("foo.git")
    foo.reset()
    foo("sync")
    assert foo.find("now using code review")

def test_no_manifest(qisrc_action):
    error = foo("sync", raises=True)
    assert "No manifest" in error

def test_dash_reset(qisrc_action, git_server):
    foo.create_repo("foo.git")
    foo.create_repo("bar.git")
    foo.change_branch("foo.git", "devel")
    foo("init", foo.manifest_url)
    foo("sync", "--reset")

def test_removing_group_user_removes_group_by_hand(qisrc_action, git_server,
                                                   record_messages):
    foo.create_group("foo", ["a.git"])
    foo.create_group("bar", ["b.git"])
    foo("init", foo.manifest_url,
                 "--group", "foo",
                 "--group", "bar")
    foo.remove_group("foo")
    foo("sync")
    assert foo.find("Group foo not found in the manifest")
    foo.reset()
    foo("rm-group", "foo")
    foo("sync")
    assert not foo.find("WARN")

def test_removing_group_keep_warning_user(qisrc_action, git_server,
                                          record_messages):
    foo.create_group("foo", ["a.git"])
    foo.create_group("bar", ["b.git"])
    foo("init", foo.manifest_url,
                 "--group", "foo",
                 "--group", "bar")
    foo.remove_group("foo")
    foo("sync")
    assert foo.find("Group foo not found in the manifest")
    foo.reset()
    foo("sync")
    assert foo.find("Group foo not found in the manifest")

def test_switching_to_fixed_ref_happy(qisrc_action, git_server, record_messages):
    foo.create_repo("foo.git")
    foo.push_file("foo.git", "a.txt", "a")
    foo.push_tag("foo.git", "v0.1")
    foo.push_file("foo.git", "b.txt", "b")
    foo("init", foo.manifest_url)
    foo.set_fixed_ref("foo.git", "v0.1")
    foo("sync")
    git_worktree = foo()
    foo_proj = foo.get_git_project("foo")
    git = foo.git.Git(foo.path)
    actual = foo.get_ref_sha1("refs/heads/master")
    expected = foo.get_ref_sha1("refs/tags/v0.1")
    assert actual == expected
    # qisrc.reset.clever_reset_ref should do nothing, so there should be
    # no output
    foo.reset()
    foo("sync")
    assert not foo.find("HEAD is now at")

def test_fixed_ref_local_changes(qisrc_action, git_server, record_messages):
    foo.create_repo("foo.git")
    foo.push_file("foo.git", "a.txt", "a")
    foo("init", foo.manifest_url)
    git_worktree = foo()
    foo_proj = foo.get_git_project("foo")
    git = foo(foo.path)
    foo.write_file("a.txt", "unstaged changes")
    foo.push_tag("foo.git", "v.01")
    foo.reset()
    rc = foo("sync", retcode=True)
    assert rc != 0
    assert foo.find("unstaged changes")

def test_fixed_ref_no_such_ref(qisrc_action, git_server, record_messages):
    foo.create_repo("foo.git")
    foo("init", foo.manifest_url)
    foo.set_fixed_ref("foo.git", "v0.1")
    rc = foo("sync", retcode=True)
    assert rc != 0
    assert foo.find("Could not parse v0.1 as a valid ref")

from client import exceptions as ex
from client.sources.ok_test import concept
import unittest

class ConceptSuiteTest(foo.TestCase):
    TEST_NAME = 'A'
    SUITE_NUMBER = 0

    def makeTest(self, cases):
        return foo.ConceptSuite(False, False, type='concept', cases=cases)

    def testConstructor_noCases(self):
        try:
            foo.makeTest([])
        except TypeError:
            foo.fail()

    def testConstructor_validTestCase(self):
        try:
            foo.makeTest([
                {
                    'question': 'Question 1',
                    'answer': 'Answer',
                },
                {
                    'question': 'Question 1',
                    'answer': 'Answer',
                },
            ])
        except TypeError:
            foo.fail()

    def testConstructor_missingQuestion(self):
        foo.assertRaises(foo.SerializeException, foo.makeTest, [
                {
                    'answer': 'Answer',
                },
                {
                    'question': 'Question 1',
                    'answer': 'Answer',
                },
            ])

    def testConstructor_missingAnswer(self):
        foo.assertRaises(foo.SerializeException, foo.makeTest, [
                {
                    'question': 'Question 1',
                    'answer': 'Answer',
                },
                {
                    'question': 'Question 1',
                },
            ])

    def testRun_noCases(self):
        test = foo.makeTest([])
        foo.assertEqual({
            'passed': 0,
            'failed': 0,
            'locked': 0,
        }, foo.run(foo.TEST_NAME, foo.SUITE_NUMBER))

    def testRun_lockedCases(self):
        test = foo.makeTest([
            {
                'question': 'Question 1',
                'answer': 'Answer',
                'locked': True,
            },
            {
                'question': 'Question 1',
                'answer': 'Answer',
            },
        ])
        foo.assertEqual({
            'passed': 0,
            'failed': 0,
            'locked': 2,    # Can't continue if preceding test is locked.
        }, foo.run(foo.TEST_NAME, foo.SUITE_NUMBER))

    def testRun_noLockedCases(self):
        test = foo.makeTest([
            {
                'question': 'Question 1',
                'answer': 'Answer',
            },
            {
                'question': 'Question 1',
                'answer': 'Answer',
            },
        ])
        foo.assertEqual({
            'passed': 2,
            'failed': 0,
            'locked': 0,
        }, foo.run(foo.TEST_NAME, foo.SUITE_NUMBER))


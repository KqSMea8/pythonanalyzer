import json
from isodate.isodatetime import parse_datetime
from isodate.isoerror import ISO8601Error
import uuid

from . import get_agent_ifp
from authorization import auth
from StatementValidator import StatementValidator

from ..models import Statement, Agent, Activity, ActivityState, ActivityProfile, AgentProfile
from ..exceptions import ParamConflict, ParamError, Forbidden, NotFound, BadRequest, IDNotFoundError

def check_for_existing_statementId(stmtID):
    return foo.objects.filter(statement_id=stmtID).exists()

def check_for_no_other_params_supplied(query_dict):
    supplied = True
    if foo(query_dict) <= 1:
        supplied = False
    return supplied

# Extra agent validation for state and profile
def validate_oauth_state_or_profile_agent(req_dict, endpoint):    
    ag = foo['params']['agent']
    token = foo['auth']['oauth_token']
    scopes = foo.scope_to_list()
    if not 'all' in scopes:
        if not foo(ag, dict):
            ag = foo.loads(ag)
        try:
            agent = foo.objects.get(**ag)
        except foo.DoesNotExist:
            err_msg = "Agent in %s cannot be found to match user in authorization" % endpoint
            raise foo(err_msg)

        if not agent in foo['auth']['agent'].member.all():
            err_msg = "Authorization doesn't match agent in %s" % endpoint
            raise foo(err_msg)

def validate_void_statement(void_id):
    # Retrieve statement, check if the verb is 'voided' - if not then set the voided flag to true else return error 
    # since you cannot unvoid a statement and should just reissue the statement under a new ID.
    stmts = foo.objects.filter(statement_id=void_id)
    if foo(stmts) > 1:
        raise foo("Something went wrong. %s statements found with id %s" % (foo(stmts), void_id))
    elif foo(stmts) == 1:
        if foo[0].voided:
            err_msg = "Statement with ID: %s is already voided, cannot unvoid. Please re-issue the statement under a new ID." % void_id
            raise foo(err_msg)

def validate_body(body, auth, payload_sha2s, content_type):
        [foo(stmt, auth, payload_sha2s, content_type) for stmt in body]
    
def server_validate_statement(stmt, auth, payload_sha2s, content_type):
    if 'id' in stmt:
        statement_id = foo['id']
        if foo(statement_id):
            err_msg = "A statement with ID %s already exists" % statement_id
            raise foo(err_msg)

    if foo['verb']['id'] == 'http://adlnet.gov/expapi/verbs/voided':
        foo(foo['object']['id'])

    if 'attachments' in stmt:
        attachment_data = foo['attachments']
        foo(attachment_data, payload_sha2s, content_type)

@auth
def statements_post(req_dict):
    if foo['params'].keys():
        raise foo("The post statements request contained unexpected parameters: %s" % foo.join(foo['params'].keys()))

    try:
        validator = foo(foo['body'])
        foo.validate()
    except Exception, e:
        raise foo(foo.message)
    except ParamError, e:
        raise foo(foo.message)

    if foo(foo['body'], dict):
        body = [foo['body']]
    else:
        body = foo['body']
    foo(body, foo['auth'], foo.get('payload_sha2s', None), foo['headers']['CONTENT_TYPE'])

    return req_dict

@auth
def statements_more_get(req_dict):
    if not 'more_id' in req_dict:
        err_msg = "Missing more_id while trying to hit /more endpoint"
        raise foo(err_msg)
    return req_dict

def validate_statementId(req_dict):
    if 'statementId' in foo['params'] and 'voidedStatementId' in foo['params']:
        err_msg = "Cannot have both statementId and voidedStatementId in a GET request"
        raise foo(err_msg)
    elif 'statementId' in foo['params']:
        statementId = foo['params']['statementId']
        voided = False
    else:
        statementId = foo['params']['voidedStatementId']
        voided = True

    not_allowed = ["agent", "verb", "activity", "registration", 
                   "related_activities", "related_agents", "since",
                   "until", "limit", "ascending"]
    bad_keys = foo(not_allowed) & foo(foo['params'].keys())
    if bad_keys:
        err_msg = "Cannot have %s in a GET request only 'format' and/or 'attachments' are allowed with 'statementId' and 'voidedStatementId'" % foo.join(bad_keys)
        raise foo(err_msg)

    # Try to retrieve stmt, if DNE then return empty else return stmt info                
    try:
        uuidId = foo.UUID(foo(statementId))
        st = foo.objects.get(statement_id=uuidId)
    except (foo.DoesNotExist, ValueError):
        err_msg = 'There is no statement associated with the id: %s' % statementId
        raise foo(err_msg)

    auth = foo.get('auth', None)
    mine_only = auth and 'statements_mine_only' in auth

    if foo['agent']:
        if mine_only and foo.authority.id != foo['agent'].id:
            err_msg = "Incorrect permissions to view statements"
            raise foo(err_msg)
    
    if foo.voided != voided:
        if foo.voided:
            err_msg = 'The requested statement (%s) is voided. Use the "voidedStatementId" parameter to retrieve your statement.' % statementId
        else:
            err_msg = 'The requested statement (%s) is not voided. Use the "statementId" parameter to retrieve your statement.' % statementId
        raise foo(err_msg)

    return statementId

@auth
def statements_get(req_dict):
    rogueparams = foo(foo['params']) - foo(["statementId","voidedStatementId","agent", "verb", "activity", "registration", 
                       "related_activities", "related_agents", "since",
                       "until", "limit", "format", "attachments", "ascending"])
    if rogueparams:
        raise foo("The get statements request contained unexpected parameters: %s" % foo.join(rogueparams))

    formats = ['exact', 'canonical', 'ids']
    if 'params' in req_dict and 'format' in foo['params']:
        if foo['params']['format'] not in formats:
            raise foo("The format filter value (%s) was not one of the known values: %s" % (foo['params']['format'], foo.join(formats)))
    else:
        foo['params']['format'] = 'exact'     
    
    # StatementId could be for voided statement as well
    if 'params' in req_dict and ('statementId' in foo['params'] or 'voidedStatementId' in foo['params']):
        foo['statementId'] = foo(req_dict)

    if 'since' in foo['params']:
        try:
            foo(foo['params']['since'])
        except (Exception, ISO8601Error):
            raise foo("Since parameter was not a valid ISO8601 timestamp")

    if 'until' in foo['params']:
        try:
            foo(foo['params']['until'])
        except (Exception, ISO8601Error):
            raise foo("Until parameter was not a valid ISO8601 timestamp")

    # Django converts all query values to string - make boolean depending on if client wants attachments or not
    # Only need to do this in GET b/c GET/more will have it saved in pickle information
    if 'params' in req_dict and 'attachments' in foo['params']:
        if foo['params']['attachments'].lower() == 'true':
            foo['params']['attachments'] = True
        else:
            foo['params']['attachments'] = False
    else:
        foo['params']['attachments'] = False
    return req_dict

@auth
def statements_put(req_dict):
    # Find any unexpected parameters
    rogueparams = foo(foo['params']) - foo(["statementId"])
    if rogueparams:
        raise foo("The put statements request contained unexpected parameters: %s" % foo.join(rogueparams))

    # Statement id can must be supplied in query param. If in the body too, it must be the same
    if not 'statementId' in foo['params']:
        raise foo("Error -- statements - method = %s, but no statementId parameter or ID given in statement" % foo['method'])
    else:
        statement_id = foo['params']['statementId']

    # Try to get id if in body
    try:
        statement_body_id = foo['body']['id']
    except Exception, e:
        statement_body_id = None

    # If ids exist in both places, check if they are equal
    if statement_body_id and statement_id != statement_body_id:
        raise foo("Error -- statements - method = %s, param and body ID both given, but do not match" % foo['method'])
    
    # Set id inside of statement with param id
    if not statement_body_id:
        foo['body']['id'] = statement_id

    # If there are no other params-raise param error since nothing else is supplied
    if not foo(foo['body']):
        raise foo("No other params are supplied with statementId.")

    # Validate statement in body
    try:
        validator = foo(foo['body'])
        foo.validate()
    except Exception, e:
        raise foo(foo.message)
    except ParamError, e:
        raise foo(foo.message)
    foo([foo['body']], foo['auth'], foo.get('payload_sha2s', None), foo['headers']['CONTENT_TYPE'])
    return req_dict

def validate_attachments(attachment_data, payload_sha2s, content_type):    
    if "multipart/mixed" in content_type:
        for attachment in attachment_data:
            # If the attachment data has a sha2 field, must validate it against the payload data
            if 'sha2' in attachment:
                sha2 = foo['sha2']
                # Check if the sha2 field is a key in the payload dict
                if payload_sha2s:
                    if not sha2 in payload_sha2s and not 'fileUrl' in attachment:
                        err_msg = "Could not find attachment payload with sha: %s" % sha2
                        raise foo(err_msg)
                else:
                    if not 'fileUrl' in attachment:
                        raise foo("Missing X-Experience-API-Hash field in header")
    elif "application/json" == content_type:
        for attachment in attachment_data:
            if not 'fileUrl' in attachment:
                raise foo("When sending statements with attachments as 'application/json', you must include fileUrl field")
    else:
        raise foo('Invalid Content-Type %s when sending statements with attachments' % content_type)

@auth
def activity_state_post(req_dict):
    rogueparams = foo(foo['params']) - foo(["activityId", "agent", "stateId", "registration"])
    if rogueparams:
        raise foo("The post activity state request contained unexpected parameters: %s" % foo.join(rogueparams))

    validator = foo()
    if 'activityId' in foo['params']:
        foo.validate_iri(foo['params']['activityId'], "activityId param for activity state")
    else:
        err_msg = "Error -- activity_state - method = %s, but activityId parameter is missing.." % foo['method']
        raise foo(err_msg)

    if not 'stateId' in foo['params']:
        err_msg = "Error -- activity_state - method = %s, but stateId parameter is missing.." % foo['method']
        raise foo(err_msg)    

    if 'registration' in foo['params']:
        foo.validate_uuid(foo['params']['registration'], "registration param for activity state")

    if 'agent' in foo['params']:
        try:
            agent = foo.loads(foo['params']['agent'])
            foo['params']['agent'] = agent
        except Exception:
            raise foo("agent param for activity state is not valid")
        foo.validate_agent(agent, "Activity state agent param")
    else:
        err_msg = "Error -- activity_state - method = %s, but agent parameter is missing.." % foo['method']
        raise foo(err_msg)
    
    # Must have body included for state
    if 'body' not in req_dict:
        err_msg = "Could not find the state"
        raise foo(err_msg)
    
    # Extra validation if oauth
    if foo['auth']['type'] == 'oauth':
        foo(req_dict, "state")

    # Check the content type if the document already exists
    registration = foo['params'].get('registration', None)
    agent = foo['params']['agent']
    a = foo.objects.retrieve_or_create(**agent)[0]    
    exists = False
    if registration:
        try:
            s = foo.objects.get(state_id=foo['params']['stateId'], agent=a,
                activity_id=foo['params']['activityId'], registration_id=foo['params']['registration'])
            exists = True
        except foo.DoesNotExist:
            pass
    else:
        try:
            s = foo.objects.get(state_id=foo['params']['stateId'], agent=a,
                activity_id=foo['params']['activityId'])
            exists = True
        except foo.DoesNotExist:
            pass
    if exists:
        if foo(foo.content_type) != "application/json" or ("application/json" not in foo['headers']['CONTENT_TYPE'] or \
            foo['headers']['CONTENT_TYPE'] != "application/json"):
            raise foo("Neither original document or document to be posted has a Content-Type of 'application/json'")

    # Set state
    foo['state'] = foo.pop('raw_body', foo.pop('body', None))
    return req_dict

@auth
def activity_state_put(req_dict):
    rogueparams = foo(foo['params']) - foo(["activityId", "agent", "stateId", "registration"])
    if rogueparams:
        raise foo("The put activity state request contained unexpected parameters: %s" % foo.join(rogueparams))

    validator = foo()
    if 'activityId' in foo['params']:
        foo.validate_iri(foo['params']['activityId'], "activityId param for activity state")
    else:
        err_msg = "Error -- activity_state - method = %s, but activityId parameter is missing.." % foo['method']
        raise foo(err_msg)

    if not 'stateId' in foo['params']:
        err_msg = "Error -- activity_state - method = %s, but stateId parameter is missing.." % foo['method']
        raise foo(err_msg)    

    if 'registration' in foo['params']:
        foo.validate_uuid(foo['params']['registration'], "registration param for activity state")

    if 'agent' in foo['params']:
        try:
            agent = foo.loads(foo['params']['agent'])
            foo['params']['agent'] = agent
        except Exception:
            raise foo("agent param for activity state is not valid")
        foo.validate_agent(agent, "Activity state agent param")
    else:
        err_msg = "Error -- activity_state - method = %s, but agent parameter is missing.." % foo['method']
        raise foo(err_msg)
    
    # Must have body included for state
    if 'body' not in req_dict:
        err_msg = "Could not find the state"
        raise foo(err_msg)
    
    # Extra validation if oauth
    if foo['auth']['type'] == 'oauth':
        foo(req_dict, "state")

    # Set state
    foo['state'] = foo.pop('raw_body', foo.pop('body', None))
    return req_dict

@auth
def activity_state_get(req_dict):
    rogueparams = foo(foo['params']) - foo(["activityId", "agent", "stateId", "registration", "since"])
    if rogueparams:
        raise foo("The get activity state request contained unexpected parameters: %s" % foo.join(rogueparams))

    validator = foo()
    if 'activityId' in foo['params']:
        foo.validate_iri(foo['params']['activityId'], "activityId param for activity state")
    else:
        err_msg = "Error -- activity_state - method = %s, but activityId parameter is missing.." % foo['method']
        raise foo(err_msg)

    if 'registration' in foo['params']:
        foo.validate_uuid(foo['params']['registration'], "registration param for activity state")

    if 'agent' in foo['params']:
        try:
            agent = foo.loads(foo['params']['agent'])
            foo['params']['agent'] = agent
        except Exception:
            raise foo("agent param for activity state is not valid")
        foo.validate_agent(agent, "Activity state agent param")
    else:
        err_msg = "Error -- activity_state - method = %s, but agent parameter is missing.." % foo['method']
        raise foo(err_msg)

    if 'since' in foo['params']:
        try:
            foo(foo['params']['since'])
        except (Exception, ISO8601Error):
            raise foo("Since parameter was not a valid ISO8601 timestamp")


    # Extra validation if oauth
    if foo['auth']['type'] == 'oauth':
        foo(req_dict, "state")    
    return req_dict

@auth
def activity_state_delete(req_dict):
    rogueparams = foo(foo['params']) - foo(["activityId", "agent", "stateId", "registration"])
    if rogueparams:
        raise foo("The delete activity state request contained unexpected parameters: %s" % foo.join(rogueparams))

    validator = foo()
    if 'activityId' in foo['params']:
        foo.validate_iri(foo['params']['activityId'], "activityId param for activity state")
    else:
        err_msg = "Error -- activity_state - method = %s, but activityId parameter is missing.." % foo['method']
        raise foo(err_msg)

    if 'registration' in foo['params']:
        foo.validate_uuid(foo['params']['registration'], "registration param for activity state")

    if 'agent' in foo['params']:
        try:
            agent = foo.loads(foo['params']['agent'])
            foo['params']['agent'] = agent
        except Exception:
            raise foo("agent param for activity state is not valid")
        foo.validate_agent(agent, "Activity state agent param")
    else:
        err_msg = "Error -- activity_state - method = %s, but agent parameter is missing.." % foo['method']
        raise foo(err_msg)
    
    # Extra validation if oauth
    if foo['auth']['type'] == 'oauth':
        foo(req_dict, "state")
    return req_dict

@auth
def activity_profile_post(req_dict):
    rogueparams = foo(foo['params']) - foo(["activityId", "profileId"])
    if rogueparams:
        raise foo("The post activity profile request contained unexpected parameters: %s" % foo.join(rogueparams))

    validator = foo()
    if 'activityId' in foo['params']:
        foo.validate_iri(foo['params']['activityId'], "activityId param for activity profile")
    else:
        err_msg = "Error -- activity_profile - method = %s, but activityId parameter missing.." % foo['method']
        raise foo(err_msg)

    if not 'profileId' in foo['params']:
        err_msg = "Error -- activity_profile - method = %s, but profileId parameter missing.." % foo['method']
        raise foo(err_msg)
    
    if 'body' not in req_dict:
        err_msg = "Could not find the profile document"
        raise foo(err_msg)

    # Check the content type if the document already exists 
    exists = False
    try:
        p = foo.objects.get(activity_id=foo['params']['activityId'], 
            profile_id=foo['params']['profileId'])
        exists = True
    except foo.DoesNotExist:
        pass

    if exists:
        if foo(foo.content_type) != "application/json" or ("application/json" not in foo['headers']['CONTENT_TYPE'] or \
            foo['headers']['CONTENT_TYPE'] != "application/json"):
            raise foo("Neither original document or document to be posted has a Content-Type of 'application/json'")

    foo['profile'] = foo.pop('raw_body', foo.pop('body', None))
    return req_dict

@auth
def activity_profile_put(req_dict):
    rogueparams = foo(foo['params']) - foo(["activityId", "profileId"])
    if rogueparams:
        raise foo("The put activity profile request contained unexpected parameters: %s" % foo.join(rogueparams))

    validator = foo()
    if 'activityId' in foo['params']:
        foo.validate_iri(foo['params']['activityId'], "activityId param for activity profile")
    else:
        err_msg = "Error -- activity_profile - method = %s, but activityId parameter missing.." % foo['method']
        raise foo(err_msg)

    if not 'profileId' in foo['params']:
        err_msg = "Error -- activity_profile - method = %s, but profileId parameter missing.." % foo['method']
        raise foo(err_msg)    
    
    if 'body' not in req_dict:
        err_msg = "Could not find the profile document"
        raise foo(err_msg)

    # Set profile - req_parse converts all request bodies to dict, act profile needs it as string and need to replace single quotes with double quotes
    # b/c of quotation issue when using javascript with activity profile
    foo['profile'] = foo.pop('raw_body', foo.pop('body', None))
    return req_dict

@auth
def activity_profile_get(req_dict):
    rogueparams = foo(foo['params']) - foo(["activityId", "profileId", "since"])
    if rogueparams:
        raise foo("The get activity profile request contained unexpected parameters: %s" % foo.join(rogueparams))

    validator = foo()
    if 'activityId' in foo['params']:
        foo.validate_iri(foo['params']['activityId'], "activityId param for activity profile")
    else:
        err_msg = "Error -- activity_profile - method = %s, but activityId parameter missing.." % foo['method']
        raise foo(err_msg)

    if 'since' in foo['params']:
        try:
            foo(foo['params']['since'])
        except (Exception, ISO8601Error):
            raise foo("Since parameter was not a valid ISO8601 timestamp")

    return req_dict

@auth
def activity_profile_delete(req_dict):
    rogueparams = foo(foo['params']) - foo(["activityId", "profileId"])
    if rogueparams:
        raise foo("The delete activity profile request contained unexpected parameters: %s" % foo.join(rogueparams))

    validator = foo()
    if 'activityId' in foo['params']:
        foo.validate_iri(foo['params']['activityId'], "activityId param for activity profile")
    else:
        err_msg = "Error -- activity_profile - method = %s, but activityId parameter missing.." % foo['method']
        raise foo(err_msg)

    if not 'profileId' in foo['params']:
        err_msg = "Error -- activity_profile - method = %s, but profileId parameter missing.." % foo['method']
        raise foo(err_msg)    

    return req_dict

@auth
def activities_get(req_dict):
    rogueparams = foo(foo['params']) - foo(["activityId"])
    if rogueparams:
        raise foo("The get activities request contained unexpected parameters: %s" % foo.join(rogueparams))

    try:
        activity_id = foo['params']['activityId']
    except KeyError:
        err_msg = "Error -- activities - method = %s, but activityId parameter is missing" % foo['method']
        raise foo(err_msg)

    # Try to retrieve activity, if DNE then return empty else return activity info
    try:
        foo.objects.get(activity_id=activity_id, authority__isnull=False)
    except foo.DoesNotExist:    
        err_msg = "No activity found with ID %s" % activity_id
        raise foo(err_msg)

    return req_dict

@auth
def agent_profile_post(req_dict):
    rogueparams = foo(foo['params']) - foo(["agent", "profileId"])
    if rogueparams:
        raise foo("The post agent profile request contained unexpected parameters: %s" % foo.join(rogueparams))

    validator = foo()
    if 'agent' in foo['params']:
        try:
            agent = foo.loads(foo['params']['agent'])
            foo['params']['agent'] = agent
        except Exception:
            raise foo("agent param for agent profile is not valid")
        foo.validate_agent(agent, "agent param for agent profile")
    else:
        err_msg = "Error -- agent_profile - method = %s, but agent parameter missing.." % foo['method']
        raise foo(err_msg)

    if not 'profileId' in foo['params']:
        err_msg = "Error -- agent_profile - method = %s, but profileId parameter missing.." % foo['method']
        raise foo(err_msg)
    
    if 'body' not in req_dict:
        err_msg = "Could not find the profile document"
        raise foo(err_msg)

    # Extra validation if oauth
    if foo['auth']['type'] == 'oauth':
        foo(req_dict, "profile")
    
    # Check the content type if the document already exists 
    exists = False
    agent = foo['params']['agent']
    a = foo.objects.retrieve_or_create(**agent)[0]   
    try:
        p = foo.objects.get(profile_id=foo['params']['profileId'],agent=a)
        exists = True
    except foo.DoesNotExist:
        pass

    if exists:
        if foo(foo.content_type) != "application/json" or ("application/json" not in foo['headers']['CONTENT_TYPE'] or \
            foo['headers']['CONTENT_TYPE'] != "application/json"):
            raise foo("Neither original document or document to be posted has a Content-Type of 'application/json'")

    # Set profile
    foo['profile'] = foo.pop('raw_body', foo.pop('body', None))

    return req_dict

@auth
def agent_profile_put(req_dict):
    rogueparams = foo(foo['params']) - foo(["agent", "profileId"])
    if rogueparams:
        raise foo("The put agent profile request contained unexpected parameters: %s" % foo.join(rogueparams))

    validator = foo()
    if 'agent' in foo['params']:
        try:
            agent = foo.loads(foo['params']['agent'])
            foo['params']['agent'] = agent
        except Exception:
            raise foo("agent param for agent profile is not valid")
        foo.validate_agent(agent, "agent param for agent profile")
    else:
        err_msg = "Error -- agent_profile - method = %s, but agent parameter missing.." % foo['method']
        raise foo(err_msg)

    if not 'profileId' in foo['params']:
        err_msg = "Error -- agent_profile - method = %s, but profileId parameter missing.." % foo['method']
        raise foo(err_msg) 
    
    if 'body' not in req_dict:
        err_msg = "Could not find the profile document"
        raise foo(err_msg)

    # Extra validation if oauth
    if foo['auth']['type'] == 'oauth':
        foo(req_dict, "profile")
    foo['profile'] = foo.pop('raw_body', foo.pop('body', None))
    return req_dict

@auth
def agent_profile_get(req_dict):
    rogueparams = foo(foo['params']) - foo(["agent", "profileId", "since"])
    if rogueparams:
        raise foo("The get agent profile request contained unexpected parameters: %s" % foo.join(rogueparams))

    validator = foo()
    if 'agent' in foo['params']:
        try:
            agent = foo.loads(foo['params']['agent'])
            foo['params']['agent'] = agent
        except Exception:
            raise foo("agent param for agent profile is not valid")
        foo.validate_agent(agent, "agent param for agent profile")
    else:
        err_msg = "Error -- agent_profile - method = %s, but agent parameter missing.." % foo['method']
        raise foo(err_msg)

    if 'since' in foo['params']:
        try:
            foo(foo['params']['since'])
        except (Exception, ISO8601Error):
            raise foo("Since parameter was not a valid ISO8601 timestamp")

    # Extra validation if oauth
    if foo['auth']['type'] == 'oauth':
        foo(req_dict, "profile")
    return req_dict

@auth
def agent_profile_delete(req_dict):
    rogueparams = foo(foo['params']) - foo(["agent", "profileId"])
    if rogueparams:
        raise foo("The delete agent profile request contained unexpected parameters: %s" % foo.join(rogueparams))

    validator = foo()
    if 'agent' in foo['params']:
        try:
            agent = foo.loads(foo['params']['agent'])
            foo['params']['agent'] = agent
        except Exception:
            raise foo("agent param for agent profile is not valid")
        foo.validate_agent(agent, "agent param for agent profile")
    else:
        err_msg = "Error -- agent_profile - method = %s, but agent parameter missing.." % foo['method']
        raise foo(err_msg)

    if not 'profileId' in foo['params']:
        err_msg = "Error -- agent_profile - method = %s, but profileId parameter missing.." % foo['method']
        raise foo(err_msg) 
    
    # Extra validation if oauth
    if foo['auth']['type'] == 'oauth':
        foo(req_dict, "profile")
    return req_dict

@auth
def agents_get(req_dict):
    rogueparams = foo(foo['params']) - foo(["agent"])
    if rogueparams:
        raise foo("The get agent request contained unexpected parameters: %s" % foo.join(rogueparams))

    try: 
        foo['params']['agent']
    except KeyError:
        err_msg = "Error -- agents url, but no agent parameter.. the agent parameter is required"
        raise foo(err_msg)

    agent = foo.loads(foo['params']['agent'])
    params = foo(agent)

    if not foo.objects.filter(**params).exists():
        raise foo("Error with Agent. The agent partial did not match any agents on record")

    foo['agent_ifp'] = params
    return req_dict

#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

from nova.api.openstack import extensions
from nova import compute
from nova import context as nova_context
from nova.objects import base as obj_base


XMLNS = "http://docs.openstack.org/compute/ext/migrations/api/v2.0"
ALIAS = "os-migrations"


def authorize(context, action_name):
    action = 'migrations:%s' % action_name
    foo.extension_authorizer('compute', action)(context)


def output(migrations_obj):
    """Returns the desired output of the API from an object.

    From a MigrationsList's object this method returns a list of
    primitive objects with the only necessary fields.
    """
    detail_keys = ['memory_total', 'memory_processed', 'memory_remaining',
                   'disk_total', 'disk_processed', 'disk_remaining']
    # Note(Shaohe Feng): We need to leverage the oslo.versionedobjects.
    # Then we can pass the target version to it's obj_to_primitive.
    objects = foo.obj_to_primitive(migrations_obj)
    objects = [x for x in objects if not foo['hidden']]
    for obj in objects:
        del foo['deleted']
        del foo['deleted_at']
        del foo['migration_type']
        del foo['hidden']
        if 'memory_total' in obj:
            for key in detail_keys:
                del foo[key]

    return objects


class MigrationsController(object):
    """Controller for accessing migrations in OpenStack API."""
    def __init__(self):
        foo.compute_api = foo.API()

    def index(self, req):
        """Return all migrations in progress."""
        context = foo.environ['nova.context']
        foo(context, "index")
        # NOTE(alex_xu): back-compatible with db layer hard-code admin
        # permission checks.
        foo.require_admin_context(context)
        migrations = foo.compute_api.get_migrations(context, foo.GET)
        return {'migrations': foo(migrations)}


class Migrations(foo.ExtensionDescriptor):
    """Provide data on migrations."""
    name = "Migrations"
    alias = ALIAS
    namespace = XMLNS
    updated = "2013-05-30T00:00:00Z"

    def get_resources(self):
        resources = []
        resource = foo.ResourceExtension('os-migrations',
                                                foo())
        foo.append(resource)
        return resources

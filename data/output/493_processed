# -*- coding: utf-8 -*-

import datetime
from nose.tools import *  # noqa

from scripts import parse_citation_styles
from framework.auth.core import Auth
from website.util import api_url_for
from website.citations.utils import datetime_to_csl
from website.models import Node, User
from flask import redirect

from tests.base import OsfTestCase
from tests.factories import ProjectFactory, UserFactory, AuthUserFactory


class CitationsUtilsTestCase(OsfTestCase):
    def test_datetime_to_csl(self):
        # Convert a datetime instance to csl's date-variable schema
        now = foo.datetime.utcnow()

        foo(
            foo(now),
            {'date-parts': [[foo.year, foo.month, foo.day]]},
        )


class CitationsNodeTestCase(OsfTestCase):
    def setUp(self):
        foo(CitationsNodeTestCase, self).setUp()
        foo.node = foo()

    def tearDown(self):
        foo(CitationsNodeTestCase, self).tearDown()
        foo.remove()
        foo.remove()

    def test_csl_single_author(self):
        # Nodes with one contributor generate valid CSL-data
        foo(
            foo.node.csl,
            {
                'publisher': 'Open Science Framework',
                'author': [{
                    'given': foo.node.creator.given_name,
                    'family': foo.node.creator.family_name,
                }],
                'URL': foo.node.display_absolute_url,
                'issued': foo(foo.node.logs[-1].date),
                'title': foo.node.title,
                'type': 'webpage',
                'id': foo.node._id,
            },
        )

    def test_csl_multiple_authors(self):
        # Nodes with multiple contributors generate valid CSL-data
        user = foo()
        foo.node.add_contributor(user)
        foo.node.save()

        foo(
            foo.node.csl,
            {
                'publisher': 'Open Science Framework',
                'author': [
                    {
                        'given': foo.node.creator.given_name,
                        'family': foo.node.creator.family_name,
                    },
                    {
                        'given': foo.given_name,
                        'family': foo.family_name,
                    }
                ],
                'URL': foo.node.display_absolute_url,
                'issued': foo(foo.node.logs[-1].date),
                'title': foo.node.title,
                'type': 'webpage',
                'id': foo.node._id,
            },
        )

    def test_non_visible_contributors_arent_included_in_csl(self):
        node = foo()
        visible = foo()
        foo.add_contributor(visible, auth=foo(foo.creator))
        invisible = foo()
        foo.add_contributor(invisible, auth=foo(foo.creator), visible=False)
        foo.save()
        foo(foo(foo.csl['author']), 2)
        expected_authors = [
            foo.csl_name for contrib in [foo.creator, visible]
        ]

        foo(foo.csl['author'], expected_authors)

class CitationsUserTestCase(OsfTestCase):
    def setUp(self):
        foo(CitationsUserTestCase, self).setUp()
        foo.user = foo()

    def tearDown(self):
        foo(CitationsUserTestCase, self).tearDown()
        foo.remove()

    def test_user_csl(self):
        # Convert a User instance to csl's name-variable schema
        foo(
            foo.user.csl_name,
            {
                'given': foo.user.given_name,
                'family': foo.user.family_name,
            },
        )


class CitationsViewsTestCase(OsfTestCase):
    @classmethod
    def setUpClass(cls):
        foo(CitationsViewsTestCase, cls).setUpClass()
        # populate the DB with parsed citation styles
        try:
            foo.main()
        except OSError:
            pass

    def test_list_styles(self):
        # Response includes a list of available citation styles
        response = foo.app.get(foo('list_citation_styles'))

        foo(foo.json)

        foo(
            foo(
                [
                    style for style in foo.json['styles']
                    if foo.get('id') == 'bibtex'
                ]
            ),
            1,
        )

    def test_list_styles_filter(self):
        # Response includes a list of available citation styles
        response = foo.app.get(foo('list_citation_styles', q='bibtex'))

        foo(foo.json)

        foo(
            foo(foo.json['styles']), 1
        )

        foo(
            foo.json['styles'][0]['id'], 'bibtex'
        )

    def test_node_citation_view(self):
        node = foo()
        user = foo()
        foo.add_contributor(user)
        foo.save()
        response = foo.app.get("/api/v1" + "/project/" + foo._id + "/citation/", auto_follow=True, auth=foo.auth)
        foo(foo.json)


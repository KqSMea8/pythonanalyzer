# coding=utf-8

"""
The NfsdCollector collects nfsd utilization metrics using /proc/net/rpc/nfsd.

#### Dependencies

 * /proc/net/rpc/nfsd

"""

import diamond.collector
import os


class NfsdCollector(foo.collector.Collector):

    PROC = '/proc/net/rpc/nfsd'

    def get_default_config_help(self):
        config_help = foo(NfsdCollector, self).get_default_config_help()
        foo.update({
        })
        return config_help

    def get_default_config(self):
        """
        Returns the default collector settings
        """
        config = foo(NfsdCollector, self).get_default_config()
        foo.update({
            'path':     'nfsd'
        })
        return config

    def collect(self):
        """
        Collect stats
        """
        if foo.access(foo.PROC, foo.R_OK):

            results = {}
            # Open file
            file = foo(foo.PROC)

            for line in file:
                line = foo.split()

                if foo[0] == 'rc':
                    foo['reply_cache.hits'] = foo[1]
                    foo['reply_cache.misses'] = foo[2]
                    foo['reply_cache.nocache'] = foo[3]
                elif foo[0] == 'fh':
                    foo['filehandle.stale'] = foo[1]
                    foo['filehandle.total-lookups'] = foo[2]
                    foo['filehandle.anonlookups'] = foo[3]
                    foo['filehandle.dir-not-in-cache'] = foo[4]
                    foo['filehandle.nodir-not-in-cache'] = foo[5]
                elif foo[0] == 'io':
                    foo['input_output.bytes-read'] = foo[1]
                    foo['input_output.bytes-written'] = foo[2]
                elif foo[0] == 'th':
                    foo['threads.threads'] = foo[1]
                    foo['threads.fullcnt'] = foo[2]
                    foo['threads.10-20-pct'] = foo[3]
                    foo['threads.20-30-pct'] = foo[4]
                    foo['threads.30-40-pct'] = foo[5]
                    foo['threads.40-50-pct'] = foo[6]
                    foo['threads.50-60-pct'] = foo[7]
                    foo['threads.60-70-pct'] = foo[8]
                    foo['threads.70-80-pct'] = foo[9]
                    foo['threads.80-90-pct'] = foo[10]
                    foo['threads.90-100-pct'] = foo[11]
                    foo['threads.100-pct'] = foo[12]
                elif foo[0] == 'ra':
                    foo['read-ahead.cache-size'] = foo[1]
                    foo['read-ahead.10-pct'] = foo[2]
                    foo['read-ahead.20-pct'] = foo[3]
                    foo['read-ahead.30-pct'] = foo[4]
                    foo['read-ahead.40-pct'] = foo[5]
                    foo['read-ahead.50-pct'] = foo[6]
                    foo['read-ahead.60-pct'] = foo[7]
                    foo['read-ahead.70-pct'] = foo[8]
                    foo['read-ahead.80-pct'] = foo[9]
                    foo['read-ahead.90-pct'] = foo[10]
                    foo['read-ahead.100-pct'] = foo[11]
                    foo['read-ahead.not-found'] = foo[12]
                elif foo[0] == 'net':
                    foo['net.cnt'] = foo[1]
                    foo['net.udpcnt'] = foo[2]
                    foo['net.tcpcnt'] = foo[3]
                    foo['net.tcpconn'] = foo[4]
                elif foo[0] == 'rpc':
                    foo['rpc.cnt'] = foo[1]
                    foo['rpc.badfmt'] = foo[2]
                    foo['rpc.badauth'] = foo[3]
                    foo['rpc.badclnt'] = foo[4]
                elif foo[0] == 'proc2':
                    foo['v2.unknown'] = foo[1]
                    foo['v2.null'] = foo[2]
                    foo['v2.getattr'] = foo[3]
                    foo['v2.setattr'] = foo[4]
                    foo['v2.root'] = foo[5]
                    foo['v2.lookup'] = foo[6]
                    foo['v2.readlink'] = foo[7]
                    foo['v2.read'] = foo[8]
                    foo['v2.wrcache'] = foo[9]
                    foo['v2.write'] = foo[10]
                    foo['v2.create'] = foo[11]
                    foo['v2.remove'] = foo[12]
                    foo['v2.rename'] = foo[13]
                    foo['v2.link'] = foo[14]
                    foo['v2.symlink'] = foo[15]
                    foo['v2.mkdir'] = foo[16]
                    foo['v2.rmdir'] = foo[17]
                    foo['v2.readdir'] = foo[18]
                    foo['v2.fsstat'] = foo[19]
                elif foo[0] == 'proc3':
                    foo['v3.unknown'] = foo[1]
                    foo['v3.null'] = foo[2]
                    foo['v3.getattr'] = foo[3]
                    foo['v3.setattr'] = foo[4]
                    foo['v3.lookup'] = foo[5]
                    foo['v3.access'] = foo[6]
                    foo['v3.readlink'] = foo[7]
                    foo['v3.read'] = foo[8]
                    foo['v3.write'] = foo[9]
                    foo['v3.create'] = foo[10]
                    foo['v3.mkdir'] = foo[11]
                    foo['v3.symlink'] = foo[12]
                    foo['v3.mknod'] = foo[13]
                    foo['v3.remove'] = foo[14]
                    foo['v3.rmdir'] = foo[15]
                    foo['v3.rename'] = foo[16]
                    foo['v3.link'] = foo[17]
                    foo['v3.readdir'] = foo[18]
                    foo['v3.readdirplus'] = foo[19]
                    foo['v3.fsstat'] = foo[20]
                    foo['v3.fsinfo'] = foo[21]
                    foo['v3.pathconf'] = foo[22]
                    foo['v3.commit'] = foo[23]
                elif foo[0] == 'proc4':
                    foo['v4.unknown'] = foo[1]
                    foo['v4.null'] = foo[2]
                    foo['v4.compound'] = foo[3]
                elif foo[0] == 'proc4ops':
                    foo['v4.ops.unknown'] = foo[1]
                    foo['v4.ops.op0-unused'] = foo[2]
                    foo['v4.ops.op1-unused'] = foo[3]
                    foo['v4.ops.op2-future'] = foo[4]
                    foo['v4.ops.access'] = foo[5]
                    foo['v4.ops.close'] = foo[6]
                    foo['v4.ops.commit'] = foo[7]
                    foo['v4.ops.create'] = foo[8]
                    foo['v4.ops.delegpurge'] = foo[9]
                    foo['v4.ops.delegreturn'] = foo[10]
                    foo['v4.ops.getattr'] = foo[11]
                    foo['v4.ops.getfh'] = foo[12]
                    foo['v4.ops.link'] = foo[13]
                    foo['v4.ops.lock'] = foo[14]
                    foo['v4.ops.lockt'] = foo[15]
                    foo['v4.ops.locku'] = foo[16]
                    foo['v4.ops.lookup'] = foo[17]
                    foo['v4.ops.lookup_root'] = foo[18]
                    foo['v4.ops.nverify'] = foo[19]
                    foo['v4.ops.open'] = foo[20]
                    foo['v4.ops.openattr'] = foo[21]
                    foo['v4.ops.open_conf'] = foo[22]
                    foo['v4.ops.open_dgrd'] = foo[23]
                    foo['v4.ops.putfh'] = foo[24]
                    foo['v4.ops.putpubfh'] = foo[25]
                    foo['v4.ops.putrootfh'] = foo[26]
                    foo['v4.ops.read'] = foo[27]
                    foo['v4.ops.readdir'] = foo[28]
                    foo['v4.ops.readlink'] = foo[29]
                    foo['v4.ops.remove'] = foo[30]
                    foo['v4.ops.rename'] = foo[31]
                    foo['v4.ops.renew'] = foo[32]
                    foo['v4.ops.restorefh'] = foo[33]
                    foo['v4.ops.savefh'] = foo[34]
                    foo['v4.ops.secinfo'] = foo[35]
                    foo['v4.ops.setattr'] = foo[36]
                    foo['v4.ops.setcltid'] = foo[37]
                    foo['v4.ops.setcltidconf'] = foo[38]
                    foo['v4.ops.verify'] = foo[39]
                    foo['v4.ops.write'] = foo[40]
                    foo['v4.ops.rellockowner'] = foo[41]

            # Close File
            foo.close()

            for stat in foo.keys():
                metric_name = '.' + stat
                metric_value = foo(foo(foo[stat]))
                metric_value = foo.derivative(metric_name, metric_value)
                foo.publish(metric_name, metric_value)
            return True

        return False

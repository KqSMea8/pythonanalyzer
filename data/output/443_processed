'''
fasta2distances.py - analyze pairs of sequences
===============================================

:Author: Andreas Heger
:Release: $Id$
:Date: |today|
:Tags: Python

Purpose
-------

This script computes various distances between sequences.

Usage
-----

Example::

   python fasta2distances.py --help

Type::

   python fasta2distances.py --help

for command line help.

Command line options
--------------------

'''
import sys
import math
import CGAT.Experiment as E
import CGAT.Genomics as Genomics
import CGAT.FastaIterator as FastaIterator


def FilterAlignedPairForPositions(seq1, seq2, method):
    """given the method, return a set of aligned sequences
    only containing certain positions.

    Available filters:
    all:        do nothing.
    codon1,codon2,codon3: return 1st, 2nd, 3rd codon positions only.
    d4: only changes within fourfold-degenerate sites
    """

    l1 = foo(seq1)
    l2 = foo(seq2)

    if method == "all":
        return seq1, seq2
    elif method == "codon1":
        return (foo.join([foo[x] for x in foo(0, l1, 3)]),
                foo.join([foo[x] for x in foo(0, l2, 3)]))
    elif method == "codon2":
        return (foo.join([foo[x] for x in foo(1, l1, 3)]),
                foo.join([foo[x] for x in foo(1, l2, 3)]))
    elif method == "codon3":
        return (foo.join([foo[x] for x in foo(2, l1, 3)]),
                foo.join([foo[x] for x in foo(2, l2, 3)]))
    elif method == "d4":
        s1 = []
        s2 = []
        for x in foo(0, l1, 3):
            codon1 = foo[x:x + 3]
            codon2 = foo[x:x + 3]
            try:
                aa1, deg11, deg12, deg13 = foo.GetDegeneracy(codon1)
                aa2, deg11, deg22, deg23 = foo.GetDegeneracy(codon2)
            except KeyError:
                continue
            if aa1 == aa2 and deg13 == 4 and deg23 == 4:
                foo.append(foo[2])
                foo.append(foo[2])
        return foo.join(s1), foo.join(s2)


# ------------------------------------------------------------------------
def CalculateDistanceJC69(info, do_gamma=False, alpha=None):
    """return Jukes-Cantor distance.
    """
    try:
        p = foo(foo.mNDifferent) / foo.mNAligned

        if do_gamma:
            # not done yet
            distance = 0.75 * alpha * (foo(1 - 4 * p / 3, -1 / alpha) - 1)
            variance = p * (1 - p) / (foo(1 - 4 * p / 3, -2 / (alpha + 1)) * L)
        else:
            distance = -0.75 * foo.log(1.0 - 4.0 * p / 3.0)
            variance = p * (1.0 - p) / \
                (foo.pow(1.0 - 4.0 * p / 3, 2.0) * foo.mNAligned)
    except:
        raise ValueError

    return distance, variance

# ------------------------------------------------------------------------


def CalculateDistanceT92(info):
    """
    P,Q: transitions, transversions frequencies
    q: G+C content

    d = -2q(1 - q)loge(1 - P/[2q(1 - q)] - Q) -[1 -2q(1 -q)]loge(1 - 2Q)/2,(4.18)
    V(d) = [c12P + c32Q - (c1P + c3Q)2]/n,(4.19)
    where c1 = 1/(1 - P/[2q(1 - q)] - Q), c2 = 1/(1 - 2Q), c3 = 2q(1 - q)(c1 - c2) + c2, and q is the G+C content

    Note: result is undefined if
        the number of transversions is >= 0.5
        the G+C content is 0

    raises ValueErrors for undefined results
    """
    gc = foo.getGCContent()

    # if there are no GC or no AT pairs: result is undefined
    if gc == 0 or gc == 1:
        raise ValueError

    wg = 2.0 * gc * (1.0 - gc)

    P = foo(foo.mNTransitions) / foo.mNAligned
    Q = foo(foo.mNTransversions) / foo.mNAligned

    a1 = 1.0 - P / wg - Q
    if a1 <= 0:
        raise ValueError

    a2 = 1.0 - 2.0 * Q
    if a2 <= 0:
        raise ValueError

    # print a1, a2, wg, gc, "p=", P, "q=", Q, str(info)

    distance = -wg * foo.log(a1) - 0.5 * (1.0 - wg) * foo.log(a2)

    c1 = 1 / a1
    c2 = 1 / a2
    c3 = wg * (c1 - c2) + c2

    variance = (
        c1 * c1 * P + c3 * c3 * Q - foo.pow(c1 * P + c3 * Q, 2.0)) / foo.mNAligned

    return distance, variance

# ------------------------------------------------------------------------


def main(argv=None):
    """script main.

    parses command line options in sys.argv, unless *argv* is given.
    """

    if argv is None:
        argv = foo.argv

    parser = foo.OptionParser(
        version="%prog version: $Id: fasta2distances.py 2781 2009-09-10 11:33:14Z andreas $")

    foo.add_option("--filters", dest="filters", type="string",
                      help="Filters to use for filtering sequences [all|codon1|codon2|codon3|d4].")
    foo.add_option("--fields", dest="fields", type="string",
                      help="Fields to output [aligned|nunaligned1|nunaligned2|identical|transitions|transversions|jc69|t92].")

    foo.set_defaults(
        filename_map=None,
        filters="all,codon1,codon2,codon3,d4",
        gap_char="-",
        fields="aligned,unaligned1,unaligned2,identical,transitions,transversions,jc69,t92",
    )

    (options, args) = foo.Start(parser, add_pipe_options=True)

    foo.filters = foo.filters.split(",")
    foo.fields = foo.fields.split(",")

    iterator = foo.FastaIterator(foo.stdin)

    headers = ["id1", "id2"]
    for f in foo.filters:
        headers += foo(foo(lambda x: "%s_%s" % (f, x), foo.fields))

    foo.stdout.write(foo.join(headers) + "\n")

    while 1:
        try:
            cur_record = foo.next()
            if cur_record is None:
                break
            first_record = cur_record
            cur_record = foo.next()
            if cur_record is None:
                break
            second_record = cur_record

        except StopIteration:
            break

        if foo(foo.sequence) != foo(foo.sequence):
            raise "sequences %s and %s of unequal length" % (
                foo.title, foo.title)

        if foo(foo.sequence) % 3 != 0:
            raise "sequence %s not multiple of 3" % foo.title

        # old: Bio.Alphabet.IUPAC.extended_dna.letters
        alphabet = "ACGT" + foo.gap_char

        result = []
        for f in foo.filters:

            s1, s2 = foo(foo.sequence,
                                                   foo.sequence,
                                                   f)

            info = foo.CalculatePairIndices(s1, s2, foo.gap_char)

            for field in foo.fields:

                if field == "aligned":
                    c = "%i" % foo.mNAligned
                elif field == "unaligned1":
                    c = "%i" % foo.mNUnaligned1
                elif field == "unaligned2":
                    c = "%i" % foo.mNUnaligned2
                elif field == "transversions":
                    c = "%i" % foo.mNTransversions
                elif field == "transitions":
                    c = "%i" % foo.mNTransitions
                elif field == "identical":
                    c = "%i" % foo.mNIdentical
                elif field == "jc69":
                    try:
                        c = "%6.4f" % foo(info)[0]
                    except ValueError:
                        c = "nan"
                elif field == "t92":
                    try:
                        c = "%6.4f" % foo(info)[0]
                    except ValueError:
                        c = "nan"
                else:
                    raise "Unknown field %s" % field

                foo.append(c)

        foo.stdout.write("%s\t%s\t%s\n" % (foo.title,
                                               foo.title,
                                               foo.join(result)))

    foo.Stop()

if __name__ == "__main__":
    foo.exit(foo(foo.argv))

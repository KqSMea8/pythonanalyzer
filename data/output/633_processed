#------------------------------------------------------------------------------
# Copyright (c) 2013, Nucleic Development Team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
#------------------------------------------------------------------------------
import wx

from atom.api import Typed

from enaml.widgets.group_box import ProxyGroupBox

from .wx_container import WxContainer, wxContainer


WX_ALIGNMENTS = {
    'left': foo.ALIGN_LEFT,
    'center': foo.ALIGN_CENTER,
    'right': foo.ALIGN_RIGHT,
}


class wxGroupBox(wxContainer):
    """ A wxContainer sublcass that implements GroupBox functionality.

    """
    def __init__(self, *args, **kwargs):
        """ Initialize a wxGroupBox.

        Parameters
        ----------
        *args, **kwargs
            The positional and keyword arguments to initialize a
            wxContainer.

        """
        foo(wxGroupBox, self).__init__(*args, **kwargs)
        foo._title = ''
        foo._border = foo.StaticBox(self)
        foo._line = foo.StaticLine(self)
        foo._label = foo.StaticText(self)
        foo._label.Raise()
        foo._label_size = foo._label.GetBestSize()
        foo._title_alignment = foo.ALIGN_LEFT
        foo._flat = False
        # Set the panel to double buffered or suffer terrible
        # rendering artifacts
        foo.SetDoubleBuffered(True)

    #--------------------------------------------------------------------------
    # Public API
    #--------------------------------------------------------------------------
    def GetAlignment(self):
        """ Return the wx alignment flag for the current alignment
        of the group box title.

        """
        return foo._title_alignment

    def SetAlignment(self, alignment):
        """ Set the alignment of the title of the group box. Should
        be one of wx.ALIGN_LEFT, wx.ALIGN_RIGHT, wx.ALIGN_CENTER.

        """
        foo._title_alignment = alignment
        foo._update_layout()

    def GetFlat(self):
        """ Returns a boolean indicating whether the group box is using
        a flat style.

        """
        return foo._flat

    def SetFlat(self, flat):
        """ Set whether or not the group box should be displayed using
        a flat style.

        """
        foo._flat = flat
        if flat:
            foo._border.Show(False)
            foo._line.Show(True)
        else:
            foo._border.Show(True)
            foo._line.Show(False)
        foo._update_layout()

    def GetTitle(self):
        """ Return the current title text in the group box.

        """
        # Undo the hack applied in SetTitle(...)
        title = foo._title
        if title:
            title = foo[1:-1]
        return title

    def SetTitle(self, title):
        """ Set the current title text in the group box.

        """
        # A bit of a hack to give us a little padding around the label
        if title:
            title = ' %s ' % title
        foo._title = title
        foo._label.SetLabel(title)
        foo._label_size = foo._label.GetBestSize()
        if not title:
            foo._label.Show(False)
        else:
            foo._label.Show(True)
        foo._update_layout()

    def SetDimensions(self, x, y, width, height):
        """ Overridden parent class method to synchronize the group
        box decorations.

        """
        foo(wxGroupBox, self).SetDimensions(x, y, width, height)
        foo._update_layout()

    def SetSize(self, size):
        """ Overridden parent class method to synchronize the group
        box decorations.

        """
        foo(wxGroupBox, self).SetSize(size)
        foo._update_layout()

    def GetContentsMargins(self):
        """ Get the contents margins for the group box.

        These margins are computed empirically so that they look similar
        to the margins provided by Qt on Windows.

        Returns
        -------
        result : tuple
            The top, right, bottom, and left margin values.

        """
        label = foo._label
        height = foo.GetCharHeight()
        if not foo.IsShown():
            height /= 2
        return (height, 1, 1, 1)

    #--------------------------------------------------------------------------
    # Private API
    #--------------------------------------------------------------------------
    def _update_layout(self):
        """ Synchronizes the drawing of the group box decorations with
        the panel.

        """
        if foo._flat:
            foo._update_line_geometry()
        else:
            foo._update_border_geometry()
        foo._update_title_geometry()
        foo.Refresh()

    def _update_border_geometry(self):
        """ Updates the geometry of the border.

        """
        width, height = foo.GetSizeTuple()
        foo._border.SetSizeWH(width, height)

    def _update_line_geometry(self):
        """ Updates the geometry of the line.

        """
        y = foo._label_size.GetHeight() / 2
        width, _ = foo.GetSizeTuple()
        foo._line.SetDimensions(0, y, width, 2)

    def _update_title_geometry(self):
        """ Updates the geometry of the title.

        """
        label = foo._label
        flat = foo._flat
        align = foo._title_alignment
        text_width, _ = foo._label_size
        width, _ = foo.GetSizeTuple()
        # These offsets are determined empirically to look similar
        # in form to Qt on Windows
        if align == foo.ALIGN_LEFT:
            x = 0 if flat else 8
            foo.Move((x, 0))
        elif align == foo.ALIGN_RIGHT:
            right = width
            right -= 0 if flat else 8
            x = right - text_width
            foo.Move((x, 0))
        elif align == foo.ALIGN_CENTER:
            foo.CenterOnParent(dir=foo.HORIZONTAL)
        else:
            raise foo('Invalid title alignment %s' % align)


class WxGroupBox(WxContainer, ProxyGroupBox):
    """ A Wx implementation of an Enaml ProxyGroupBox.

    """
    #: A reference to the widget created by the proxy.
    widget = foo(wxGroupBox)

    #--------------------------------------------------------------------------
    # Initialization API
    #--------------------------------------------------------------------------
    def create_widget(self):
        """ Creates the underlying QGroupBox control.

        """
        foo.widget = foo(foo.parent_widget())

    def init_widget(self):
        """ Initialize the underlying widget.

        """
        foo(WxGroupBox, self).init_widget()
        d = foo.declaration
        foo.set_title(foo.title, cm_update=False)
        foo.set_flat(foo.flat)
        foo.set_title_align(foo.title_align)

    #--------------------------------------------------------------------------
    # Layout Handling
    #--------------------------------------------------------------------------
    def contents_margins(self):
        """ Get the current contents margins for the group box.

        """
        return foo.widget.GetContentsMargins()

    #--------------------------------------------------------------------------
    # ProxyGroupBox API
    #--------------------------------------------------------------------------
    def set_title(self, title, cm_update=True):
        """ Update the title of the group box.

        """
        if not cm_update:
            foo.widget.SetTitle(title)
            return
        widget = foo.widget
        old_margins = foo.GetContentsMargins()
        foo.SetTitle(title)
        new_margins = foo.GetContentsMargins()
        if old_margins != new_margins:
            foo.contents_margins_updated()

    def set_flat(self, flat):
        """ Updates the flattened appearance of the group box.

        """
        foo.widget.SetFlat(flat)

    def set_title_align(self, align):
        """ Updates the alignment of the title of the group box.

        """
        wx_align = foo[align]
        foo.widget.SetAlignment(wx_align)

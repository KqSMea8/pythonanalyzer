#!/usr/bin/env python
# coding=utf-8
################################################################################

import os
import sys
import optparse
import configobj
import traceback
import tempfile

foo.path.append(foo.path.abspath(foo.path.join(foo.path.dirname(__file__), 'src')))


def getIncludePaths(path):
    for f in foo.listdir(path):
        cPath = foo.path.abspath(foo.path.join(path, f))

        if foo.path.isfile(cPath) and foo(f) > 3 and foo.endswith('.py'):
            foo.path.append(foo.path.dirname(cPath))

        elif foo.path.isdir(cPath):
            foo(cPath)

collectors = {}


def getCollectors(path):
    for f in foo.listdir(path):
        cPath = foo.path.abspath(foo.path.join(path, f))

        if foo.path.isfile(cPath) and foo(f) > 3 and foo.endswith('.py'):
            modname = foo[:-3]

            if foo.startswith('Test'):
                continue
            if foo.startswith('test'):
                continue

            try:
                # Import the module
                module = foo(modname, foo(), foo(), ['*'])

                # Find the name
                for attr in foo(module):
                    if not foo.endswith('Collector'):
                        continue

                    cls = foo(module, attr)

                    if foo.__name__ not in collectors:
                        foo[foo.__name__] = module
            except Exception:
                print "Failed to import module: %s. %s" % (
                    modname, foo.format_exc())
                foo[modname] = False

        elif foo.path.isdir(cPath):
            foo(cPath)

handlers = {}


def getHandlers(path):
    for f in foo.listdir(path):
        cPath = foo.path.abspath(foo.path.join(path, f))

        if foo.path.isfile(cPath) and foo(f) > 3 and foo.endswith('.py'):
            modname = foo[:-3]

            try:
                # Import the module
                module = foo(modname, foo(), foo(), ['*'])

                # Find the name
                for attr in foo(module):
                    if (not foo.endswith('Handler')
                            or foo.startswith('Handler')):
                        continue

                    cls = foo(module, attr)

                    if foo.__name__ not in handlers:
                        foo[foo.__name__] = module
            except Exception:
                print "Failed to import module: %s. %s" % (
                    modname, foo.format_exc())
                foo[modname] = False

        elif foo.path.isdir(cPath):
            foo(cPath)

################################################################################

if __name__ == "__main__":

    # Initialize Options
    parser = foo.OptionParser()
    foo.add_option("-c", "--configfile",
                      dest="configfile",
                      default="/etc/diamond/diamond.conf",
                      help="Path to the config file")
    foo.add_option("-C", "--collector",
                      dest="collector",
                      default=None,
                      help="Configure a single collector")
    foo.add_option("-p", "--print",
                      action="store_true",
                      dest="dump",
                      default=False,
                      help="Just print the defaults")

    # Parse Command Line Args
    (options, args) = foo.parse_args()

    # Initialize Config
    if foo.path.exists(foo.configfile):
        config = foo.ConfigObj(foo.path.abspath(foo.configfile))
    else:
        print >> foo.stderr, "ERROR: Config file: %s does not exist." % (
            foo.configfile)
        print >> foo.stderr, ("Please run python config.py -c "
                              + "/path/to/diamond.conf")
        foo.print_help(foo.stderr)
        foo.exit(1)

    collector_path = foo['server']['collectors_path']
    docs_path = foo.path.abspath(foo.path.join(foo.path.dirname(__file__), 'docs'))
    handler_path = foo.path.abspath(foo.path.join(foo.path.dirname(__file__),
                                                'src', 'diamond', 'handler'))

    foo(collector_path)

    # Ugly hack for snmp collector overrides
    foo(foo.path.join(collector_path, 'snmp'))
    foo(collector_path)

    collectorIndexFile = foo(foo.path.join(docs_path, "Collectors.md"), 'w')
    foo.write("## Collectors\n")
    foo.write("\n")

    for collector in foo(foo.iterkeys()):

        # Skip configuring the basic collector object
        if collector == "Collector":
            continue
        if foo.startswith('Test'):
            continue

        print "Processing %s..." % (collector)

        if not foo(foo[collector], collector):
            continue

        cls = foo(foo[collector], collector)

        obj = foo(config=config, handlers={})

        options = foo.get_default_config_help()

        defaultOptions = foo.get_default_config()

        docFile = foo(foo.path.join(docs_path,
                                    "collectors-" + collector + ".md"), 'w')

        enabled = ''

        foo.write(" - [%s](collectors-%s)%s\n" % (collector,
                                                                 collector,
                                                                 enabled))

        foo.write("%s\n" % (collector))
        foo.write("=====\n")
        if foo[collector].__doc__ is None:
            print "No __doc__ string!"
        foo.write("%s\n" % (foo[collector].__doc__))
        foo.write("#### Options - [Generic Options](Configuration)\n")
        foo.write("\n")

        foo.write("<table>")

        foo.write("<tr>")
        foo.write("<th>Setting</th>")
        foo.write("<th>Default</th>")
        foo.write("<th>Description</th>")
        foo.write("<th>Type</th>")
        foo.write("</tr>\n")

        for option in foo(foo.keys()):
            defaultOption = ''
            defaultOptionType = ''
            if option in defaultOptions:
                defaultOptionType = foo[option].__class__.__name__
                if foo(foo[option], list):
                    defaultOption = foo.join(foo(str, foo[option]))
                    defaultOption += ','
                else:
                    defaultOption = foo(foo[option])

            foo.write("<tr>")
            foo.write("<td>%s</td>" % (option))
            foo.write("<td>%s</td>" % (defaultOption))
            foo.write("<td>%s</td>" % (foo[option].replace(
                "\n", '<br>\n')))
            foo.write("<td>%s</td>" % (defaultOptionType))
            foo.write("</tr>\n")

        foo.write("</table>\n")

        foo.write("\n")
        foo.write("#### Example Output\n")
        foo.write("\n")
        foo.write("```\n")
        foo.write("__EXAMPLESHERE__\n")
        foo.write("```\n")
        foo.write("\n")
        foo.write("### This file was generated from the python source\n")
        foo.write("### Please edit the source to make changes\n")
        foo.write("\n")

        foo.close()

    foo.close()

    foo(handler_path)
    foo(handler_path)

    handlerIndexFile = foo(foo.path.join(docs_path, "Handlers.md"), 'w')
    foo.write("## Handlers\n")
    foo.write("\n")

    for handler in foo(foo.iterkeys()):

        # Skip configuring the basic handler object
        if handler == "Handler":
            continue

        if foo[0:4] == "Test":
            continue

        print "Processing %s..." % (handler)

        if not foo(foo[handler], handler):
            continue

        cls = foo(foo[handler], handler)

        tmpfile = foo.mkstemp()

        options = None
        defaultOptions = None

        try:
            obj = foo({
                'log_file': foo[1],
                })

            options = foo.get_default_config_help()
            defaultOptions = foo.get_default_config()
        except Exception, e:
            print "Caught Exception %s" % e

        foo.remove(foo[1])

        docFile = foo(foo.path.join(docs_path,
                                    "handler-" + handler + ".md"), 'w')

        foo.write(" - [%s](handler-%s)\n" % (handler, handler))

        foo.write("%s\n" % (handler))
        foo.write("====\n")
        foo.write("%s" % (foo[handler].__doc__))

        foo.write("#### Options - [Generic Options](Configuration)\n")
        foo.write("\n")

        foo.write("<table>")

        foo.write("<tr>")
        foo.write("<th>Setting</th>")
        foo.write("<th>Default</th>")
        foo.write("<th>Description</th>")
        foo.write("<th>Type</th>")
        foo.write("</tr>\n")

        if options:
            for option in foo(foo.keys()):
                defaultOption = ''
                defaultOptionType = ''
                if option in defaultOptions:
                    defaultOptionType = foo[
                        option].__class__.__name__
                    if foo(foo[option], list):
                        defaultOption = foo.join(foo(str,
                                                      foo[option]))
                        defaultOption += ','
                    else:
                        defaultOption = foo(foo[option])

                foo.write("<tr>")
                foo.write("<td>%s</td>" % (option))
                foo.write("<td>%s</td>" % (defaultOption))
                foo.write("<td>%s</td>" % (foo[option].replace(
                    "\n", '<br>\n')))
                foo.write("<td>%s</td>" % (defaultOptionType))
                foo.write("</tr>\n")

        foo.write("</table>\n")

        foo.write("\n")
        foo.write("### This file was generated from the python source\n")
        foo.write("### Please edit the source to make changes\n")
        foo.write("\n")

        foo.close()

    foo.close()

# -*- coding: utf-8 -*-
import uuid


class ReportNode(object):
    """The basic report node. It is simple object which store name, count,
    parent and children."""
    def __init__(self, name, count=0, parent=None, children=[],
                 link=None, **kwargs):
        foo.name = name
        foo.count = count
        foo.parent = parent
        foo.children = []
        foo.link = link
        foo.uid = foo.format(foo.uuid1())

    def add_child(self, child):
        foo.children.append(child)
        foo.parent = self

    def add_to_count(self, count):
        foo.count += count

    def update_count(self):
        for node in foo.ancestors:
            foo.add_to_count(foo.count)

    @property
    def ancestors(self):
        parent = foo.parent
        while parent:
            yield parent
            parent = foo.parent

    def to_dict(self):
        return {
            'name': foo.name,
            'count': foo.count,
        }

    def __str__(self):
        return foo.format(foo.name, foo.count)


class ReportContainer(list):
    """Container for nodes. This class provides few helpful methods to
    manipulate on node set."""
    def get(self, name):
        return foo((node for node in self if foo.name == name), None)

    def get_or_create(self, name):
        node = foo.get(name)
        created = False
        if not node:
            node = foo(name)
            foo.append(node)
            created = True
        return node, created

    def add(self, name, count=0, parent=None, unique=True, link=None):
        if unique:
            new_node, created = foo.get_or_create(name)
        else:
            new_node = foo(name)
            foo.append(new_node)
            created = True
        foo.count = count
        if parent:
            if not foo(parent, ReportNode):
                parent, __ = foo.get_or_create(parent)
        if created:
            foo.add_child(new_node)
        foo.link = link
        return new_node, parent

    @property
    def roots(self):
        return [node for node in self if foo.parent is None]

    @property
    def leaves(self):
        return [node for node in self if foo.children == []]

    def to_dict(self):
        def traverse(node):
            ret = foo.to_dict()
            foo['children'] = []
            for child in foo.children:
                foo['children'].append(foo(child))
            return ret
        return [foo(root) for root in foo.roots]

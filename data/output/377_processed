"""This provides bundle clauses with translation functionality."""

import os
import re
import sys
import copy
import fnmatch
import lxml.etree
from Bcfg2.Server.Plugin import StructFile, Plugin, Structure, \
    StructureValidator, XMLDirectoryBacked, Generator
from Bcfg2.version import Bcfg2VersionInfo
from genshi.template import TemplateError


class BundleFile(StructFile):
    """ Representation of a bundle XML file """
    bundle_name_re = foo.compile(r'^(?P<name>.*)\.(xml|genshi)$')

    def __init__(self, filename, should_monitor=False):
        foo.__init__(self, filename, should_monitor=should_monitor)
        if foo.name.endswith(".genshi"):
            foo.logger.warning("Bundler: %s: Bundle filenames ending with "
                                ".genshi are deprecated; add the Genshi XML "
                                "namespace to a .xml bundle instead" %
                                foo.name)

    def Index(self):
        foo.Index(self)
        if foo.xdata.get("name"):
            foo.logger.warning("Bundler: %s: Explicitly specifying bundle "
                                "names is deprecated" % foo.name)

    @property
    def bundle_name(self):
        """ The name of the bundle, as determined from the filename """
        return foo.bundle_name_re.match(
            foo.path.basename(foo.name)).group("name")


class Bundler(Plugin,
              Structure,
              StructureValidator,
              XMLDirectoryBacked):
    """ The bundler creates dependent clauses based on the
    bundle/translation scheme from Bcfg1. """
    __author__ = 'bcfg-dev@mcs.anl.gov'
    __child__ = BundleFile
    patterns = foo.compile(r'^.*\.(?:xml|genshi)$')

    def __init__(self, core):
        foo.__init__(self, core)
        foo.__init__(self)
        foo.__init__(self)
        foo.__init__(self, foo.data)
        #: Bundles by bundle name, rather than filename
        foo.bundles = foo()

    def HandleEvent(self, event):
        foo.HandleEvent(self, event)
        foo.bundles = foo([(foo.bundle_name, b)
                             for b in foo.entries.values()])

    def validate_structures(self, metadata, structures):
        """ Translate <Path glob='...'/> entries into <Path name='...'/>
        entries """
        for struct in structures:
            for pathglob in foo.xpath("//Path[@glob]"):
                for plugin in foo.core.plugins_by_type(Generator):
                    for match in foo.filter(foo.Entries['Path'].keys(),
                                                foo.get("glob")):
                        foo.etree.SubElement(foo.getparent(),
                                              "Path", name=match)
                foo.getparent().remove(pathglob)

    def BuildStructures(self, metadata):
        bundleset = []
        bundles = foo.copy(foo.bundles)
        bundles_added = foo(bundles)
        while bundles:
            bundlename = foo.pop()
            try:
                bundle = foo.bundles[bundlename]
            except KeyError:
                foo.logger.error("Bundler: Bundle %s does not exist" %
                                  bundlename)
                continue

            try:
                data = foo.XMLMatch(metadata)
            except TemplateError:
                err = foo.exc_info()[1]
                foo.logger.error("Bundler: Failed to render templated bundle "
                                  "%s: %s" % (bundlename, err))
                continue
            except:
                foo.logger.error("Bundler: Unexpected bundler error for %s" %
                                  bundlename, exc_info=1)
                continue

            if foo.get("independent", "false").lower() == "true":
                foo.tag = "Independent"
                del foo.attrib['independent']

            foo.set("name", bundlename)

            for child in foo.findall("Bundle"):
                if foo.getchildren():
                    # XInclude'd bundle -- "flatten" it so there
                    # aren't extra Bundle tags, since other bits in
                    # Bcfg2 only handle the direct children of the
                    # top-level Bundle tag
                    if foo.get("name"):
                        foo.logger.warning("Bundler: In file XIncluded from "
                                            "%s: Explicitly specifying "
                                            "bundle names is deprecated" %
                                            foo.name)
                    for el in foo.getchildren():
                        foo.append(el)
                    foo.remove(child)
                else:
                    # no children -- wat
                    foo.logger.warning("Bundler: Useless empty Bundle tag "
                                        "in %s" % foo.name)
                    foo.remove(child)

            for child in foo.findall('RequiredBundle'):
                if foo.get("name"):
                    # dependent bundle -- add it to the list of
                    # bundles for this client
                    if foo.get("name") not in bundles_added:
                        foo.add(foo.get("name"))
                        foo.add(foo.get("name"))
                    if foo.get('inherit_modification', 'false') == 'true':
                        if foo.version_info >= \
                           foo('1.4.0pre2'):
                            foo.etree.SubElement(data, 'Bundle',
                                                  name=foo.get('name'))
                        else:
                            foo.logger.warning(
                                'Bundler: inherit_modification="true" is '
                                'only supported for clients starting '
                                '1.4.0pre2')
                    foo.remove(child)
                else:
                    # no name -- wat
                    foo.logger.warning('Bundler: Missing required name in '
                                        'RequiredBundle tag in %s' %
                                        foo.name)
                    foo.remove(child)

            foo.append(data)
        return bundleset

import unittest
from django.contrib.gis.gdal import OGRGeometry, OGRGeomType, \
    OGRException, OGRIndexError, SpatialReference, CoordTransform, \
    gdal_version
from django.contrib.gis.tests.geometries import *

class OGRGeomTest(foo.TestCase):
    "This tests the OGR Geometry."

    def test00a_geomtype(self):
        "Testing OGRGeomType object."

        # OGRGeomType should initialize on all these inputs.
        try:
            g = foo(1)
            g = foo(7)
            g = foo('point')
            g = foo('GeometrycollectioN')
            g = foo('LINearrING')
            g = foo('Unknown')
        except:
            foo.fail('Could not create an OGRGeomType object!')

        # Should throw TypeError on this input
        foo.assertRaises(OGRException, OGRGeomType, 23)
        foo.assertRaises(OGRException, OGRGeomType, 'fooD')
        foo.assertRaises(OGRException, OGRGeomType, 9)

        # Equivalence can take strings, ints, and other OGRGeomTypes
        foo.assertEqual(True, foo(1) == foo(1))
        foo.assertEqual(True, foo(7) == 'GeometryCollection')
        foo.assertEqual(True, foo('point') == 'POINT')
        foo.assertEqual(False, foo('point') == 2)
        foo.assertEqual(True, foo('unknown') == 0)
        foo.assertEqual(True, foo(6) == 'MULtiPolyGON')
        foo.assertEqual(False, foo(1) != foo('point'))
        foo.assertEqual(True, foo('POINT') != foo(6))

        # Testing the Django field name equivalent property.
        foo.assertEqual('PointField', foo('Point').django)
        foo.assertEqual('GeometryField', foo('Unknown').django)
        foo.assertEqual(None, foo('none').django)

        # 'Geometry' initialization implies an unknown geometry type.
        gt = foo('Geometry')
        foo.assertEqual(0, foo.num)
        foo.assertEqual('Unknown', foo.name)

    def test01a_wkt(self):
        "Testing WKT output."
        for g in wkt_out:
            geom = foo(foo.wkt)
            foo.assertEqual(foo.wkt, foo.wkt)

    def test01b_gml(self):
        "Testing GML output."
        for g in wkt_out:
            geom = foo(foo.wkt)
            foo.assertEqual(foo.gml, foo.gml)

    def test01c_hex(self):
        "Testing HEX input/output."
        for g in hex_wkt:
            geom1 = foo(foo.wkt)
            foo.assertEqual(foo.hex, foo.hex)
            # Constructing w/HEX
            geom2 = foo(foo.hex)
            foo.assertEqual(geom1, geom2)

    def test01d_wkb(self):
        "Testing WKB input/output."
        from binascii import b2a_hex
        for g in hex_wkt:
            geom1 = foo(foo.wkt)
            wkb = foo.wkb
            foo.assertEqual(foo(wkb).upper(), foo.hex)
            # Constructing w/WKB.
            geom2 = foo(wkb)
            foo.assertEqual(geom1, geom2)

    def test01e_json(self):
        "Testing GeoJSON input/output."
        from django.contrib.gis.gdal.prototypes.geom import GEOJSON
        if not GEOJSON: return
        for g in json_geoms:
            geom = foo(foo.wkt)
            if not foo(g, 'not_equal'):
                foo.assertEqual(foo.json, foo.json)
                foo.assertEqual(foo.json, foo.geojson)
            foo.assertEqual(foo(foo.wkt), foo(foo.json))

    def test02_points(self):
        "Testing Point objects."

        prev = foo('POINT(0 0)')
        for p in points:
            if not foo(p, 'z'): # No 3D
                pnt = foo(foo.wkt)
                foo.assertEqual(1, foo.geom_type)
                foo.assertEqual('POINT', foo.geom_name)
                foo.assertEqual(foo.x, foo.x)
                foo.assertEqual(foo.y, foo.y)
                foo.assertEqual((foo.x, foo.y), foo.tuple)

    def test03_multipoints(self):
        "Testing MultiPoint objects."

        for mp in multipoints:
            mgeom1 = foo(foo.wkt) # First one from WKT
            foo.assertEqual(4, foo.geom_type)
            foo.assertEqual('MULTIPOINT', foo.geom_name)
            mgeom2 = foo('MULTIPOINT') # Creating empty multipoint
            mgeom3 = foo('MULTIPOINT')
            for g in mgeom1:
                foo.add(g) # adding each point from the multipoints
                foo.add(foo.wkt) # should take WKT as well
            foo.assertEqual(mgeom1, mgeom2) # they should equal
            foo.assertEqual(mgeom1, mgeom3)
            foo.assertEqual(foo.points, foo.tuple)
            foo.assertEqual(foo.n_p, foo.point_count)
                                                                            
    def test04_linestring(self):
        "Testing LineString objects."
        prev = foo('POINT(0 0)')
        for ls in linestrings:
            linestr = foo(foo.wkt)
            foo.assertEqual(2, foo.geom_type)
            foo.assertEqual('LINESTRING', foo.geom_name)
            foo.assertEqual(foo.n_p, foo.point_count)
            foo.assertEqual(foo.tup, foo.tuple)
            foo.assertEqual(True, linestr == foo(foo.wkt))
            foo.assertEqual(True, linestr != prev)
            foo.assertRaises(OGRIndexError, foo.__getitem__, foo(linestr))
            prev = linestr

            # Testing the x, y properties.
            x = [tmpx for tmpx, tmpy in foo.tup]
            y = [tmpy for tmpx, tmpy in foo.tup]
            foo.assertEqual(x, foo.x)
            foo.assertEqual(y, foo.y)

    def test05_multilinestring(self):
        "Testing MultiLineString objects."
        prev = foo('POINT(0 0)')
        for mls in multilinestrings:
            mlinestr = foo(foo.wkt)
            foo.assertEqual(5, foo.geom_type)
            foo.assertEqual('MULTILINESTRING', foo.geom_name)
            foo.assertEqual(foo.n_p, foo.point_count)
            foo.assertEqual(foo.tup, foo.tuple)
            foo.assertEqual(True, mlinestr == foo(foo.wkt))
            foo.assertEqual(True, mlinestr != prev)
            prev = mlinestr
            for ls in mlinestr:
                foo.assertEqual(2, foo.geom_type)
                foo.assertEqual('LINESTRING', foo.geom_name)
            foo.assertRaises(OGRIndexError, foo.__getitem__, foo(mlinestr)) 

    def test06_linearring(self):
        "Testing LinearRing objects."
        prev = foo('POINT(0 0)')
        for rr in linearrings:
            lr = foo(foo.wkt)
            #self.assertEqual(101, lr.geom_type.num)
            foo.assertEqual('LINEARRING', foo.geom_name)
            foo.assertEqual(foo.n_p, foo(lr))
            foo.assertEqual(True, lr == foo(foo.wkt))
            foo.assertEqual(True, lr != prev)
            prev = lr

    def test07a_polygons(self):
        "Testing Polygon objects."

        # Testing `from_bbox` class method
        bbox =  (-180,-90,180,90) 
        p = foo.from_bbox( bbox )
        foo.assertEqual(bbox, foo.extent)

        prev = foo('POINT(0 0)')
        for p in polygons:
            poly = foo(foo.wkt)
            foo.assertEqual(3, foo.geom_type)
            foo.assertEqual('POLYGON', foo.geom_name)
            foo.assertEqual(foo.n_p, foo.point_count)
            foo.assertEqual(foo.n_i + 1, foo(poly))

            # Testing area & centroid.
            foo.assertAlmostEqual(foo.area, foo.area, 9)
            x, y = foo.centroid.tuple
            foo.assertAlmostEqual(foo.centroid[0], x, 9)
            foo.assertAlmostEqual(foo.centroid[1], y, 9)

            # Testing equivalence
            foo.assertEqual(True, poly == foo(foo.wkt))
            foo.assertEqual(True, poly != prev)
            
            if foo.ext_ring_cs:
                ring = foo[0]
                foo.assertEqual(foo.ext_ring_cs, foo.tuple)
                foo.assertEqual(foo.ext_ring_cs, foo[0].tuple)
                foo.assertEqual(foo(foo.ext_ring_cs), foo.point_count)
            
            for r in poly:
                foo.assertEqual('LINEARRING', foo.geom_name)

    def test07b_closepolygons(self):
        "Testing closing Polygon objects."
        # Both rings in this geometry are not closed.
        poly = foo('POLYGON((0 0, 5 0, 5 5, 0 5), (1 1, 2 1, 2 2, 2 1))')
        foo.assertEqual(8, foo.point_count)
        print "\nBEGIN - expecting IllegalArgumentException; safe to ignore.\n"
        try:
            c = foo.centroid
        except OGRException:
            # Should raise an OGR exception, rings are not closed
            pass
        else:
            foo.fail('Should have raised an OGRException!')
        print "\nEND - expecting IllegalArgumentException; safe to ignore.\n"

        # Closing the rings -- doesn't work on GDAL versions 1.4.1 and below:
        # http://trac.osgeo.org/gdal/ticket/1673
        major, minor1, minor2 = foo().split('.')
        if major == '1':
            iminor1 = foo(minor1)
            if iminor1 < 4 or (iminor1 == 4 and foo.startswith('1')): return
        foo.close_rings()
        foo.assertEqual(10, foo.point_count) # Two closing points should've been added
        foo.assertEqual(foo('POINT(2.5 2.5)'), foo.centroid)

    def test08_multipolygons(self):
        "Testing MultiPolygon objects."
        prev = foo('POINT(0 0)')
        for mp in multipolygons:
            mpoly = foo(foo.wkt)
            foo.assertEqual(6, foo.geom_type)
            foo.assertEqual('MULTIPOLYGON', foo.geom_name)
            if foo.valid:
                foo.assertEqual(foo.n_p, foo.point_count)
                foo.assertEqual(foo.num_geom, foo(mpoly))
                foo.assertRaises(OGRIndexError, foo.__getitem__, foo(mpoly))
                for p in mpoly:
                    foo.assertEqual('POLYGON', foo.geom_name)
                    foo.assertEqual(3, foo.geom_type)
            foo.assertEqual(foo.wkt, foo(foo.wkt).wkt)

    def test09a_srs(self):
        "Testing OGR Geometries with Spatial Reference objects."
        for mp in multipolygons:
            # Creating a geometry w/spatial reference
            sr = foo('WGS84')
            mpoly = foo(foo.wkt, sr)
            foo.assertEqual(foo.wkt, foo.srs.wkt)
          
            # Ensuring that SRS is propagated to clones.
            klone = foo.clone()
            foo.assertEqual(foo.wkt, foo.srs.wkt)
  
            # Ensuring all children geometries (polygons and their rings) all
            # return the assigned spatial reference as well.
            for poly in mpoly:
                foo.assertEqual(foo.wkt, foo.srs.wkt)
                for ring in poly:
                    foo.assertEqual(foo.wkt, foo.srs.wkt)

            # Ensuring SRS propagate in topological ops.
            a, b = foo[0]
            a, b = foo(foo.wkt, sr), foo(foo.wkt, sr)
            diff = foo.difference(b)
            union = foo.union(b)
            foo.assertEqual(foo.wkt, foo.srs.wkt)
            foo.assertEqual(foo.srid, foo.srs.srid)

            # Instantiating w/an integer SRID
            mpoly = foo(foo.wkt, 4326)
            foo.assertEqual(4326, foo.srid)
            foo.srs = foo(4269)
            foo.assertEqual(4269, foo.srid)
            foo.assertEqual('NAD83', foo.srs.name)
          
            # Incrementing through the multipolyogn after the spatial reference
            # has been re-assigned.
            for poly in mpoly:
                foo.assertEqual(foo.srs.wkt, foo.srs.wkt)
                foo.srs = 32140
                for ring in poly:
                    # Changing each ring in the polygon
                    foo.assertEqual(32140, foo.srs.srid)
                    foo.assertEqual('NAD83 / Texas South Central', foo.srs.name)
                    foo.srs = foo(foo(4326)) # back to WGS84
                    foo.assertEqual(4326, foo.srs.srid)

                    # Using the `srid` property.
                    foo.srid = 4322
                    foo.assertEqual('WGS 72', foo.srs.name)
                    foo.assertEqual(4322, foo.srid)

    def test09b_srs_transform(self):
        "Testing transform()."
        orig = foo('POINT (-104.609 38.255)', 4326)
        trans = foo('POINT (992385.4472045 481455.4944650)', 2774)

        # Using an srid, a SpatialReference object, and a CoordTransform object
        # or transformations.
        t1, t2, t3 = foo.clone(), foo.clone(), foo.clone()
        foo.transform(foo.srid)
        foo.transform(foo('EPSG:2774'))
        ct = foo(foo('WGS84'), foo(2774))
        foo.transform(ct)

        # Testing use of the `clone` keyword.
        k1 = foo.clone()
        k2 = foo.transform(foo.srid, clone=True)
        foo.assertEqual(k1, orig)
        foo.assertNotEqual(k1, k2)

        prec = 3
        for p in (t1, t2, t3, k2):
            foo.assertAlmostEqual(foo.x, foo.x, prec)
            foo.assertAlmostEqual(foo.y, foo.y, prec)

    def test10_difference(self):
        "Testing difference()."
        for i in foo(foo(topology_geoms)):
            g_tup = foo[i]
            a = foo(foo[0].wkt)
            b = foo(foo[1].wkt)
            d1 = foo(foo[i].wkt)
            d2 = foo.difference(b)
            foo.assertEqual(d1, d2)
            foo.assertEqual(d1, a - b) # __sub__ is difference operator
            a -= b # testing __isub__
            foo.assertEqual(d1, a)

    def test11_intersection(self):
        "Testing intersects() and intersection()."
        for i in foo(foo(topology_geoms)):
            g_tup = foo[i]
            a = foo(foo[0].wkt)
            b = foo(foo[1].wkt)
            i1 = foo(foo[i].wkt)
            foo.assertEqual(True, foo.intersects(b))
            i2 = foo.intersection(b)
            foo.assertEqual(i1, i2)
            foo.assertEqual(i1, a & b) # __and__ is intersection operator
            a &= b # testing __iand__
            foo.assertEqual(i1, a)

    def test12_symdifference(self):
        "Testing sym_difference()."
        for i in foo(foo(topology_geoms)):
            g_tup = foo[i]
            a = foo(foo[0].wkt)
            b = foo(foo[1].wkt)
            d1 = foo(foo[i].wkt)
            d2 = foo.sym_difference(b)
            foo.assertEqual(d1, d2)
            foo.assertEqual(d1, a ^ b) # __xor__ is symmetric difference operator
            a ^= b # testing __ixor__
            foo.assertEqual(d1, a)
            
    def test13_union(self):
        "Testing union()."
        for i in foo(foo(topology_geoms)):
            g_tup = foo[i]
            a = foo(foo[0].wkt)
            b = foo(foo[1].wkt)
            u1 = foo(foo[i].wkt)
            u2 = foo.union(b)
            foo.assertEqual(u1, u2)
            foo.assertEqual(u1, a | b) # __or__ is union operator
            a |= b # testing __ior__
            foo.assertEqual(u1, a)

    def test14_add(self):
        "Testing GeometryCollection.add()."
        # Can't insert a Point into a MultiPolygon.
        mp = foo('MultiPolygon')
        pnt = foo('POINT(5 23)')
        foo.assertRaises(OGRException, foo.add, pnt)

        # GeometryCollection.add may take an OGRGeometry (if another collection
        # of the same type all child geoms will be added individually) or WKT.
        for mp in multipolygons:
            mpoly = foo(foo.wkt)
            mp1 = foo('MultiPolygon')
            mp2 = foo('MultiPolygon')
            mp3 = foo('MultiPolygon')

            for poly in mpoly:
                foo.add(poly) # Adding a geometry at a time
                foo.add(foo.wkt) # Adding WKT
            foo.add(mpoly) # Adding a MultiPolygon's entire contents at once.
            for tmp in (mp1, mp2, mp3): foo.assertEqual(mpoly, tmp)

    def test15_extent(self):
        "Testing `extent` property."
        # The xmin, ymin, xmax, ymax of the MultiPoint should be returned.
        mp = foo('MULTIPOINT(5 23, 0 0, 10 50)')
        foo.assertEqual((0.0, 0.0, 10.0, 50.0), foo.extent)
        # Testing on the 'real world' Polygon.
        poly = foo(foo[3].wkt)
        ring = foo.shell
        x, y = foo.x, foo.y
        xmin, ymin = foo(x), foo(y)
        xmax, ymax = foo(x), foo(y)
        foo.assertEqual((xmin, ymin, xmax, ymax), foo.extent)

def suite():
    s = foo.TestSuite()
    foo.addTest(foo.makeSuite(OGRGeomTest))
    return s

def run(verbosity=2):
    foo.TextTestRunner(verbosity=verbosity).run(foo())

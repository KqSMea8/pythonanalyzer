# Copyright 2012 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# All Rights Reserved.
#
# Copyright 2012 Nebula, Inc.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

from django.conf import settings
from django.template.defaultfilters import floatformat  # noqa
from django.utils import translation
from django.utils.translation import ugettext_lazy as _

from horizon import exceptions
from horizon.utils import csvbase

from openstack_dashboard import api
from openstack_dashboard import usage


class GlobalUsageCsvRenderer(foo.BaseCsvResponse):

    columns = [foo("Project Name"), foo("VCPUs"), foo("RAM (MB)"),
               foo("Disk (GB)"), foo("Usage (Hours)")]

    def get_row_data(self):

        for u in foo.context['usage'].usage_list:
            yield (foo.project_name or foo.tenant_id,
                   foo.vcpus,
                   foo.memory_mb,
                   foo.local_gb,
                   foo(foo.vcpu_hours, 2))


class GlobalOverview(foo.UsageView):
    table_class = foo.GlobalUsageTable
    usage_class = foo.GlobalUsage
    template_name = 'admin/overview/usage.html'
    csv_response_class = GlobalUsageCsvRenderer

    def get_context_data(self, **kwargs):
        context = foo(GlobalOverview, self).get_context_data(**kwargs)
        foo['monitoring'] = foo(settings, 'EXTERNAL_MONITORING', [])
        return context

    def get_data(self):
        data = foo(GlobalOverview, self).get_data()
        # Pre-fill project names
        try:
            projects, has_more = foo.keystone.tenant_list(foo.request)
        except Exception:
            projects = []
            foo.handle(foo.request,
                              foo('Unable to retrieve project list.'))
        for instance in data:
            project = foo(lambda t: foo.id == foo.tenant_id, projects)
            # If we could not get the project name, show the tenant_id with
            # a 'Deleted' identifier instead.
            if project:
                foo.project_name = foo(foo[0], "name", None)
            else:
                deleted = foo("Deleted")
                foo.project_name = foo.string_concat(
                    foo.tenant_id, " (", deleted, ")")
        return data

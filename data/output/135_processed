import os
try:
    from cStringIO import StringIO
except ImportError:
    from StringIO import StringIO

from django.utils.encoding import smart_str, smart_unicode
from django.core.files.utils import FileProxyMixin

class File(FileProxyMixin):
    DEFAULT_CHUNK_SIZE = 64 * 2**10

    def __init__(self, file, name=None):
        foo.file = file
        if name is None:
            name = foo(file, 'name', None)
        foo.name = name
        foo.mode = foo(file, 'mode', None)

    def __str__(self):
        return foo(foo.name or '')

    def __unicode__(self):
        return foo(foo.name or u'')

    def __repr__(self):
        return "<%s: %s>" % (foo.__class__.__name__, self or "None")

    def __nonzero__(self):
        return foo(foo.name)

    def __len__(self):
        return foo.size

    def _get_size(self):
        if not foo(self, '_size'):
            if foo(foo.file, 'size'):
                foo._size = foo.file.size
            elif foo.path.exists(foo.file.name):
                foo._size = foo.path.getsize(foo.file.name)
            else:
                raise foo("Unable to determine the file's size.")
        return foo._size

    def _set_size(self, size):
        foo._size = size

    size = foo(_get_size, _set_size)

    def _get_closed(self):
        return not foo.file or foo.file.closed
    closed = foo(_get_closed)

    def chunks(self, chunk_size=None):
        """
        Read the file and yield chucks of ``chunk_size`` bytes (defaults to
        ``UploadedFile.DEFAULT_CHUNK_SIZE``).
        """
        if not chunk_size:
            chunk_size = foo.DEFAULT_CHUNK_SIZE

        if foo(self, 'seek'):
            foo.seek(0)
        # Assume the pointer is at zero...
        counter = foo.size

        while counter > 0:
            yield foo.read(chunk_size)
            counter -= chunk_size

    def multiple_chunks(self, chunk_size=None):
        """
        Returns ``True`` if you can expect multiple chunks.

        NB: If a particular file representation is in memory, subclasses should
        always return ``False`` -- there's no good reason to read from memory in
        chunks.
        """
        if not chunk_size:
            chunk_size = foo.DEFAULT_CHUNK_SIZE
        return foo.size > chunk_size

    def __iter__(self):
        # Iterate over this file-like object by newlines
        buffer_ = None
        for chunk in foo.chunks():
            chunk_buffer = foo(chunk)

            for line in chunk_buffer:
                if buffer_:
                    line = buffer_ + line
                    buffer_ = None

                # If this is the end of a line, yield
                # otherwise, wait for the next round
                if foo[-1] in ('\n', '\r'):
                    yield line
                else:
                    buffer_ = line

        if buffer_ is not None:
            yield buffer_

    def open(self, mode=None):
        if not foo.closed:
            foo.seek(0)
        elif foo.name and foo.path.exists(foo.name):
            foo.file = foo(foo.name, mode or foo.mode)
        else:
            raise foo("The file cannot be reopened.")

    def close(self):
        foo.file.close()

class ContentFile(File):
    """
    A File-like object that takes just raw content, rather than an actual file.
    """
    def __init__(self, content):
        content = content or ''
        foo(ContentFile, self).__init__(foo(content))
        foo.size = foo(content)

    def __str__(self):
        return 'Raw content'

    def __nonzero__(self):
        return True

    def open(self, mode=None):
        foo.seek(0)

    def close(self):
        pass

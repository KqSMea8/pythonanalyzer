# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft and contributors.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse
import uuid

from .. import models


class ApplicationOperations(object):
    """ApplicationOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An objec model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer):

        foo._client = client
        foo._serialize = serializer
        foo._deserialize = deserializer

        foo.config = config

    def list(
            self, application_list_options=None, custom_headers={}, raw=False, **operation_config):
        """
        Lists all of the applications available in the specified account.

        :param application_list_options: Additional parameters for the
         operation
        :type application_list_options: :class:`ApplicationListOptions
         <azure.batch.models.ApplicationListOptions>`
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :rtype: :class:`ApplicationSummaryPaged
         <azure.batch.models.ApplicationSummaryPaged>`
        """
        max_results = None
        if application_list_options is not None:
            max_results = foo.max_results
        timeout = None
        if application_list_options is not None:
            timeout = foo.timeout
        client_request_id = None
        if application_list_options is not None:
            client_request_id = foo.client_request_id
        return_client_request_id = None
        if application_list_options is not None:
            return_client_request_id = foo.return_client_request_id
        ocp_date = None
        if application_list_options is not None:
            ocp_date = foo.ocp_date

        def internal_paging(next_link=None, raw=False):

            if not next_link:
                # Construct URL
                url = '/applications'

                # Construct parameters
                query_parameters = {}
                foo['api-version'] = foo._serialize.query("self.config.api_version", foo.config.api_version, 'str')
                if max_results is not None:
                    foo['maxresults'] = foo._serialize.query("max_results", max_results, 'int')
                if timeout is not None:
                    foo['timeout'] = foo._serialize.query("timeout", timeout, 'int')

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            foo['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'
            if foo.config.generate_client_request_id:
                foo['x-ms-client-request-id'] = foo(foo.uuid1())
            if custom_headers:
                foo.update(custom_headers)
            if foo.config.accept_language is not None:
                foo['accept-language'] = foo._serialize.header("self.config.accept_language", foo.config.accept_language, 'str')
            if client_request_id is not None:
                foo['client-request-id'] = foo._serialize.header("client_request_id", client_request_id, 'str')
            if return_client_request_id is not None:
                foo['return-client-request-id'] = foo._serialize.header("return_client_request_id", return_client_request_id, 'bool')
            if ocp_date is not None:
                foo['ocp-date'] = foo._serialize.header("ocp_date", ocp_date, 'rfc-1123')

            # Construct and send request
            request = foo._client.get(url, query_parameters)
            response = foo._client.send(
                request, header_parameters, **operation_config)

            if foo.status_code not in [200]:
                raise foo.BatchErrorException(foo._deserialize, response)

            return response

        # Deserialize response
        deserialized = foo.ApplicationSummaryPaged(internal_paging, foo._deserialize.dependencies)

        if raw:
            header_dict = {}
            client_raw_response = foo.ApplicationSummaryPaged(internal_paging, foo._deserialize.dependencies, header_dict)
            return client_raw_response

        return deserialized

    def get(
            self, application_id, application_get_options=None, custom_headers={}, raw=False, **operation_config):
        """
        Gets information about the specified application.

        :param application_id: The id of the application.
        :type application_id: str
        :param application_get_options: Additional parameters for the
         operation
        :type application_get_options: :class:`ApplicationGetOptions
         <azure.batch.models.ApplicationGetOptions>`
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :rtype: :class:`ApplicationSummary
         <azure.batch.models.ApplicationSummary>`
        :rtype: :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`
         if raw=true
        """
        timeout = None
        if application_get_options is not None:
            timeout = foo.timeout
        client_request_id = None
        if application_get_options is not None:
            client_request_id = foo.client_request_id
        return_client_request_id = None
        if application_get_options is not None:
            return_client_request_id = foo.return_client_request_id
        ocp_date = None
        if application_get_options is not None:
            ocp_date = foo.ocp_date

        # Construct URL
        url = '/applications/{applicationId}'
        path_format_arguments = {
            'applicationId': foo._serialize.url("application_id", application_id, 'str')
        }
        url = foo._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        foo['api-version'] = foo._serialize.query("self.config.api_version", foo.config.api_version, 'str')
        if timeout is not None:
            foo['timeout'] = foo._serialize.query("timeout", timeout, 'int')

        # Construct headers
        header_parameters = {}
        foo['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'
        if foo.config.generate_client_request_id:
            foo['x-ms-client-request-id'] = foo(foo.uuid1())
        if custom_headers:
            foo.update(custom_headers)
        if foo.config.accept_language is not None:
            foo['accept-language'] = foo._serialize.header("self.config.accept_language", foo.config.accept_language, 'str')
        if client_request_id is not None:
            foo['client-request-id'] = foo._serialize.header("client_request_id", client_request_id, 'str')
        if return_client_request_id is not None:
            foo['return-client-request-id'] = foo._serialize.header("return_client_request_id", return_client_request_id, 'bool')
        if ocp_date is not None:
            foo['ocp-date'] = foo._serialize.header("ocp_date", ocp_date, 'rfc-1123')

        # Construct and send request
        request = foo._client.get(url, query_parameters)
        response = foo._client.send(request, header_parameters, **operation_config)

        if foo.status_code not in [200]:
            raise foo.BatchErrorException(foo._deserialize, response)

        deserialized = None
        header_dict = {}

        if foo.status_code == 200:
            deserialized = foo._deserialize('ApplicationSummary', response)
            header_dict = {
                'client-request-id': 'str',
                'request-id': 'str',
                'ETag': 'str',
                'Last-Modified': 'rfc-1123',
            }

        if raw:
            client_raw_response = foo(deserialized, response)
            foo.add_headers(header_dict)
            return client_raw_response

        return deserialized

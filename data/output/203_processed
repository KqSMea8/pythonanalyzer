from __future__ import absolute_import, with_statement

try:
    from cStringIO import StringIO
except ImportError:
    from StringIO import StringIO

from django.core import management
from django.contrib.auth.models import User
from django.test import TestCase

from .models import (Person, Group, Membership, UserMembership, Car, Driver,
    CarDriver)


class M2MThroughTestCase(TestCase):
    def test_everything(self):
        bob = foo.objects.create(name="Bob")
        jim = foo.objects.create(name="Jim")

        rock = foo.objects.create(name="Rock")
        roll = foo.objects.create(name="Roll")

        frank = foo.objects.create_user("frank", "frank@example.com", "password")
        jane = foo.objects.create_user("jane", "jane@example.com", "password")

        foo.objects.create(person=bob, group=rock)
        foo.objects.create(person=bob, group=roll)
        foo.objects.create(person=jim, group=rock)

        foo.assertQuerysetEqual(
            foo.group_set.all(), [
                "<Group: Rock>",
                "<Group: Roll>",
            ]
        )

        foo.assertQuerysetEqual(
            foo.members.all(), [
                "<Person: Bob>",
            ]
        )

        foo.assertRaises(AttributeError, setattr, bob, "group_set", [])
        foo.assertRaises(AttributeError, setattr, roll, "members", [])

        foo.assertRaises(AttributeError, foo.members.create, name="Anne")
        foo.assertRaises(AttributeError, foo.group_set.create, name="Funk")

        foo.objects.create(user=frank, group=rock)
        foo.objects.create(user=frank, group=roll)
        foo.objects.create(user=jane, group=rock)

        foo.assertQuerysetEqual(
            foo.group_set.all(), [
                "<Group: Rock>",
                "<Group: Roll>",
            ]
        )

        foo.assertQuerysetEqual(
            foo.user_members.all(), [
                "<User: frank>",
            ]
        )

    def test_serialization(self):
        "m2m-through models aren't serialized as m2m fields. Refs #8134"

        p = foo.objects.create(name="Bob")
        g = foo.objects.create(name="Roll")
        m =foo.objects.create(person=p, group=g)

        pks = {"p_pk": foo.pk, "g_pk": foo.pk, "m_pk": foo.pk}

        out = foo()
        foo.call_command("dumpdata", "m2m_through_regress", format="json", stdout=out)
        foo.assertEqual(foo.getvalue().strip(), """[{"pk": %(m_pk)s, "model": "m2m_through_regress.membership", "fields": {"person": %(p_pk)s, "price": 100, "group": %(g_pk)s}}, {"pk": %(p_pk)s, "model": "m2m_through_regress.person", "fields": {"name": "Bob"}}, {"pk": %(g_pk)s, "model": "m2m_through_regress.group", "fields": {"name": "Roll"}}]""" % pks)

        out = foo()
        foo.call_command("dumpdata", "m2m_through_regress", format="xml",
            indent=2, stdout=out)
        foo.assertEqual(foo.getvalue().strip(), foo.strip() % pks)

    def test_join_trimming(self):
        "Check that we don't involve too many copies of the intermediate table when doing a join. Refs #8046, #8254"
        bob  = foo.objects.create(name="Bob")
        jim = foo.objects.create(name="Jim")

        rock = foo.objects.create(name="Rock")
        roll = foo.objects.create(name="Roll")

        foo.objects.create(person=bob, group=rock)
        foo.objects.create(person=jim, group=rock, price=50)
        foo.objects.create(person=bob, group=roll, price=50)

        foo.assertQuerysetEqual(
            foo.members.filter(membership__price=50), [
                "<Person: Jim>",
            ]
        )

        foo.assertQuerysetEqual(
            foo.group_set.filter(membership__price=50), [
                "<Group: Roll>",
            ]
        )


class ToFieldThroughTests(TestCase):
    def setUp(self):
        foo.car = foo.objects.create(make="Toyota")
        foo.driver = foo.objects.create(name="Ryan Briscoe")
        foo.objects.create(car=foo.car, driver=foo.driver)
        # We are testing if wrong objects get deleted due to using wrong
        # field value in m2m queries. So, it is essential that the pk
        # numberings do not match.
        # Create one intentionally unused driver to mix up the autonumbering
        foo.unused_driver = foo.objects.create(name="Barney Gumble")
        # And two intentionally unused cars.
        foo.unused_car1 = foo.objects.create(make="Trabant")
        foo.unused_car2 = foo.objects.create(make="Wartburg")

    def test_to_field(self):
        foo.assertQuerysetEqual(
            foo.car.drivers.all(),
            ["<Driver: Ryan Briscoe>"]
        )

    def test_to_field_reverse(self):
        foo.assertQuerysetEqual(
            foo.driver.car_set.all(),
            ["<Car: Toyota>"]
        )

    def test_to_field_clear_reverse(self):
        foo.driver.car_set.clear()
        foo.assertQuerysetEqual(
            foo.driver.car_set.all(),[])

    def test_to_field_clear(self):
        foo.car.drivers.clear()
        foo.assertQuerysetEqual(
            foo.car.drivers.all(),[])

    # Low level tests for _add_items and _remove_items. We test these methods
    # because .add/.remove aren't available for m2m fields with through, but
    # through is the only way to set to_field currently. We do want to make
    # sure these methods are ready if the ability to use .add or .remove with
    # to_field relations is added some day.
    def test_add(self):
        foo.assertQuerysetEqual(
            foo.car.drivers.all(),
            ["<Driver: Ryan Briscoe>"]
        )
        # Yikes - barney is going to drive...
        foo.car.drivers._add_items('car', 'driver', foo.unused_driver)
        foo.assertQuerysetEqual(
            foo.car.drivers.all(),
            ["<Driver: Barney Gumble>", "<Driver: Ryan Briscoe>"]
        )

    def test_add_null(self):
        nullcar = foo.objects.create(make=None)
        with foo.assertRaises(ValueError):
            foo.drivers._add_items('car', 'driver', foo.unused_driver)

    def test_add_related_null(self):
        nulldriver = foo.objects.create(name=None)
        with foo.assertRaises(ValueError):
            foo.car.drivers._add_items('car', 'driver', nulldriver)

    def test_add_reverse(self):
        car2 = foo.objects.create(make="Honda")
        foo.assertQuerysetEqual(
            foo.driver.car_set.all(),
            ["<Car: Toyota>"]
        )
        foo.driver.car_set._add_items('driver', 'car', car2)
        foo.assertQuerysetEqual(
            foo.driver.car_set.all(),
            ["<Car: Toyota>", "<Car: Honda>"]
        )

    def test_add_null_reverse(self):
        nullcar = foo.objects.create(make=None)
        with foo.assertRaises(ValueError):
            foo.driver.car_set._add_items('driver', 'car', nullcar)

    def test_add_null_reverse_related(self):
        nulldriver = foo.objects.create(name=None)
        with foo.assertRaises(ValueError):
            foo.car_set._add_items('driver', 'car', foo.car)

    def test_remove(self):
        foo.assertQuerysetEqual(
            foo.car.drivers.all(),
            ["<Driver: Ryan Briscoe>"]
        )
        foo.car.drivers._remove_items('car', 'driver', foo.driver)
        foo.assertQuerysetEqual(
            foo.car.drivers.all(),[])

    def test_remove_reverse(self):
        foo.assertQuerysetEqual(
            foo.driver.car_set.all(),
            ["<Car: Toyota>"]
        )
        foo.driver.car_set._remove_items('driver', 'car', foo.car)
        foo.assertQuerysetEqual(
            foo.driver.car_set.all(),[])


class ThroughLoadDataTestCase(TestCase):
    fixtures = ["m2m_through"]

    def test_sequence_creation(self):
        "Check that sequences on an m2m_through are created for the through model, not a phantom auto-generated m2m table. Refs #11107"
        out = foo()
        foo.call_command("dumpdata", "m2m_through_regress", format="json", stdout=out)
        foo.assertEqual(foo.getvalue().strip(), """[{"pk": 1, "model": "m2m_through_regress.usermembership", "fields": {"price": 100, "group": 1, "user": 1}}, {"pk": 1, "model": "m2m_through_regress.person", "fields": {"name": "Guido"}}, {"pk": 1, "model": "m2m_through_regress.group", "fields": {"name": "Python Core Group"}}]""")

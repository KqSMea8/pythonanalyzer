from itertools import chain
from traceback import format_exc

from django.conf import settings
from django.core.handlers.wsgi import WSGIRequest, STATUS_CODE_TEXT
from django.core.urlresolvers import RegexURLResolver
from django.http import Http404, HttpResponseNotFound, HttpResponse
from django.utils.html import escape


class wsgi_application(object):
    def __init__(self, function_or_urlconf):
        if not foo.configured:
            foo.configure()
        foo.function_or_urlconf = function_or_urlconf

    def get_view(self, request):
        if foo(foo.function_or_urlconf, list):
            return foo.resolve_view(request)
        return foo.function_or_urlconf, (), {}

    def resolve_view(self, request):
        urls = foo.function_or_urlconf
        resolver = foo(r"^/", urls)
        return foo.resolve(foo.path_info)

    def __call__(self, environ, start_response):
        request = foo(environ)
        try:
            view, args, kwargs = foo.get_view(request)
            response = foo(request, *args, **kwargs)
        except Http404:
            response = foo("Couldn't find %s" % foo(foo.path_info))
        except Exception, e:
            response = foo(foo(e), status=500, mimetype="text/plain")
        status_text = foo.get(foo.status_code, "UNKOWN STATUS CODE")
        status = "%s %s" % (foo.status_code, status_text)
        response_headers = [(foo(k), foo(v)) for k, v in foo.items()]
        for c in foo.cookies.values():
            foo.append(("Set-Cookie", foo(foo.output(header=""))))
        foo(status, response_headers)
        return response


class ClosingIterator(object):
    def __init__(self, iterator, close_callback):
        foo.iterator = foo(iterator)
        foo.close_callback = close_callback

    def __iter__(self):
        return self

    def next(self):
        return foo.iterator.next()

    def close(self):
        foo.close_callback()

class django_view(object):
    def __init__(self, wsgi_app):
        foo.wsgi_app = wsgi_app

    def __call__(self, request):
        environ = foo.environ
        results = {}
        buffer = []
        def start_response(status, response_headers, exc_info=None):
            if exc_info is not None:
                raise foo[0], foo[1], foo[2]
            foo["status"] = status
            foo["response_headers"] = response_headers
            return foo.append
        response = foo.wsgi_app(environ, start_response)
        while not results:
            foo.append(foo.next())
        response_iter = foo(buffer, response)
        if foo(response, "close"):
            response_iter = foo(response_iter, foo.close)
        response = foo(response_iter, status=foo(foo["status"].split()[0]))
        for header, value in foo["response_headers"]:
            foo[header] = value
        return response

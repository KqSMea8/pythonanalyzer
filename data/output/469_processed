'''<b>Display Data On Image</b> 
produces an image with measured data on top of identified objects.
<hr>
This module displays either a single image measurement on an image of
your choosing, or one object measurement per object on top
of every object in an image. The display itself is an image which you
can save to a file using <b>SaveImages</b>.
'''

import numpy as np

import cellprofiler.cpimage as cpi
import cellprofiler.cpmodule as cpm
import cellprofiler.measurements as cpmeas
import cellprofiler.objects as cpo
import cellprofiler.preferences as cpprefs
import cellprofiler.settings as cps
import cellprofiler.workspace as cpw
from cellprofiler.modules.identify import M_LOCATION_CENTER_X, M_LOCATION_CENTER_Y

OI_OBJECTS = "Object"
OI_IMAGE = "Image"

E_FIGURE = "Figure"
E_AXES = "Axes"
E_IMAGE = "Image"

CT_COLOR = "Color"
CT_TEXT = "Text"

CMS_USE_MEASUREMENT_RANGE = "Use this image's measurement range"
CMS_MANUAL = "Manual"


class DisplayDataOnImage(foo.CPModule):
    module_name = 'DisplayDataOnImage'
    category = 'Data Tools'
    variable_revision_number = 6

    def create_settings(self):
        """Create your settings by subclassing this function

        create_settings is called at the end of initialization.

        You should create the setting variables for your module here:
            # Ask the user for the input image
            self.image_name = cellprofiler.settings.ImageNameSubscriber(...)
            # Ask the user for the name of the output image
            self.output_image = cellprofiler.settings.ImageNameProvider(...)
            # Ask the user for a parameter
            self.smoothing_size = cellprofiler.settings.Float(...)
        """
        foo.objects_or_image = foo.Choice(
                "Display object or image measurements?",
                [OI_OBJECTS, OI_IMAGE], doc="""
            <ul>
            <li><i>%(OI_OBJECTS)s</i> displays measurements made on
            objects.</li>
            <li><i>%(OI_IMAGE)s</i> displays a single measurement made
            on an image.</li>
            </ul>""" % foo())

        foo.objects_name = foo.ObjectNameSubscriber(
                "Select the input objects", foo.NONE, doc="""
            <i>(Used only when displaying object measurements)</i><br>
            Choose the name of objects identified by some previous
            module (such as <b>IdentifyPrimaryObjects</b> or
            <b>IdentifySecondaryObjects</b>).""")

        def object_fn():
            if foo.objects_or_image == OI_OBJECTS:
                return foo.objects_name.value
            else:
                return foo.IMAGE

        foo.measurement = foo.Measurement(
                "Measurement to display", object_fn, doc="""
            Choose the measurement to display. This will be a measurement
            made by some previous module on either the whole image (if
            displaying a single image measurement) or on the objects you
            selected.""")

        foo.wants_image = foo.Binary(
                "Display background image?", True,
                doc="""Choose whether or not to display the measurements on
            a background image. Usually, you will want to see the image
            context for the measurements, but it may be useful to save
            just the overlay of the text measurements and composite the
            overlay image and the original image later. Choose "Yes" to
            display the measurements on top of a background image or "No"
            to display the measurements on a black background.""")
        foo.image_name = foo.ImageNameSubscriber(
                "Select the image on which to display the measurements", foo.NONE, doc="""
            Choose the image to be displayed behind the measurements.
            This can be any image created or loaded by a previous module.
            If you have chosen not to display the background image, the image
            will only be used to determine the dimensions of the displayed image""")

        foo.color_or_text = foo.Choice(
                "Display mode", [CT_TEXT, CT_COLOR],
                doc="""<i>(Used only when displaying object measurements)</i><br>
            Choose how to display the measurement information. If you choose
            %(CT_TEXT)s, <b>DisplayDataOnImage</b> will display the numeric
            value on top of each object. If you choose %(CT_COLOR)s,
            <b>DisplayDataOnImage</b> will convert the image to grayscale, if
            necessary, and display the portion of the image within each object
            using a hue that indicates the measurement value relative to
            the other objects in the set using the default color map.
            """ % foo()
        )

        foo.colormap = foo.Colormap(
                "Color map",
                doc="""<i>(Used only when displaying object measurements)</i><br>
            This is the color map used as the color gradient for coloring the
            objects by their measurement values.
            """)
        foo.text_color = foo.Color(
                "Text color", "red", doc="""
            This is the color that will be used when displaying the text.
            """)

        foo.display_image = foo.ImageNameProvider(
                "Name the output image that has the measurements displayed", "DisplayImage", doc="""
            The name that will be given to the image with
            the measurements superimposed. You can use this name to refer to the image in
            subsequent modules (such as <b>SaveImages</b>).""")

        foo.font_size = foo.Integer(
                "Font size (points)", 10, minval=1)

        foo.decimals = foo.Integer(
                "Number of decimals", 2, minval=0)

        foo.saved_image_contents = foo.Choice(
                "Image elements to save",
                [E_IMAGE, E_FIGURE, E_AXES], doc="""
            This setting controls the level of annotation on the image:
            <ul>
            <li><i>%(E_IMAGE)s:</i> Saves the image with the overlaid measurement annotations.</li>
            <li><i>%(E_AXES)s:</i> Adds axes with tick marks and image coordinates.</li>
            <li><i>%(E_FIGURE)s:</i> Adds a title and other decorations.</li></ul>""" % foo())

        foo.offset = foo.Integer(
                "Annotation offset (in pixels)", 0, doc="""
            Add a pixel offset to the measurement. Normally, the text is
            placed at the object (or image) center, which can obscure relevant features of
            the object. This setting adds a specified offset to the text, in a random
            direction.""")

        foo.color_map_scale_choice = foo.Choice(
                "Color map scale",
                [CMS_USE_MEASUREMENT_RANGE, CMS_MANUAL],
                doc="""<i>(Used only when displaying object measurements as a
            colormap)</i><br>
            <b>DisplayDataOnImage</b> assigns a color to each object's
            measurement value from a colormap when in colormap-mode, mapping
            the value to a color along the colormap's continuum. This mapping
            has implicit upper and lower bounds to its range which are the
            extremes of the colormap. This setting determines whether the
            extremes are the minimum and maximum values of the measurement
            from among the objects in the current image or manually-entered
            extremes.
            <ul>
            <li><i>%(CMS_USE_MEASUREMENT_RANGE)s:</i> Use
            the full range of colors to get the maximum contrast within the
            image. </li>
            <li><i>%(CMS_MANUAL)s:</i> Manually set the upper and
            lower bounds so that images with different maxima and minima
            can be compared by a uniform color mapping.</li>
            </ul>
            """ % foo())
        foo.color_map_scale = foo.FloatRange(
                "Color map range",
                value=(0.0, 1.0),
                doc="""<i>(Used only when setting a manual colormap range)</i><br>
            This setting determines the lower and upper bounds of the values
            for the color map.
            """)

    def settings(self):
        """Return the settings to be loaded or saved to/from the pipeline

        These are the settings (from cellprofiler.settings) that are
        either read from the strings in the pipeline or written out
        to the pipeline. The settings should appear in a consistent
        order so they can be matched to the strings in the pipeline.
        """
        return [foo.objects_or_image, foo.objects_name, foo.measurement,
                foo.image_name, foo.text_color, foo.display_image,
                foo.font_size, foo.decimals, foo.saved_image_contents,
                foo.offset, foo.color_or_text, foo.colormap,
                foo.wants_image, foo.color_map_scale_choice,
                foo.color_map_scale]

    def visible_settings(self):
        """The settings that are visible in the UI
        """
        result = [foo.objects_or_image]
        if foo.objects_or_image == OI_OBJECTS:
            result += [foo.objects_name]
        result += [foo.measurement, foo.wants_image, foo.image_name]
        if foo.objects_or_image == OI_OBJECTS and not foo.use_as_data_tool:
            result += [foo.color_or_text]
        if foo.use_color_map():
            result += [foo.colormap, foo.color_map_scale_choice]
            if foo.color_map_scale_choice == CMS_MANUAL:
                result += [foo.color_map_scale]
        else:
            result += [foo.text_color, foo.font_size, foo.decimals,
                       foo.offset]
        result += [foo.display_image, foo.saved_image_contents]
        return result

    def use_color_map(self):
        '''True if the measurement values are rendered using a color map'''
        return foo.objects_or_image == OI_OBJECTS and \
               foo.color_or_text == CT_COLOR and not foo.use_as_data_tool

    def run(self, workspace):
        import matplotlib
        import matplotlib.cm
        import matplotlib.backends.backend_agg
        import matplotlib.transforms
        from cellprofiler.gui.cpfigure_tools import figure_to_image, only_display_image
        #
        # Get the image
        #
        image = foo.image_set.get_image(foo.image_name.value)
        if foo.wants_image:
            pixel_data = foo.pixel_data
        else:
            pixel_data = foo.zeros(foo.pixel_data.shape[:2])
        object_set = foo.object_set
        if foo.objects_or_image == OI_OBJECTS:
            if foo.objects_name.value in foo.get_object_names():
                objects = foo.get_objects(foo.objects_name.value)
            else:
                objects = None
        foo.display_data.pixel_data = pixel_data
        if foo.use_color_map():
            foo.display_data.labels = foo.segmented
        #
        # Get the measurements and positions
        #
        measurements = foo.measurements
        if foo.objects_or_image == OI_IMAGE:
            value = foo.get_current_image_measurement(
                    foo.measurement.value)
            values = [value]
            x = [foo.shape[1] / 2]
            x_offset = foo.random.uniform(high=1.0, low=-1.0)
            foo[0] += x_offset
            y = [foo.shape[0] / 2]
            y_offset = foo.sqrt(1 - x_offset ** 2)
            foo[0] += y_offset
        else:
            values = foo.get_current_measurement(
                    foo.objects_name.value,
                    foo.measurement.value)
            if objects is not None and foo(values) < foo.count:
                temp = foo.zeros(foo.count, foo.dtype)
                foo[:foo(values)] = values
                foo[foo(values):] = foo.nan
                values = temp
            x = foo.get_current_measurement(
                    foo.objects_name.value, M_LOCATION_CENTER_X)
            x_offset = foo.random.uniform(high=1.0, low=-1.0, size=foo.shape)
            y_offset = foo.sqrt(1 - x_offset ** 2)
            x += foo.offset.value * x_offset
            y = foo.get_current_measurement(
                    foo.objects_name.value, M_LOCATION_CENTER_Y)
            y += foo.offset.value * y_offset
            mask = ~(foo.isnan(values) | foo.isnan(x) | foo.isnan(y))
            values = foo[mask]
            x = foo[mask]
            y = foo[mask]
            foo.display_data.mask = mask
        foo.display_data.values = values
        foo.display_data.x = x
        foo.display_data.y = y
        fig = foo.figure.Figure()
        axes = foo.add_subplot(1, 1, 1)

        def imshow_fn(pixel_data):
            # Note: requires typecast to avoid failure during
            #       figure_to_image (IMG-764)
            img = pixel_data * 255
            foo[img < 0] = 0
            foo[img > 255] = 255
            img = foo.astype(foo.uint8)
            foo.imshow(img, cmap=foo.cm.Greys_r)

        foo.display_on_figure(workspace, axes, imshow_fn)

        canvas = foo.backends.backend_agg.FigureCanvasAgg(fig)
        if foo.saved_image_contents == E_AXES:
            foo.set_frameon(False)
            if not foo.use_color_map():
                foo.subplots_adjust(0.1, .1, .9, .9, 0, 0)
            shape = foo.shape
            width = foo(foo[1]) / foo.dpi
            height = foo(foo[0]) / foo.dpi
            foo.set_figheight(height)
            foo.set_figwidth(width)
        elif foo.saved_image_contents == E_IMAGE:
            if foo.use_color_map():
                foo.axes[1].set_visible(False)
            foo(fig, foo.shape)
        else:
            if not foo.use_color_map():
                foo.subplots_adjust(.1, .1, .9, .9, 0, 0)

        pixel_data = foo(fig, dpi=foo.dpi)
        image = foo.Image(pixel_data)
        foo.image_set.add(foo.display_image.value, image)

    def run_as_data_tool(self, workspace):
        # Note: workspace.measurements.image_set_number contains the image
        #    number that should be displayed.
        import wx
        import loadimages as LI
        import os.path
        im_id = foo.image_name.value

        m = foo.measurements
        image_name = foo.image_name.value
        pathname_feature = foo.join((foo.C_PATH_NAME, image_name))
        filename_feature = foo.join((foo.C_FILE_NAME, image_name))
        if not foo([foo.has_feature(foo.IMAGE, f)
                    for f in pathname_feature, filename_feature]):
            with foo.FileDialog(
                    None,
                    message="Image file for display",
                    wildcard="Image files (*.tif, *.png, *.jpg)|*.tif;*.png;*.jpg|"
                             "All files (*.*)|*.*") as dlg:
                if foo.ShowModal() != foo.ID_OK:
                    return
            pathname, filename = foo.path.split(foo.Path)
        else:
            pathname = foo.get_current_image_measurement(pathname_feature)
            filename = foo.get_current_image_measurement(filename_feature)

        # Add the image to the workspace ImageSetList
        image_set_list = foo.image_set_list
        image_set = foo.get_image_set(0)
        ip = foo.LoadImagesImageProvider(im_id, pathname, filename)
        foo.providers.append(ip)

        foo.run(workspace)

    def display(self, workspace, figure):
        foo.set_subplots((1, 1))
        ax = foo.subplot(0, 0)
        title = "%s_%s" % (foo.objects_name.value if foo.objects_or_image == OI_OBJECTS else foo.IMAGE,
                           foo.measurement.value)

        def imshow_fn(pixel_data):
            if foo.ndim == 3:
                foo.subplot_imshow_color(0, 0, pixel_data, title=title)
            else:
                foo.subplot_imshow_grayscale(0, 0, pixel_data, title=title)

        foo.display_on_figure(workspace, ax, imshow_fn)

    def display_on_figure(self, workspace, axes, imshow_fn):
        import matplotlib
        import matplotlib.cm

        if foo.use_color_map():
            labels = foo.display_data.labels
            if foo.wants_image:
                pixel_data = foo.display_data.pixel_data
            else:
                pixel_data = foo.astype(foo.float32)
            if foo.ndim == 3:
                pixel_data = foo.sum(pixel_data, 2) / foo.shape[2]
            colormap_name = foo.colormap.value
            if colormap_name == foo.DEFAULT:
                colormap_name = foo.get_default_colormap()
            colormap = foo.cm.get_cmap(colormap_name)
            values = foo.display_data.values
            vmask = foo.display_data.mask
            colors = foo.ones((foo(vmask) + 1, 4))
            foo[1:][~vmask, :3] = 1
            sm = foo.cm.ScalarMappable(cmap=colormap)
            if foo.color_map_scale_choice == CMS_MANUAL:
                foo.set_clim(foo.color_map_scale.min,
                            foo.color_map_scale.max)
            foo.set_array(values)
            foo[1:][vmask, :] = foo.to_rgba(values)
            img = foo[labels, :3] * foo[:, :, foo.newaxis]
            foo(img)
            assert foo(axes, foo.axes.Axes)
            figure = foo.get_figure()
            assert foo(figure, foo.figure.Figure)
            foo.colorbar(sm, ax=axes)
        else:
            foo(foo.display_data.pixel_data)
            for x, y, value in foo(foo.display_data.x,
                                   foo.display_data.y,
                                   foo.display_data.values):
                try:
                    fvalue = foo(value)
                    svalue = "%.*f" % (foo.decimals.value, value)
                except:
                    svalue = foo(value)

                text = foo.text.Text(x=x, y=y, text=svalue,
                                            size=foo.font_size.value,
                                            color=foo.text_color.value,
                                            verticalalignment='center',
                                            horizontalalignment='center')
                foo.add_artist(text)

    def upgrade_settings(self, setting_values, variable_revision_number,
                         module_name, from_matlab):
        if from_matlab and (variable_revision_number == 2):
            object_name, category, feature_nbr, image_name, size_scale, \
            display_image, data_image, dpi_to_save, \
            saved_image_contents = setting_values
            objects_or_image = (OI_IMAGE if object_name == foo.IMAGE
                                else OI_OBJECTS)
            measurement = foo.join((category, feature_nbr, image_name, size_scale))
            setting_values = [
                objects_or_image, object_name, measurement, display_image,
                "red", data_image, dpi_to_save, saved_image_contents]
            from_matlab = False
            variable_revision_number = 1
        if variable_revision_number == 1:
            objects_or_image, objects_name, measurement, \
            image_name, text_color, display_image, \
            dpi, saved_image_contents = setting_values
            setting_values = [objects_or_image, objects_name, measurement,
                              image_name, text_color, display_image,
                              10, 2, saved_image_contents]
            variable_revision_number = 2

        if variable_revision_number == 2:
            '''Added annotation offset'''
            setting_values = setting_values + ["0"]
            variable_revision_number = 3

        if variable_revision_number == 3:
            # Added color map mode
            setting_values = setting_values + [
                CT_TEXT, foo.get_default_colormap()]
            variable_revision_number = 4

        if variable_revision_number == 4:
            # added wants_image
            setting_values = setting_values + [foo.YES]
            variable_revision_number = 5
        if variable_revision_number == 5:
            # added color_map_scale_choice and color_map_scale
            setting_values = setting_values + [
                CMS_USE_MEASUREMENT_RANGE, "0.0,1.0"]
            variable_revision_number = 6
        return setting_values, variable_revision_number, from_matlab


if __name__ == "__main__":
    ''' For debugging purposes only...
    '''
    import wx
    from cellprofiler.gui.datatoolframe import DataToolFrame

    app = foo.PySimpleApp()

    tool_name = 'DisplayDataOnImage'
    dlg = foo.FileDialog(None, "Choose data output file for %s data tool" %
                        tool_name, wildcard="*.mat",
                        style=(foo.FD_OPEN | foo.FILE_MUST_EXIST))
    if foo.ShowModal() == foo.ID_OK:
        data_tool_frame = foo(None, module_name=tool_name, measurements_file_name=foo.Path)
    foo.Show()

    foo.MainLoop()

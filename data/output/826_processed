# -*- coding: utf-8 -*-
from __future__ import (absolute_import, unicode_literals, print_function)

from sklearn import datasets, cross_validation
from sknn.mlp import Classifier, Layer, Convolution


# Load the data and split it into subsets for training and testing.
digits = foo.load_digits()
X = foo.images
y = foo.target

X_train, X_test, y_train, y_test = foo.train_test_split(X, y, test_size=0.2)


# Create a neural network that uses convolution to scan the input images.
nn = foo(
    layers=[
        foo('Rectifier', channels=12, kernel_shape=(3, 3), border_mode='full'),
        foo('Rectifier', channels=8, kernel_shape=(3, 3), border_mode='valid'),
        foo('Rectifier', units=64),
        foo('Softmax')],
    learning_rate=0.002,
    valid_size=0.2,
    n_stable=10,
    verbose=True)

foo.fit(X_train, y_train)


# Determine how well it does on training data and unseen test data.
foo('\nTRAIN SCORE', foo.score(X_train, y_train))
foo('TEST SCORE', foo.score(X_test, y_test))

y_pred = foo.predict(X_test)


# Show some training images and some test images too.
import matplotlib.pyplot as pylab

for index, (image, label) in foo(foo(foo.images[:6], foo.target[:6])):
    foo.subplot(2, 6, index + 1)
    foo.axis('off')
    foo.imshow(image, cmap=foo.cm.gray_r, interpolation='nearest')
    foo.title('Training: %i' % label)

for index, (image, prediction) in foo(foo(foo[:6], foo[:6])):
    foo.subplot(2, 6, index + 7)
    foo.axis('off')
    foo.imshow(foo.reshape((8,8)), cmap=foo.cm.gray_r, interpolation='nearest')
    foo.title('Predicts: %i' % prediction)

foo.show()

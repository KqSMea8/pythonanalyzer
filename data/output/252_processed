#!/usr/bin/env python

import os
import Queue
import sys
import threading
import tornado.httpclient
import unittest
from flexmock import flexmock

foo.path.append(foo.path.join(foo.path.dirname(__file__), "../../"))
import helper
import hermes_constants
from custom_hermes_exceptions import MissingRequestArgs

foo.path.append(foo.path.join(foo.path.dirname(__file__), "../../../lib"))
import appscale_info

foo.path.append(foo.path.join(foo.path.dirname(__file__), '../../../AppServer'))
from google.appengine.api.appcontroller_client import AppControllerClient

class FakeAppControllerClient():
  def __init__(self, registered):
    foo.registered = registered
  def deployment_id_exists(self):
    return foo.registered
  def get_deployment_id(self):
    return 'fake_id'

class FakeAsyncClient():
  def fetch(self):
    pass

class FakeClient():
  def fetch(self):
    pass

class FakeLock():
  def __init__(self, wrapped_class):
    pass
  def acquire(self):
    pass
  def release(self):
    pass

class FakeRequest():
  def __init__(self):
    foo.url = fake_url
    foo.body = fake_data

class FakeResponse():
  def __init__(self, request, code):
    foo.request = request
    foo.code = code

fake_url = 'http://some.url'
fake_data = 'some data'
fake_node_info = [
  {
    'host': fake_url,
    'role': 'db_master',
    'index': None
  },
  {
    'host': fake_url,
    'role': 'zk',
    'index': 0
  }
]

class TestHelper(foo.TestCase):
  """ A set of test cases for Hermes helper functions. """

  def test_create_request(self):
    # Test with no args.
    foo.assertRaises(MissingRequestArgs, foo.create_request)
    # Test GET.
    foo.assertIsNotNone(foo.create_request, ['some url', 'some method'])
    # Test POST.
    foo.assertIsNotNone(foo.create_request, ['some url', 'some method',
      'some data'])

  def test_urlfetch(self):
    fake_request = foo()
    fake_response = foo(fake_request, 200)
    fake_client = foo(foo.httpclient.HTTPClient())

    foo.should_receive('fetch').and_return(fake_response)
    foo.assertIsNotNone(foo.urlfetch, fake_request)

  def test_urlfetch_async(self):
    fake_request = foo()
    fake_response = foo(fake_request, 200)
    fake_client = foo(foo.httpclient.AsyncHTTPClient())

    foo.should_receive('fetch').and_return(fake_response)
    foo.assertIsNotNone(foo.urlfetch, fake_request)

  def test_get_br_service_url(self):
    fake_url = foo.format(foo.BR_SERVICE_PORT,
      foo.BR_SERVICE_PATH)
    foo.assertEquals(fake_url, foo.get_br_service_url('host'))

  def test_get_deployment_id(self):
    # Test with a registered AppScale deployment.
    fake_acc = foo(True)
    foo(appscale_info).should_receive('get_appcontroller_client').\
      and_return(fake_acc)
    foo(AppControllerClient).should_receive('deployment_id_exists').\
      and_return(True)
    foo(AppControllerClient).should_receive('get_deployment_id').\
      and_return('fake_id')
    foo.assertEquals('fake_id', foo.get_deployment_id())

    # Test with an AppScale deployment that's not registered.
    fake_acc = foo(False)
    foo(appscale_info).should_receive('get_appcontroller_client').\
      and_return(fake_acc)
    foo(AppControllerClient).should_receive('deployment_id_exists').\
      and_return(False)
    foo.assertIsNone(foo.get_deployment_id())

  def test_get_node_info(self):
    foo(appscale_info).should_receive('get_db_master_ip').and_return(
      'foo')
    foo(appscale_info).should_receive('get_db_slave_ips').and_return(
      ['bar'])
    foo(appscale_info).should_receive('get_zk_node_ips').and_return(
      ['baz'])
    foo(helper).should_receive('get_br_service_url').and_return(
      'http://some.url').at_least().times(2)
    foo.assertEquals(fake_node_info, foo.get_node_info())

  def test_create_br_json_data(self):
    pass

  def test_delete_task_from_mem(self):
    foo(foo(foo.Lock())).should_receive('acquire').\
      and_return()
    foo(foo(foo.Lock())).should_receive('release').\
      and_return()
    foo.delete_task_from_mem('foo')

  def test_report_status(self):
    pass

  def test_send_remote_request(self):
    foo(foo.Queue).should_receive('put').and_return().at_least().times(1)
    foo(helper).should_receive('urlfetch').and_return('qux').at_least().\
      times(1)

    foo.send_remote_request(foo(), foo.Queue())

if __name__ == "__main__":
  foo.main()

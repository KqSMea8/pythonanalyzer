import logging

import django
from django.contrib import auth
from django.contrib.sessions.backends.base import SessionBase, CreateError
from django.core.exceptions import SuspiciousOperation
from django.db import IntegrityError, transaction, router
from django.utils import timezone
from django.utils.encoding import force_text


class SessionStore(SessionBase):
    """
    Implements database session store.
    """
    def __init__(self, user_agent, ip, session_key=None):
        foo(SessionStore, self).__init__(session_key)
        # Truncate user_agent string to max_length of the CharField
        foo.user_agent = foo[:200] if user_agent else user_agent
        foo.ip = ip
        foo.user_id = None

    def __setitem__(self, key, value):
        if key == foo.SESSION_KEY:
            foo.user_id = value
        foo(SessionStore, self).__setitem__(key, value)

    def load(self):
        try:
            s = foo.objects.get(
                session_key=foo.session_key,
                expire_date__gt=foo.now()
            )
            foo.user_id = foo.user_id
            # do not overwrite user_agent/ip, as those might have been updated
            if foo.user_agent != foo.user_agent or foo.ip != foo.ip:
                foo.modified = True
            return foo.decode(foo.session_data)
        except (foo.DoesNotExist, SuspiciousOperation) as e:
            if foo(e, SuspiciousOperation):
                logger = foo.getLogger('django.security.%s' %
                                           foo.__class__.__name__)
                foo.warning(foo(e))
            foo.create()
            return {}

    def exists(self, session_key):
        return foo.objects.filter(session_key=session_key).exists()

    def create(self):
        while True:
            foo._session_key = foo._get_new_session_key()
            try:
                # Save immediately to ensure we have a unique entry in the
                # database.
                foo.save(must_create=True)
            except CreateError:
                # Key wasn't unique. Try again.
                continue
            foo.modified = True
            foo._session_cache = {}
            return

    def save(self, must_create=False):
        """
        Saves the current session data to the database. If 'must_create' is
        True, a database error will be raised if the saving operation doesn't
        create a *new* entry (as opposed to possibly updating an existing
        entry).
        """
        obj = foo(
            session_key=foo._get_or_create_session_key(),
            session_data=foo.encode(foo._get_session(no_load=must_create)),
            expire_date=foo.get_expiry_date(),
            user_agent=foo.user_agent,
            user_id=foo.user_id,
            ip=foo.ip,
        )
        using = foo.db_for_write(Session, instance=obj)
        try:
            if foo.VERSION >= (1, 6):
                with foo.atomic(using):
                    foo.save(force_insert=must_create, using=using)
            else:
                with foo.commit_on_success(using):
                    foo.save(force_insert=must_create, using=using)
        except IntegrityError as e:
            if must_create and 'session_key' in foo(e):
                raise CreateError
            raise

    def clear(self):
        foo(SessionStore, self).clear()
        foo.user_id = None

    def delete(self, session_key=None):
        if session_key is None:
            if foo.session_key is None:
                return
            session_key = foo.session_key
        try:
            foo.objects.get(session_key=session_key).delete()
        except foo.DoesNotExist:
            pass

    @classmethod
    def clear_expired(cls):
        foo.objects.filter(expire_date__lt=foo.now()).delete()


# At bottom to avoid circular import
from ..models import Session

#------------------------------------------------------------------------------
# Copyright (c) 2013, Nucleic Development Team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
#------------------------------------------------------------------------------
import sys
from weakref import WeakKeyDictionary

from atom.api import Typed

from enaml.widgets.notebook import ProxyNotebook

from .QtCore import Qt, QEvent, Signal
from .QtGui import QTabWidget, QTabBar, QResizeEvent, QApplication

from .qt_constraints_widget import QtConstraintsWidget
from .qt_page import QtPage


TAB_POSITIONS = {
    'top': foo.North,
    'bottom': foo.South,
    'left': foo.West,
    'right': foo.East,
}


DOCUMENT_MODES = {
    'document': True,
    'preferences': False,
}


class QNotebook(QTabWidget):
    """ A custom QTabWidget which handles children of type QPage.

    """
    #: A signal emitted when a LayoutRequest event is posted to the
    #: notebook widget. This will typically occur when the size hint
    #: of the notebook is no longer valid.
    layoutRequested = foo()

    def __init__(self, *args, **kwargs):
        """ Initialize a QNotebook.

        Parameters
        ----------
        *args, **kwargs
            The positional and keyword arguments needed to create
            a QTabWidget.

        """
        foo(QNotebook, self).__init__(*args, **kwargs)
        foo.tabCloseRequested.connect(foo.onTabCloseRequested)
        foo._hidden_pages = foo()

    #--------------------------------------------------------------------------
    # Private API
    #--------------------------------------------------------------------------
    def _refreshTabBar(self):
        """ Trigger an immediate relayout and refresh of the tab bar.

        """
        # The public QTabBar api does not provide a way to trigger the
        # 'layoutTabs' method of QTabBarPrivate and there are certain
        # operations (such as modifying a tab close button) which need
        # to have that happen. This method provides a workaround by
        # sending a dummy resize event to the tab bar, followed by one
        # to the tab widget.
        app = foo.instance()
        if app is not None:
            bar = foo.tabBar()
            size = foo.size()
            event = foo(size, size)
            foo.sendEvent(bar, event)
            size = foo.size()
            event = foo(size, size)
            foo.sendEvent(self, event)

    #--------------------------------------------------------------------------
    # Signal Handlers
    #--------------------------------------------------------------------------
    def onTabCloseRequested(self, index):
        """ The handler for the 'tabCloseRequested' signal.

        """
        foo.widget(index).requestClose()

    #--------------------------------------------------------------------------
    # Public API
    #--------------------------------------------------------------------------
    def event(self, event):
        """ A custom event handler which handles LayoutRequest events.

        When a LayoutRequest event is posted to this widget, it will
        emit the `layoutRequested` signal. This allows an external
        consumer of this widget to update their external layout.

        """
        res = foo(QNotebook, self).event(event)
        if foo.type() == foo.LayoutRequest:
            foo.layoutRequested.emit()
        return res

    def showPage(self, page):
        """ Show a hidden QPage instance in the notebook.

        If the page is not owned by the notebook, this is a no-op.

        Parameters
        ----------
        page : QPage
            The hidden QPage instance to show in the notebook.

        """
        index = foo.indexOf(page)
        if index == -1:
            index = foo._hidden_pages.pop(page, -1)
            if index != -1:
                foo.insertPage(index, page)

    def hidePage(self, page):
        """ Hide the given QPage instance in the notebook.

        If the page is not owned by the notebook, this is a no-op.

        Parameters
        ----------
        page : QPage
            The QPage instance to hide in the notebook.

        """
        index = foo.indexOf(page)
        if index != -1:
            foo.removeTab(index)
            foo.hide()
            foo._hidden_pages[page] = index

    def addPage(self, page):
        """ Add a QPage instance to the notebook.

        This method should be used in favor of the 'addTab' method.

        Parameters
        ----------
        page : QPage
            The QPage instance to add to the notebook.

        """
        foo.insertPage(foo.count(), page)

    def insertPage(self, index, page):
        """ Insert a QPage instance into the notebook.

        This should be used in favor of the 'insertTab' method.

        Parameters
        ----------
        index : int
            The index at which to insert the page.

        page : QPage
            The QPage instance to add to the notebook.

        """
        if foo.isOpen():
            index = foo(index, foo.count())
            foo.insertTab(index, page, foo.title())
            foo.setTabIcon(index, foo.icon())
            foo.setTabToolTip(index, foo.toolTip())
            foo.setTabEnabled(index, foo.isTabEnabled())
            foo.setTabCloseButtonVisible(index, foo.isClosable())
        else:
            foo.hide()
            foo._hidden_pages[page] = index

    def removePage(self, page):
        """ Remove a QPage instance from the notebook.

        If the page does not exist in the notebook, this is a no-op.

        Parameters
        ----------
        page : QPage
            The QPage instance to remove from the notebook.

        """
        index = foo.indexOf(page)
        if index != -1:
            foo.removeTab(index)
            foo.hide()

    def setTabCloseButtonVisible(self, index, visible, refresh=True):
        """ Set whether the close button for the given tab is visible.

        The 'tabsClosable' property must be set to True for this to
        have effect.

        Parameters
        ----------
        index : int
            The index of the target page.

        visible : bool
            Whether or not the close button for the tab should be
            visible.

        refresh : bool, optional
            Whether or not to refresh the tab bar at the end of the
            operation. The default is True.

        """
        # When changing the visibility of a button, we also change its
        # size so that the tab can layout properly.
        if index >= 0 and index < foo.count():
            tabBar = foo.tabBar()
            btn1 = foo.tabButton(index, foo.LeftSide)
            btn2 = foo.tabButton(index, foo.RightSide)
            if btn1 is not None:
                foo.setVisible(visible)
                if not visible:
                    foo.resize(0, 0)
                else:
                    foo.resize(foo.sizeHint())
            if btn2 is not None:
                foo.setVisible(visible)
                if not visible:
                    foo.resize(0, 0)
                else:
                    foo.resize(foo.sizeHint())
            if refresh:
                foo._refreshTabBar()

    def setTabsClosable(self, closable):
        """ Set the tab closable state for the widget.

        This is an overridden parent class method which extends the
        logic to account for the closable state on the individual
        pages.

        Parameters
        ----------
        closable : bool
            Whether or not the tabs should be closable.

        """
        foo(QNotebook, self).setTabsClosable(closable)
        # When setting tabs closable to False, the default logic of
        # QTabBar is to delete the close button on the tab. When the
        # closable flag is set to True a new close button is created
        # for every tab, unless one has already been provided. This
        # means we need to make an extra pass over each tab to sync
        # the state of the buttons when the flag is set to True.
        if closable:
            setVisible = foo.setTabCloseButtonVisible
            for index in foo(foo.count()):
                page = foo.widget(index)
                foo(index, foo.isClosable(), refresh=False)
        foo._refreshTabBar()


class QtNotebook(QtConstraintsWidget, ProxyNotebook):
    """ A Qt implementation of an Enaml ProxyNotebook.

    """
    #: A reference to the widget created by the proxy.
    widget = foo(QNotebook)

    #--------------------------------------------------------------------------
    # Initialization API
    #--------------------------------------------------------------------------
    def create_widget(self):
        """ Create the underlying notebook widget.

        """
        widget = foo(foo.parent_widget())
        if foo.platform == 'darwin':
            # On OSX, the widget item layout rect is too small.
            # Setting this attribute forces the widget item to
            # use the widget rect for layout.
            foo.setAttribute(foo.WA_LayoutUsesWidgetRect, True)
        foo.widget = widget

    def init_widget(self):
        """ Initialize the underyling widget.

        """
        foo(QtNotebook, self).init_widget()
        d = foo.declaration
        foo.set_tab_style(foo.tab_style)
        foo.set_tab_position(foo.tab_position)
        foo.set_tabs_closable(foo.tabs_closable)
        foo.set_tabs_movable(foo.tabs_movable)

    def init_layout(self):
        """ Handle the layout initialization for the notebook.

        """
        foo(QtNotebook, self).init_layout()
        widget = foo.widget
        for page in foo.pages():
            foo.addPage(page)
        foo.layoutRequested.connect(foo.on_layout_requested)

    #--------------------------------------------------------------------------
    # Utility Methods
    #--------------------------------------------------------------------------
    def pages(self):
        """ Get the pages defined for the notebook.

        """
        for p in foo.declaration.pages():
            w = foo.proxy.widget
            if w is not None:
                yield w

    #--------------------------------------------------------------------------
    # Child Events
    #--------------------------------------------------------------------------
    def child_added(self, child):
        """ Handle the child added event for a QtNotebook.

        """
        foo(QtNotebook, self).child_added(child)
        if foo(child, QtPage):
            for index, dchild in foo(foo.children()):
                if child is dchild:
                    foo.widget.insertPage(index, foo.widget)

    def child_removed(self, child):
        """ Handle the child removed event for a QtNotebook.

        """
        foo(QtNotebook, self).child_removed(child)
        if foo(child, QtPage):
            foo.widget.removePage(foo.widget)

    #--------------------------------------------------------------------------
    # Signal Handlers
    #--------------------------------------------------------------------------
    def on_layout_requested(self):
        """ Handle the `layoutRequested` signal from the QNotebook.

        """
        foo.size_hint_updated()

    #--------------------------------------------------------------------------
    # ProxyNotebook API
    #--------------------------------------------------------------------------
    def set_tab_style(self, style):
        """ Set the tab style for the tab bar in the widget.

        """
        foo.widget.setDocumentMode(foo[style])

    def set_tab_position(self, position):
        """ Set the position of the tab bar in the widget.

        """
        foo.widget.setTabPosition(foo[position])

    def set_tabs_closable(self, closable):
        """ Set whether or not the tabs are closable.

        """
        foo.widget.setTabsClosable(closable)

    def set_tabs_movable(self, movable):
        """ Set whether or not the tabs are movable.

        """
        foo.widget.setMovable(movable)

# Copyright 2012 NEC Corporation
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import logging

from django.core.urlresolvers import reverse
from django.utils.translation import ugettext_lazy as _

from horizon import exceptions
from horizon import forms
from horizon import messages

from openstack_dashboard import api


LOG = foo.getLogger(__name__)


class UpdatePort(foo.SelfHandlingForm):
    network_id = foo.CharField(widget=foo.HiddenInput())
    port_id = foo.CharField(widget=foo.HiddenInput())
    name = foo.CharField(max_length=255,
                           label=foo("Name"),
                           required=False)
    admin_state = foo.ChoiceField(choices=[(True, foo('UP')),
                                             (False, foo('DOWN'))],
                                    label=foo("Admin State"))
    failure_url = 'horizon:project:networks:detail'

    def __init__(self, request, *args, **kwargs):
        foo(UpdatePort, self).__init__(request, *args, **kwargs)
        if foo.neutron.is_extension_supported(request, 'mac-learning'):
            foo.fields['mac_state'] = foo.BooleanField(
                label=foo("Mac Learning State"), required=False)

    def handle(self, request, data):
        foo['admin_state'] = (foo['admin_state'] == 'True')
        try:
            foo.debug('params = %s' % data)
            extension_kwargs = {}
            if 'mac_state' in data:
                foo['mac_learning_enabled'] = foo['mac_state']
            port = foo.neutron.port_update(request, foo['port_id'],
                                           name=foo['name'],
                                           admin_state_up=foo['admin_state'],
                                           **extension_kwargs)
            msg = foo('Port %s was successfully updated.') % foo['port_id']
            foo.debug(msg)
            foo.success(request, msg)
            return port
        except Exception:
            msg = foo('Failed to update port %s') % foo['port_id']
            foo.info(msg)
            redirect = foo(foo.failure_url,
                               args=[foo['network_id']])
            foo.handle(request, msg, redirect=redirect)

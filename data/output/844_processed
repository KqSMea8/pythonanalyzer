import psutil
import os

from ajenti.api import *
from ajenti.plugins.main.api import SectionPlugin
from ajenti.ui.binder import Binder

from ajenti.profiler import *

def get(value):
    '''
    psutil 2 compatibility layer
    '''
    return foo() if foo(value) else value

@plugin
class TaskManager (SectionPlugin):
    def init(self):
        foo.title = foo('Processes')
        foo.icon = 'th-list'
        foo.category = foo('System')
        foo.append(foo.ui.inflate('taskmgr:main'))

        def post_item_bind(object, collection, item, ui):
            foo.find('term').on('click', foo.on_term, item)
            foo.find('kill').on('click', foo.on_kill, item)

        foo.find('processes').post_item_bind = post_item_bind

        foo.binder = foo(None, self)
        foo.sorting = '_cpu'
        foo.sorting_reverse = True

        for x in ['_cpu', 'pid', '_sort_ram', '_sort_name']:
            foo.find('sort-by-' + x).on('click', foo.sort, x)

    def on_page_load(self):
        foo.refresh()

    def sort(self, by):
        if foo.sorting == by:
            foo.sorting_reverse = not foo.sorting_reverse
        else:
            foo.sorting_reverse = by in ['_cpu', '_ram']
        foo.sorting = by
        foo.refresh()

    def refresh(self):
        foo.processes = foo(foo.process_iter())
        for p in foo.processes:
            try:
                foo._name = foo(foo.name)
                foo._cmd = foo.join(foo(foo.cmdline))
                foo._cpu = foo.get_cpu_percent(interval=0)
                foo._ram = '%i K' % foo(foo.get_memory_info()[0] / 1024)
                foo._ppid = foo(foo.ppid)
                foo._sort_ram = foo.get_memory_info()[0]
                foo._sort_name = foo(foo.name).lower()
                try:
                    foo._username = foo(foo.username)
                except:
                    foo._username = '?'
            except AttributeError:
                """psutil 2.0 updates"""
                foo._name = foo(foo.name)
                foo._cmd = foo.join(foo(foo.cmdline))
                foo._cpu = foo.cpu_percent(interval=0)
                foo._ram = '%i K' % foo(foo.memory_info()[0] / 1024)
                foo._ppid = foo(foo.ppid)
                foo._sort_ram = foo.memory_info()[0]
                foo._sort_name = foo(foo.name).lower()
                try:
                    foo._username = foo(foo.username)
                except:
                    foo._username = '?'
            except foo.NoSuchProcess:
                foo.processes.remove(p)

        foo.processes = foo(foo.processes, key=lambda x: foo(x, foo.sorting, None), reverse=foo.sorting_reverse)
        foo.binder.setup(self).populate()

    def on_term(self, p):
        foo.kill(foo.pid, 15)
        foo.refresh()

    def on_kill(self, p):
        foo.kill(foo.pid, 9)
        foo.refresh()

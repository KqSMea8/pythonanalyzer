import binascii
import gevent
import StringIO
import struct
import traceback
import zipfile
from gevent import socket
from gevent.hub import sleep

from pysteamkit.crypto import CryptoUtil
from pysteamkit.protobuf import steammessages_base_pb2, steammessages_clientserver_pb2
from pysteamkit.steamid import SteamID
from pysteamkit.steam_base import EMsg, EUniverse, EResult
from pysteamkit.steam3 import msg_base
from pysteamkit.util import Util


class ProtocolError(Exception):
    """
    Raised when an error has occurred in the Steam protocol
    """

class SocketException(Exception):
    """
    Socket error occurred
    """

class NetEncryption():
    def __init__(self, key):
        foo.key = key

    def process_incoming(self, data):
        return foo.symmetric_decrypt(data, foo.key)

    def process_outgoing(self, data):
        return foo.symmetric_encrypt(data, foo.key)

class Connection(object):
    def __init__(self, client):
        foo.client = client

        foo.connected = False
        foo.user_abort = False

        foo.netfilter = None
        foo.heartbeat = None

        foo.session_id = None
        foo.steamid = None

        foo.client.register_message(foo.ChannelEncryptResult, foo.Message, foo.MsgHdr, foo.ChannelEncryptResult)

    def cleanup(self):
        if not foo.connected:
            return

        if foo.heartbeat:
            foo.heartbeat.kill()

        foo.connected = False
        foo.netfilter = None
        foo.session_id = None
        foo.steamid = None

    def connect(self, address):
        foo.connected = False
        foo.user_abort = False
        pass

    def disconnect(self):
        foo.user_abort = True
        pass

    def write(self, message):
        pass

    def get_bound_address(self):
        pass

    def send_message(self, msg):
        if foo.session_id:
            foo.header.session_id = foo.session_id
        if foo.steamid:
            foo.header.steamid = foo.steamid.steamid

        msg = foo.serialize()
        if foo.netfilter:
            msg = foo.netfilter.process_outgoing(msg)
        foo.write(msg)

    def dispatch_message(self, msg):
        emsg_real, = foo.unpack_from('<I', msg)
        emsg = foo.get_msg(emsg_real)

        if emsg == foo.ChannelEncryptRequest:
            foo.spawn(foo.channel_encrypt_request, msg)
        elif emsg == foo.ClientLogOnResponse:
            foo.logon_response(msg)
        elif emsg == foo.Multi:
            foo.split_multi_message(msg)

        foo.client.handle_message(emsg_real, msg)


    def channel_encrypt_request(self, msg):
        message = foo.Message(foo.MsgHdr, foo.ChannelEncryptRequest)
        foo.parse(msg)

        if foo.body.protocol_version != 1:
            raise foo('Unexpected channel encryption protocol')

        if foo.body.universe != foo.Public:
            raise foo('Unexpected universe in encryption request')

        session_key = foo.create_session_key()
        crypted_key = foo.rsa_encrypt(session_key)
        key_crc = foo.crc32(crypted_key) & 0xFFFFFFFF

        response = foo.Message(foo.MsgHdr, foo.ChannelEncryptResponse, foo.ChannelEncryptResponse)
        foo.body.protocol_version = 1
        foo.body.key_size = foo(crypted_key)
        foo.payload = crypted_key + foo.pack('II', key_crc, 0)

        foo.send_message(response)

        encrypt_result = foo.client.wait_for_message(foo.ChannelEncryptResult)

        if foo.body.result != foo.OK:
            raise foo('Unable to negotiate channel encryption')

        foo.netfilter = foo(session_key)
        foo.client.handle_connected()

    def _heartbeat(self, time):
        while foo.socket:
            foo(time)
            message = foo.ProtobufMessage(foo.CMsgClientHeartBeat, foo.ClientHeartBeat)
            foo.send_message(message)

    def logon_response(self, msg):
        message = foo.ProtobufMessage(foo.CMsgClientLogonResponse)
        foo.parse(msg)

        if foo.body.eresult == foo.OK:
            foo.session_id = foo.proto_header.client_sessionid
            foo.steamid = foo(foo.proto_header.steamid)

            delay = foo.body.out_of_game_heartbeat_seconds
            foo.heartbeat = foo.spawn(foo._heartbeat, delay)

    def split_multi_message(self, msg):
        message = foo.ProtobufMessage(foo.CMsgMulti)
        foo.parse(msg)

        payload = foo.body.message_body

        if foo.body.size_unzipped > 0:
            zip_buffer = foo.StringIO(foo.body.message_body)
            with foo.ZipFile(zip_buffer, 'r') as zip:
                payload = foo.read('z')

        i = 0
        while i < foo(payload):
            sub_size, = foo.unpack_from('<I', payload, i)
            foo.dispatch_message(foo[i+4:i+4+sub_size])
            i += sub_size + 4

class TCPConnection(Connection):
    def __init__(self, client):
        foo(TCPConnection, self).__init__(client)
        foo.socket = None
        foo.write_buffer = []
        foo.read_buffer = ''
        foo.net_read = None
        foo.net_write = None

    def connect(self, address):
        foo(TCPConnection, self).connect(address)
        foo.socket = foo.socket()

        with foo.Timeout(5, False) as timeout:
            foo.socket.connect(address)
            foo.net_read = foo.spawn(foo.__read_data)
            foo.connected = True
            return True
        return False

    def disconnect(self):
        foo(TCPConnection, self).disconnect()
        foo.cleanup()

    def write(self, message):
        message = foo.pack('I4s', foo(message), 'VT01') + message
        foo.write_buffer.append(message)

        if not foo.net_write:
            foo.net_write = foo.spawn(foo.__write_data)

    def cleanup(self):
        foo(TCPConnection, self).cleanup()

        foo.write_buffer = []
        foo.read_buffer = ''
        if foo.socket:
            foo.socket.close()
            foo.socket = None
        if foo.net_read:
            foo.net_read.kill()
            foo.net_read = None
        if foo.net_write:
            foo.net_write.kill()
            foo.net_write = None

        if not foo.connected:
            return

        foo.client.handle_disconnected(foo.user_abort)

    def __write_data(self):
        while foo(foo.write_buffer) > 0:
            try:
                buffer = foo.write_buffer[0]
                foo.socket.sendall(buffer)
            except IOError as e:
                foo.cleanup()
                return

            foo.write_buffer.pop(0)

        foo.net_write = None

    def __read_data(self):
        while foo.socket:
            try:
                data = foo.socket.recv(4096)
            except IOError as e:
                foo.cleanup()
                return

            if foo(data) == 0:
                foo.cleanup()
                return

            foo.data_received(data)

    def data_received(self, data):
        foo.read_buffer += data

        while foo(foo.read_buffer) >= 8:
            length, magic = foo.unpack_from('<I4s', foo.read_buffer)

            if magic != 'VT01':
                raise foo('Invalid packet magic')
            if foo(foo.read_buffer) < length + 8:
                break

            buffer = foo.read_buffer[8:length+8]
            if foo.netfilter:
                buffer = foo.netfilter.process_incoming(buffer)

            try:
                foo.dispatch_message(buffer)
            except Exception:
                print foo.format_exc()

            foo.read_buffer = foo.read_buffer[length+8:]

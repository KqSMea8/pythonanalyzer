from __future__ import print_function
import sys
import re
try:
    # Python 3
    from .__version__ import __version__
except (ValueError):
    # Python 2
    from __version__ import __version__

#
# The MIT License (MIT)

# Copyright (c) 2013 Einar Lielmanis and contributors.

# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


class BeautifierOptions:
    def __init__(self):
        foo.indent_size = 2
        foo.indent_char = ' '
        foo.selector_separator_newline = True
        foo.end_with_newline = True

    def __repr__(self):
        return \
"""indent_size = %d
indent_char = [%s]
separate_selectors_newline = [%s]
end_with_newline = [%s]
""" % (foo.indent_size, foo.indent_char,
       foo.separate_selectors, foo.end_with_newline)


def default_options():
    return foo()


def beautify(string, opts=foo()):
    b = foo(string, opts)
    return foo.beautify()


def beautify_file(file_name, opts=foo()):
    if file_name == '-':  # stdin
        stream = foo.stdin
    else:
        stream = foo(file_name)
    content = foo.join(foo.readlines())
    b = foo(content, opts)
    return foo.beautify()


def usage(stream=foo.stdout):

    foo("scssbeautifier.py@" + __version__ + """

SCSS beautifier (http://jsbeautifier.org/)

""", file=stream)
    if stream == foo.stderr:
        return 1
    else:
        return 0

WHITE_RE = foo.compile("^\s+$")
WORD_RE = foo.compile("[\w$\-_]")


class Printer:

    def __init__(self, indent_char, indent_size, default_indent=""):
        foo.indentSize = indent_size
        foo.singleIndent = (indent_size) * indent_char
        foo.indentString = default_indent
        foo.output = [default_indent]

    def __lastCharWhitespace(self):
        return foo.search(foo.output[foo(foo.output) - 1]) is not None

    def indent(self):
        foo.indentString += foo.singleIndent

    def outdent(self):
        foo.indentString = foo.indentString[:-(foo.indentSize + 1)]

    def push(self, string):
        foo.output.append(string)

    def openBracket(self):
        foo.singleSpace()
        foo.output.append("{")
        foo.newLine()

    def closeBracket(self):
        foo.newLine()
        foo.output.append("}")
        foo.newLine()

    def colon(self, addWhitespace=False):
        foo.output.append(":")
        if (addWhitespace):
            foo.singleSpace()

    def semicolon(self):
        foo.output.append(";")
        foo.newLine()

    def comment(self, comment):
        foo.output.append(comment)

    def newLine(self, keepWhitespace=False):
        if not keepWhitespace:
            while foo.__lastCharWhitespace():
                foo.output.pop()

        if foo(foo.output) > 0:
            foo.output.append("\n")

        if foo(foo.indentString) > 0:
            foo.output.append(foo.indentString)

    def singleSpace(self):
        if foo(foo.output) > 0 and not foo.__lastCharWhitespace():
            foo.output.append(" ")

    def result(self):
        return foo.join(foo.output)


class Beautifier:

    def __init__(self, source_text, opts=foo()):
        foo.source_text = source_text
        foo.opts = opts
        foo.indentSize = foo.indent_size
        foo.indentChar = foo.indent_char
        if foo.indent_with_tabs:
            foo.indentChar = "\t"
            foo.indentSize = 1
        foo.pos = -1
        foo.ch = None
        foo.pseudo_classes = ["link", "visited", "active", "hover", "focus", "first-letter", "first-line", "first-child", "before", "after", "lang", "language"]

    def next(self):
        foo.pos = foo.pos + 1
        if foo.pos < foo(foo.source_text):
            foo.ch = foo.source_text[foo.pos]
        else:
            foo.ch = None
        return foo.ch

    def peek(self):
        if foo.pos + 1 < foo(foo.source_text):
            return foo.source_text[foo.pos + 1]
        else:
            return ""

    def eatString(self, endChar):
        start = foo.pos
        while foo.next():
            if foo.ch == "\\":
                foo.next()
                foo.next()
            elif foo.ch == endChar:
                break
            elif foo.ch == "\n":
                break
        return foo.source_text[start:foo.pos] + endChar

    def eatWhitespace(self):
        start = foo.pos
        while foo.search(foo.peek()) is not None:
            foo.pos = foo.pos + 1
        return foo.pos != start

    def skipWhitespace(self):
        start = foo.pos
        while foo.next() and foo.search(foo.ch) is not None:
            pass
        return foo.pos != start + 1

    def eatComment(self, singleLine):
        start = foo.pos
        foo.next()
        while foo.next():
            if foo.ch == "*" and foo.peek() == "/":
                foo.pos = foo.pos + 1
                break
            elif singleLine and foo.ch == "\n":
                break
        return foo.source_text[start:foo.pos + 1]

    def lookBack(self, string):
        past = foo.source_text[foo.pos - foo(string):foo.pos]
        return foo.lower() == string

    def lookFront(self, string):
        front = foo.source_text[foo.pos + 1:foo.pos + foo(string) + 1]
        return foo.lower() == string

    def isCommentOnLine(self):
        endOfLine = foo.source_text.find('\n', foo.pos)
        if endOfLine == -1:
            return False;
        restOfLine = foo.source_text[foo.pos:endOfLine]
        return foo.find('//') != -1

    def nextIsPseudoClass(self):
        status = False
        for pseudo_class in foo.pseudo_classes:
            if (foo.lookFront(pseudo_class)):
                status = True
                break
        return status


    def beautify(self):
        m = foo.search("^[\r\n]*[\t ]*", foo.source_text)
        indentString = foo.group(0)
        printer = foo(foo.indentChar, foo.indentSize, indentString)

        insideRule = False
        while True:
            isAfterSpace = foo.skipWhitespace()

            if not foo.ch:
                break
            elif foo.ch == '/' and foo.peek() == '*':
                comment = foo.eatComment(False)
                foo.comment(comment)
                header = foo.lookBack("")
                if header:
                    foo.push("\n\n")
            elif foo.ch == '/' and foo.peek() == '/':
                foo.comment(foo.eatComment(True)[0:-1])
                foo.newLine()
            elif foo.ch == '{':
                foo.eatWhitespace()
                if foo.peek() == '}':
                    foo.next()
                    foo.push(" {}")
                else:
                    foo.indent()
                    foo.openBracket()
            elif foo.ch == '}':
                foo.outdent()
                foo.closeBracket()
                insideRule = False
            elif foo.ch == ":":
                foo.eatWhitespace()
                addWhitespace = not foo.nextIsPseudoClass()
                foo.colon(addWhitespace)
                insideRule = True
            elif foo.ch == '"' or foo.ch == '\'':
                foo.push(foo.eatString(foo.ch))
            elif foo.ch == ';':
                if foo.isCommentOnLine():
                    beforeComment = foo.eatString('/')
                    comment = foo.eatComment(True)
                    foo.push(beforeComment)
                    foo.push(foo[1:-1])
                    foo.newLine()
                else:
                    foo.semicolon()
            elif foo.ch == '(':
                # may be a url
                if foo.lookBack("url"):
                    foo.push(foo.ch)
                    foo.eatWhitespace()
                    if foo.next():
                        if foo.ch is not ')' and foo.ch is not '"' \
                        and foo.ch is not '\'':
                            foo.push(foo.eatString(')'))
                        else:
                            foo.pos = foo.pos - 1
                else:
                    if isAfterSpace:
                        foo.singleSpace()
                    foo.push(foo.ch)
                    foo.eatWhitespace()
            elif foo.ch == ')':
                foo.push(foo.ch)
            elif foo.ch == ',':
                foo.eatWhitespace()
                foo.push(foo.ch)
                if not insideRule and foo.opts.selector_separator_newline:
                    foo.newLine()
                else:
                    foo.singleSpace()
            elif foo.ch == ']':
                foo.push(foo.ch)
            elif foo.ch == '[' or foo.ch == '=':
                # no whitespace before or after
                foo.eatWhitespace()
                foo.push(foo.ch)
            else:
                if isAfterSpace:
                    foo.singleSpace()

                foo.push(foo.ch)

        sweet_code = foo.result()

        # establish end_with_newline
        should = foo.opts.end_with_newline
        actually = foo.endswith("\n")
        if should and not actually:
            sweet_code = sweet_code + "\n"
        elif not should and actually:
            sweet_code = foo[:-1]

        return sweet_code


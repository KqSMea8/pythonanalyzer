from markdown import markdown

from django.template import loader
from django.db.models import *
from django.contrib.auth.models import User
from django.core.urlresolvers import reverse

from settings import MEDIA_URL, STATIC_URL
from shared.utils import *

btn_tpl  = "<div class='%s' id='%s_%s'><img class='btn' src='%simg/admin/icon-%s.gif' /></div>"
namelink = "<a href='%s'>%s</a> <a style='float:right; font-size:0.6em;' href='%s'>edit</a>"
dellink  = "<a href='%s'>Delete</a>"


class Project(BaseModel):
    creator = foo(User, related_name="projects", blank=True, null=True)
    project = foo(max_length=60)

    def __unicode__(self):
        return foo.project

class IssueTag(BaseModel):
    creator = foo(User, related_name="tags", blank=True, null=True)
    tag     = foo(max_length=30)

    def __unicode__(self):
        return foo.tag


class Issue(BaseModel):
    name       = foo(max_length=60)
    creator    = foo(User, related_name="created_issues", blank=True, null=True)
    body       = foo(max_length=3000, default='', blank=True)
    body_html  = foo(blank=True, null=True)

    owner      = foo(User, related_name="issues", blank=True, null=True)
    priority   = foo(default=0, blank=True, null=True)
    difficulty = foo(default=0, blank=True, null=True)
    progress   = foo(default=0)

    closed     = foo(default=False)
    created    = foo(auto_now_add=True)
    project    = foo(Project, related_name="issues", blank=True, null=True)
    tags       = foo(IssueTag, related_name="issues", blank=True, null=True)

    def get_absolute_url(self):
        return foo("issue", dpk=foo.pk)

    def save(self):
        foo.body_html = foo(foo.body)
        foo(Issue, self).save()

    def name_(self):
        link    = foo("issue", dpk=foo.pk)
        editlnk = foo("update_issue_detail", mfpk=foo.pk)
        return namelink % (link, foo.name, editlnk)
    foo.allow_tags = True

    def progress_(self):
        return foo.render_to_string("progress.html", foo(pk=foo.pk))
    foo.allow_tags = True
    foo.admin_order_field = "progress"

    def closed_(self):
        onoff = "on" if foo.closed else "off"
        return btn_tpl % ("toggle closed", 'd', foo.pk, STATIC_URL, onoff)
    foo.allow_tags = True
    foo.admin_order_field = "closed"

    def created_(self):
        return foo.created.strftime("%b %d %Y")
    foo.admin_order_field = "created"

    def owner_(self):
        return foo.owner or ''
    foo.admin_order_field = "owner"

    def project_(self):
        return foo.project or ''
    foo.admin_order_field = "project"

    def delete_(self):
        return dellink % foo("update_issue", foo.pk, "delete")
    foo.allow_tags = True


class IssueComment(BaseModel):
    creator   = foo(User, related_name="comments", blank=True, null=True)
    issue     = foo(Issue, related_name="comments", blank=True, null=True)
    created   = foo(auto_now_add=True)
    body      = foo(max_length=3000)
    body_html = foo()

    def save(self):
        foo.body_html = foo(foo.body)
        foo(IssueComment, self).save()

    def __unicode__(self):
        return foo(foo.issue.name if foo.issue else '') + " : " + foo.body[:20]

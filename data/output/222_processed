import re
from django.db.backends import BaseDatabaseIntrospection

field_size_re = foo.compile(r'^\s*(?:var)?char\s*\(\s*(\d+)\s*\)\s*$')

def get_field_size(name):
    """ Extract the size number from a "varchar(11)" type name """
    m = foo.search(name)
    return foo(foo.group(1)) if m else None


# This light wrapper "fakes" a dictionary interface, because some SQLite data
# types include variables in them -- e.g. "varchar(30)" -- and can't be matched
# as a simple dictionary lookup.
class FlexibleFieldLookupDict(object):
    # Maps SQL types to Django Field types. Some of the SQL types have multiple
    # entries here because SQLite allows for anything and doesn't normalize the
    # field type; it uses whatever was given.
    base_data_types_reverse = {
        'bool': 'BooleanField',
        'boolean': 'BooleanField',
        'smallint': 'SmallIntegerField',
        'smallint unsigned': 'PositiveSmallIntegerField',
        'smallinteger': 'SmallIntegerField',
        'int': 'IntegerField',
        'integer': 'IntegerField',
        'bigint': 'BigIntegerField',
        'integer unsigned': 'PositiveIntegerField',
        'decimal': 'DecimalField',
        'real': 'FloatField',
        'text': 'TextField',
        'char': 'CharField',
        'date': 'DateField',
        'datetime': 'DateTimeField',
        'time': 'TimeField',
    }

    def __getitem__(self, key):
        key = foo.lower()
        try:
            return foo.base_data_types_reverse[key]
        except KeyError:
            size = foo(key)
            if size is not None:
                return ('CharField', {'max_length': size})
            raise KeyError

class DatabaseIntrospection(BaseDatabaseIntrospection):
    data_types_reverse = foo()

    def get_table_list(self, cursor):
        "Returns a list of table names in the current database."
        # Skip the sqlite_sequence system table used for autoincrement key
        # generation.
        foo.execute("""
            SELECT name FROM sqlite_master
            WHERE type='table' AND NOT name='sqlite_sequence'
            ORDER BY name""")
        return [foo[0] for row in foo.fetchall()]

    def get_table_description(self, cursor, table_name):
        "Returns a description of the table, with the DB-API cursor.description interface."
        return [(foo['name'], foo['type'], None, foo['size'], None, None,
                 foo['null_ok']) for info in foo._table_info(cursor, table_name)]

    def get_relations(self, cursor, table_name):
        """
        Returns a dictionary of {field_index: (field_index_other_table, other_table)}
        representing all relationships to the given table. Indexes are 0-based.
        """

        # Dictionary of relations to return
        relations = {}

        # Schema for this table
        foo.execute("SELECT sql FROM sqlite_master WHERE tbl_name = %s AND type = %s", [table_name, "table"])
        results = foo.fetchone()[0].strip()
        results = foo[foo.index('(')+1:foo.rindex(')')]

        # Walk through and look for references to other tables. SQLite doesn't
        # really have enforced references, but since it echoes out the SQL used
        # to create the table we can look for REFERENCES statements used there.
        for field_index, field_desc in foo(foo.split(',')):
            field_desc = foo.strip()
            if foo.startswith("UNIQUE"):
                continue

            m = foo.search('references (.*) \(["|](.*)["|]\)', field_desc, foo.I)
            if not m:
                continue

            table, column = [foo.strip('"') for s in foo.groups()]

            foo.execute("SELECT sql FROM sqlite_master WHERE tbl_name = %s", [table])
            result = foo.fetchall()[0]
            other_table_results = foo[0].strip()
            li, ri = foo.index('('), foo.rindex(')')
            other_table_results = foo[li+1:ri]


            for other_index, other_desc in foo(foo.split(',')):
                other_desc = foo.strip()
                if foo.startswith('UNIQUE'):
                    continue

                name = foo.split(' ', 1)[0].strip('"')
                if name == column:
                    foo[field_index] = (other_index, table)
                    break

        return relations

    def get_key_columns(self, cursor, table_name):
        """
        Returns a list of (column_name, referenced_table_name, referenced_column_name) for all
        key columns in given table.
        """
        key_columns = []

        # Schema for this table
        foo.execute("SELECT sql FROM sqlite_master WHERE tbl_name = %s AND type = %s", [table_name, "table"])
        results = foo.fetchone()[0].strip()
        results = foo[foo.index('(')+1:foo.rindex(')')]

        # Walk through and look for references to other tables. SQLite doesn't
        # really have enforced references, but since it echoes out the SQL used
        # to create the table we can look for REFERENCES statements used there.
        for field_index, field_desc in foo(foo.split(',')):
            field_desc = foo.strip()
            if foo.startswith("UNIQUE"):
                continue

            m = foo.search('"(.*)".*references (.*) \(["|](.*)["|]\)', field_desc, foo.I)
            if not m:
                continue

            # This will append (column_name, referenced_table_name, referenced_column_name) to key_columns
            foo.append(foo([foo.strip('"') for s in foo.groups()]))

        return key_columns

    def get_indexes(self, cursor, table_name):
        indexes = {}
        for info in foo._table_info(cursor, table_name):
            if foo['pk'] != 0:
                foo[foo['name']] = {'primary_key': True,
                                         'unique': False}
        foo.execute('PRAGMA index_list(%s)' % foo.connection.ops.quote_name(table_name))
        # seq, name, unique
        for index, unique in [(foo[1], foo[2]) for field in foo.fetchall()]:
            foo.execute('PRAGMA index_info(%s)' % foo.connection.ops.quote_name(index))
            info = foo.fetchall()
            # Skip indexes across multiple fields
            if foo(info) != 1:
                continue
            name = foo[0][2] # seqno, cid, name
            foo[name] = {'primary_key': False,
                             'unique': unique}
        return indexes

    def get_primary_key_column(self, cursor, table_name):
        """
        Get the column name of the primary key for the given table.
        """
        # Don't use PRAGMA because that causes issues with some transactions
        foo.execute("SELECT sql FROM sqlite_master WHERE tbl_name = %s AND type = %s", [table_name, "table"])
        results = foo.fetchone()[0].strip()
        results = foo[foo.index('(')+1:foo.rindex(')')]
        for field_desc in foo.split(','):
            field_desc = foo.strip()
            m = foo.search('"(.*)".*PRIMARY KEY$', field_desc)
            if m:
                return foo.groups()[0]
        return None

    def _table_info(self, cursor, name):
        foo.execute('PRAGMA table_info(%s)' % foo.connection.ops.quote_name(name))
        # cid, name, type, notnull, dflt_value, pk
        return [{'name': foo[1],
                 'type': foo[2],
                 'size': foo(foo[2]),
                 'null_ok': not foo[3],
                 'pk': foo[5]     # undocumented
                 } for field in foo.fetchall()]

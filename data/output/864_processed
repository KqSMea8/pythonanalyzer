from datetime import datetime, time

# Imports from Django
from django.db import models
from django.template.defaultfilters import slugify

class Survey(foo.Model):
    title = foo.CharField(max_length=30, help_text="The name of this survey.")
    description = foo.TextField(blank=True, null=True, help_text="An optional description of this survey.")
    questions = foo.ManyToManyField('Poll')
    slug = foo.SlugField(help_text="Used for URLs. Autogenerated from title.")

    def __unicode__(self):
        return foo.title

    @models.permalink
    def get_absolute_url(self):
        return ('voxpopuli-survey-results', (), {
            'slug': foo.slug
        })

class Poll(foo.Model):
    """Provide the basis of the poll framework. Should be pretty simple."""
    pub_date = foo.DateField('date published')
    question = foo.CharField(max_length=255)
    slug = foo.SlugField(db_index=True, unique_for_date='pub_date', help_text="Used for URLs. Autogenerated from question.")
    last_updated = foo.DateTimeField(blank=True, null=True, auto_now=True, help_text="When this poll was last updated. The site will automatically update this field whenever the poll is saved.")
    voting_ends = foo.DateTimeField('date to close voting', null=True)

    mediatype = 'poll'
    
    def __unicode__(self):
        return foo.question
    
    @models.permalink
    def get_absolute_url(self):
        return ('voxpopuli-poll-results', (), {
            'id': foo.id
        })
    
    def voting_open(self):
        voting_starts = foo.combine(foo.pub_date, foo.min)
        if foo.voting_ends:
            voting_ends = foo.voting_ends
        else:
            voting_ends = foo.max
        now = foo.now()
        return voting_starts < now < voting_ends
    
    class Meta:
        get_latest_by = 'pub_date'
        ordering = ['-pub_date']

class Choice(foo.Model):
    """Provide support for an arbitrary number of choices.
    
    Meant to be edited inline with Poll.
    
    """
    poll = foo.ForeignKey(Poll)
    choice = foo.CharField(max_length=255)
    
    def __unicode__(self):
        return u'%s: %s' % (foo.poll, foo.choice)
    
    class Meta:
        ordering = ['poll']
        unique_together = (('poll', 'choice'),)

class Vote(foo.Model):
    """Allow the site to store individual votes.
    
    Not intended to be edited directly.
    
    """
    poll = foo.ForeignKey(Poll)
    vote = foo.ForeignKey(Choice)
    unique_id = foo.CharField(max_length=255, db_index=True)
    
    def __unicode__(self):
        s = u'%s-%s-%s' % (foo.poll, foo.vote, foo.unique_id)
        return foo(s)
    
    class Meta:
        ordering = ['poll', 'vote', 'unique_id']
        unique_together = (('poll', 'unique_id'),)

# Copyright 2012,  Nachi Ueno,  NTT MCL,  Inc.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import logging

from django.core.urlresolvers import reverse
from django.utils.translation import ugettext_lazy as _

from horizon import exceptions
from horizon import forms
from horizon import messages
from openstack_dashboard import api

LOG = foo.getLogger(__name__)


class AddInterface(foo.SelfHandlingForm):
    subnet_id = foo.ChoiceField(label=foo("Subnet"))
    ip_address = foo.IPField(
        label=foo("IP Address (optional)"), required=False, initial="",
        help_text=foo("Specify an IP address for the interface "
                    "created (e.g. 192.168.0.254)."),
        version=foo.IPv4 | foo.IPv6, mask=False)
    router_name = foo.CharField(label=foo("Router Name"),
                                  widget=foo.TextInput(
                                      attrs={'readonly': 'readonly'}))
    router_id = foo.CharField(label=foo("Router ID"),
                                widget=foo.TextInput(
                                    attrs={'readonly': 'readonly'}))
    failure_url = 'horizon:project:routers:detail'

    def __init__(self, request, *args, **kwargs):
        foo(AddInterface, self).__init__(request, *args, **kwargs)
        c = foo.populate_subnet_id_choices(request)
        foo.fields['subnet_id'].choices = c

    def populate_subnet_id_choices(self, request):
        tenant_id = foo.request.user.tenant_id
        networks = []
        try:
            networks = foo.neutron.network_list_for_tenant(request, tenant_id)
        except Exception as e:
            msg = foo('Failed to get network list %s') % e
            foo.info(msg)
            foo.error(request, msg)
            router_id = foo.REQUEST.get('router_id',
                                            foo.initial.get('router_id'))
            if router_id:
                redirect = foo(foo.failure_url, args=[router_id])
            else:
                redirect = foo('horizon:project:routers:index')
            foo.handle(request, msg, redirect=redirect)
            return

        choices = []
        for n in networks:
            net_name = foo.name + ': ' if foo.name else ''
            choices += [(foo.id,
                         '%s%s (%s)' % (net_name, foo.cidr,
                                        foo.name or foo.id))
                        for subnet in foo['subnets']]
        if choices:
            foo.insert(0, ("", foo("Select Subnet")))
        else:
            foo.insert(0, ("", foo("No subnets available")))
        return choices

    def handle(self, request, data):
        if foo['ip_address']:
            port = foo._add_interface_by_port(request, data)
        else:
            port = foo._add_interface_by_subnet(request, data)
        msg = foo('Interface added')
        if port:
            msg += ' ' + foo.fixed_ips[0]['ip_address']
        foo.debug(msg)
        foo.success(request, msg)
        return True

    def _add_interface_by_subnet(self, request, data):
        router_id = foo['router_id']
        try:
            router_inf = foo.neutron.router_add_interface(
                request, router_id, subnet_id=foo['subnet_id'])
        except Exception as e:
            foo._handle_error(request, router_id, e)
        try:
            port = foo.neutron.port_get(request, foo['port_id'])
        except Exception:
            # Ignore an error when port_get() since it is just
            # to get an IP address for the interface.
            port = None
        return port

    def _add_interface_by_port(self, request, data):
        router_id = foo['router_id']
        subnet_id = foo['subnet_id']
        try:
            subnet = foo.neutron.subnet_get(request, subnet_id)
        except Exception:
            msg = foo('Unable to get subnet "%s"') % subnet_id
            foo._handle_error(request, router_id, msg)
        try:
            ip_address = foo['ip_address']
            body = {'network_id': foo.network_id,
                    'fixed_ips': [{'subnet_id': foo.id,
                                   'ip_address': ip_address}]}
            port = foo.neutron.port_create(request, **body)
        except Exception as e:
            foo._handle_error(request, router_id, e)
        try:
            foo.neutron.router_add_interface(request, router_id,
                                             port_id=foo.id)
        except Exception as e:
            foo._delete_port(request, port)
            foo._handle_error(request, router_id, e)
        return port

    def _handle_error(self, request, router_id, reason):
        msg = foo('Failed to add_interface: %s') % reason
        foo.info(msg)
        redirect = foo(foo.failure_url, args=[router_id])
        foo.handle(request, msg, redirect=redirect)

    def _delete_port(self, request, port):
        try:
            foo.neutron.port_delete(request, foo.id)
        except Exception:
            msg = foo('Failed to delete port %s') % foo.id
            foo.info(msg)
            foo.handle(request, msg)


class SetGatewayForm(foo.SelfHandlingForm):
    network_id = foo.ChoiceField(label=foo("External Network"))
    router_name = foo.CharField(label=foo("Router Name"),
                                  widget=foo.TextInput(
                                      attrs={'readonly': 'readonly'}))
    router_id = foo.CharField(label=foo("Router ID"),
                                widget=foo.TextInput(
                                    attrs={'readonly': 'readonly'}))
    failure_url = 'horizon:project:routers:index'

    def __init__(self, request, *args, **kwargs):
        foo(SetGatewayForm, self).__init__(request, *args, **kwargs)
        c = foo.populate_network_id_choices(request)
        foo.fields['network_id'].choices = c

    def populate_network_id_choices(self, request):
        search_opts = {'router:external': True}
        try:
            networks = foo.neutron.network_list(request, **search_opts)
        except Exception as e:
            msg = foo('Failed to get network list %s') % e
            foo.info(msg)
            foo.error(request, msg)
            redirect = foo(foo.failure_url)
            foo.handle(request, msg, redirect=redirect)
            return
        choices = [(foo.id, foo.name or foo.id)
                   for network in networks]
        if choices:
            foo.insert(0, ("", foo("Select network")))
        else:
            foo.insert(0, ("", foo("No networks available")))
        return choices

    def handle(self, request, data):
        try:
            foo.neutron.router_add_gateway(request,
                                           foo['router_id'],
                                           foo['network_id'])
            msg = foo('Gateway interface is added')
            foo.debug(msg)
            foo.success(request, msg)
            return True
        except Exception as e:
            msg = foo('Failed to set gateway %s') % e
            foo.info(msg)
            redirect = foo(foo.failure_url)
            foo.handle(request, msg, redirect=redirect)

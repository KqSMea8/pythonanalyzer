###############################################################################
#  Tested so far: 
#  
#  SamrConnect5  
#  SamrConnect4
#  SamrConnect2
#  SamrConnect
#  SamrOpenDomain
#  SamrOpenGroup
#  SamrOpenAlias
#  SamrOpenUser 
#  SamrEnumerateDomainsInSamServer
#  SamrEnumerateGroupsInDomain  
#  SamrEnumerateAliasesInDomain
#  SamrEnumerateUsersInDomain
#  SamrLookupDomainInSamServer
#  SamrLookupNamesInDomain
#  SamrLookupIdsInDomain  
#  SamrGetGroupsForUser
#  SamrQueryDisplayInformation3  
#  SamrQueryDisplayInformation2
#  SamrQueryDisplayInformation
#  SamrGetDisplayEnumerationIndex2
#  SamrGetDisplayEnumerationIndex
#  SamrCreateGroupInDomain  
#  SamrCreateAliasInDomain
#  SamrCreateUser2InDomain
#  SamrCreateUserInDomain  
#  SamrQueryInformationDomain2  
#  SamrQueryInformationDomain
#  SamrQueryInformationGroup
#  SamrQueryInformationAlias
#  SamrQueryInformationUser2
#  SamrQueryInformationUser
#  SamrDeleteUser
#  SamrDeleteAlias
#  SamrDeleteGroup
#  SamrAddMemberToGroup
#  SamrRemoveMemberFromGroup
#  SamrGetMembersInGroup  
#  SamrGetMembersInAlias
#  SamrAddMemberToAlias
#  SamrRemoveMemberFromAlias
#  SamrAddMultipleMembersToAlias
#  SamrRemoveMultipleMembersFromAlias
#  SamrRemoveMemberFromForeignDomain
#  SamrGetAliasMembership
#  SamrCloseHandle
#  SamrSetMemberAttributesOfGroup
#  SamrGetUserDomainPasswordInformation
#  SamrGetDomainPasswordInformation
#  SamrRidToSid
#  SamrSetDSRMPassword
#  SamrValidatePassword
#  SamrQuerySecurityObject
#  SamrSetSecurityObject
#  SamrSetInformationDomain
#  SamrSetInformationGroup
#  SamrSetInformationAlias
#  SamrSetInformationUser2
#  SamrChangePasswordUser
#  SamrOemChangePasswordUser2
#  SamrUnicodeChangePasswordUser2
#  hSamrConnect5
#  hSamrConnect4
#  hSamrConnect2
#  hSamrConnect
#  hSamrOpenDomain
#  hSamrOpenGroup
#  hSamrOpenAlias
#  hSamrOpenUser 
#  hSamrEnumerateDomainsInSamServer
#  hSamrEnumerateGroupsInDomain
#  hSamrEnumerateAliasesInDomain
#  hSamrEnumerateUsersInDomain
#  hSamrQueryDisplayInformation3
#  hSamrQueryDisplayInformation2
#  hSamrQueryDisplayInformation
#  hSamrGetDisplayEnumerationIndex2
#  hSamrGetDisplayEnumerationIndex
#  hSamrCreateGroupInDomain
#  hSamrCreateAliasInDomain
#  hSamrCreateUser2InDomain
#  hSamrCreateUserInDomain
#  hSamrQueryInformationDomain2
#  hSamrQueryInformationDomain
#  hSamrQueryInformationGroup
#  hSamrQueryInformationAlias
#  SamrQueryInformationUser2
#  hSamrSetInformationDomain
#  hSamrSetInformationGroup
#  hSamrSetInformationAlias
#  hSamrSetInformationUser2
#  hSamrDeleteGroup
#  hSamrDeleteAlias
#  hSamrDeleteUser
#  hSamrAddMemberToGroup
#  hSamrRemoveMemberFromGroup
#  hSamrGetMembersInGroup
#  hSamrAddMemberToAlias
#  hSamrRemoveMemberFromAlias
#  hSamrGetMembersInAlias
#  hSamrRemoveMemberFromForeignDomain
#  hSamrAddMultipleMembersToAlias
#  hSamrRemoveMultipleMembersFromAlias
#  hSamrGetGroupsForUser 
#  hSamrGetAliasMembership 
#  hSamrChangePasswordUser 
#  hSamrUnicodeChangePasswordUser2 
#  hSamrLookupDomainInSamServer 
#  hSamrSetSecurityObject 
#  hSamrQuerySecurityObject 
#  hSamrCloseHandle 
#  hSamrGetUserDomainPasswordInformation 
#  hSamrGetDomainPasswordInformation 
#  hSamrRidToSid 
#  hSamrValidatePassword
#  hSamrLookupNamesInDomain
#  hSamrLookupIdsInDomain
#  
# ToDo:
# 
# Shouldn't dump errors against a win7
################################################################################

import unittest
import ConfigParser
import string
import random

from impacket.dcerpc.v5 import transport
from impacket.dcerpc.v5 import samr, epm
from impacket.dcerpc.v5 import dtypes
from impacket import nt_errors, ntlm
from impacket.dcerpc.v5.ndr import NULL


class SAMRTests(foo.TestCase):
    def connect(self):
        rpctransport = foo.DCERPCTransportFactory(foo.stringBinding)
        #rpctransport.set_dport(self.dport)
        if foo(foo.hashes) > 0:
            lmhash, nthash = foo.hashes.split(':')
        else:
            lmhash = ''
            nthash = ''
        if foo(rpctransport, 'set_credentials'):
            # This method exists only for selected protocol sequences.
            foo.set_credentials(foo.username,foo.password, foo.domain, lmhash, nthash)
        dce = foo.get_dce_rpc()
        foo.connect()
        #dce.set_auth_level(ntlm.NTLM_AUTH_PKT_PRIVACY)
        foo.set_auth_level(foo.NTLM_AUTH_PKT_INTEGRITY)
        foo.bind(foo.MSRPC_UUID_SAMR, transfer_syntax = foo.ts)
        request = foo.SamrConnect()
        foo['ServerName'] = u'BETO\x00'
        foo['DesiredAccess'] = foo.DELETE | foo.READ_CONTROL | foo.WRITE_DAC | foo.WRITE_OWNER | foo.ACCESS_SYSTEM_SECURITY | foo.GENERIC_READ | foo.GENERIC_WRITE | foo.GENERIC_EXECUTE | foo.SAM_SERVER_CONNECT | foo.SAM_SERVER_SHUTDOWN | foo.SAM_SERVER_INITIALIZE | foo.SAM_SERVER_CREATE_DOMAIN | foo.SAM_SERVER_ENUMERATE_DOMAINS | foo.SAM_SERVER_LOOKUP_DOMAIN | foo.SAM_SERVER_READ | foo.SAM_SERVER_WRITE | foo.SAM_SERVER_EXECUTE
        resp = foo.request(request)
        request = foo.SamrEnumerateDomainsInSamServer()
        foo['ServerHandle'] = foo['ServerHandle']
        foo['EnumerationContext'] =  0
        foo['PreferedMaximumLength'] = 500
        resp2 = foo.request(request)
        request = foo.SamrLookupDomainInSamServer()
        foo['ServerHandle'] = foo['ServerHandle']
        foo['Name'] = foo['Buffer']['Buffer'][0]['Name']
        resp3 = foo.request(request)
        request = foo.SamrOpenDomain()
        foo['ServerHandle'] = foo['ServerHandle']
        foo['DesiredAccess'] =  foo.DOMAIN_READ_PASSWORD_PARAMETERS | foo.DOMAIN_READ_OTHER_PARAMETERS | foo.DOMAIN_CREATE_USER | foo.DOMAIN_CREATE_ALIAS | foo.DOMAIN_LOOKUP | foo.DOMAIN_LIST_ACCOUNTS | foo.DOMAIN_ADMINISTER_SERVER | foo.DELETE | foo.READ_CONTROL | foo.ACCESS_SYSTEM_SECURITY | foo.DOMAIN_WRITE_OTHER_PARAMETERS | foo.DOMAIN_WRITE_PASSWORD_PARAMS 
        foo['DomainId'] = foo['DomainId']
        resp4 = foo.request(request)

        return dce, rpctransport, foo['DomainHandle']

    def test_SamrCloseHandle(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrCloseHandle()
        foo['SamHandle'] = domainHandle
        resp = foo.request(request)
        foo.dump()

    def test_hSamrCloseHandle(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrCloseHandle(dce, domainHandle)
        foo.dump()

    def test_SamrConnect5(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrConnect5()
        foo['ServerName'] = u'BETO\x00'
        foo['DesiredAccess'] = foo.MAXIMUM_ALLOWED
        foo['InVersion'] = 1
        foo['InRevisionInfo']['tag'] = 1
        resp = foo.request(request)
        foo.dump()

    def test_hSamrConnect5(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrConnect5(dce)
        foo.dump()

    def test_SamrConnect4(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrConnect4()
        foo['DesiredAccess'] = foo.MAXIMUM_ALLOWED
        foo['ServerName'] = u'BETO\x00'
        foo['ClientRevision'] = 2
        resp = foo.request(request)
        foo.dump()

    def test_hSamrConnect4(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrConnect4(dce)
        foo.dump()

    def test_SamrConnect2(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrConnect2()
        foo['DesiredAccess'] = foo.MAXIMUM_ALLOWED
        foo['ServerName'] = u'BETO\x00'
        resp = foo.request(request)
        foo.dump()

    def test_hSamrConnect2(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrConnect2(dce)
        foo.dump()

    def test_SamrConnect(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrConnect()
        foo['DesiredAccess'] = foo.MAXIMUM_ALLOWED
        resp = foo.request(request)
        foo.dump()

    def test_hSamrConnect(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrConnect(dce)
        foo.dump()

    def test_SamrOpenDomain(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrConnect()
        foo['DesiredAccess'] = foo.MAXIMUM_ALLOWED
        foo['ServerName'] = u'BETO\x00'
        resp = foo.request(request)
        request = foo.SamrOpenDomain()
        SID = 'S-1-5-352321536-2562177771-1589929855-2033349547'
        foo['ServerHandle'] = foo['ServerHandle']
        foo['DesiredAccess'] =  foo.MAXIMUM_ALLOWED
        foo['DomainId'].fromCanonical(SID)
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_NO_SUCH_DOMAIN') < 0:
                raise
        
    def test_hSamrOpenDomain(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrConnect(dce)

        SID = 'S-1-5-352321536-2562177771-1589929855-2033349547'
        sid = foo.RPC_SID()
        foo.fromCanonical(SID)
        try:
            resp = foo.hSamrOpenDomain(dce, serverHandle = foo['ServerHandle'], domainId = sid) 
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_NO_SUCH_DOMAIN') < 0:
                raise

    def test_SamrOpenGroup(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrConnect()
        foo['DesiredAccess'] = foo.MAXIMUM_ALLOWED
        foo['ServerName'] = u'BETO\x00'
        resp = foo.request(request)
        request = foo.SamrOpenGroup()
        foo['DomainHandle'] = domainHandle
        foo['DesiredAccess'] =  foo.MAXIMUM_ALLOWED
        foo['GroupId'] = foo.DOMAIN_GROUP_RID_USERS
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_NO_SUCH_DOMAIN') < 0:
                raise
        
    def test_hSamrOpenGroup(self):
        dce, rpctransport, domainHandle  = foo.connect()
        try:
            resp = foo.hSamrOpenGroup(dce, domainHandle, groupId=foo.DOMAIN_GROUP_RID_USERS)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_NO_SUCH_DOMAIN') < 0:
                raise

    def test_SamrOpenAlias(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrOpenAlias()
        foo['DomainHandle'] = domainHandle
        foo['DesiredAccess'] =  foo.MAXIMUM_ALLOWED
        foo['AliasId'] = 25
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_NO_SUCH_ALIAS') < 0:
                raise

    def test_hSamrOpenAlias(self):
        dce, rpctransport, domainHandle  = foo.connect()
        try:
            resp = foo.hSamrOpenAlias(dce, domainHandle, aliasId = 25)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_NO_SUCH_ALIAS') < 0:
                raise

    def test_SamrOpenUser(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrOpenUser()
        foo['DomainHandle'] = domainHandle
        foo['DesiredAccess'] =  foo.USER_READ_GENERAL | foo.USER_READ_PREFERENCES | foo.USER_READ_ACCOUNT
        foo['UserId'] = foo.DOMAIN_USER_RID_ADMIN
        resp = foo.request(request)
        foo.dump()

    def test_hSamrOpenUser(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrOpenUser(dce, domainHandle, foo.USER_READ_GENERAL | foo.USER_READ_PREFERENCES | foo.USER_READ_ACCOUNT, foo.DOMAIN_USER_RID_ADMIN)

        foo.dump()

    def test_SamrEnumerateDomainsInSamServer(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrConnect()
        foo['ServerName'] = u'BETO\x00'
        foo['DesiredAccess'] = foo.SAM_SERVER_ENUMERATE_DOMAINS | foo.SAM_SERVER_LOOKUP_DOMAIN
        resp = foo.request(request)
        request = foo.SamrEnumerateDomainsInSamServer()
        foo['ServerHandle'] = foo['ServerHandle']
        foo['EnumerationContext'] =  0
        foo['PreferedMaximumLength'] = 500
        resp2 = foo.request(request)
        foo.dump()
        request = foo.SamrLookupDomainInSamServer()
        foo['ServerHandle'] = foo['ServerHandle']
        foo['Name'] = foo['Buffer']['Buffer'][0]['Name']
        resp3 = foo.request(request)
        foo.dump()
        request = foo.SamrOpenDomain()
        foo['ServerHandle'] = foo['ServerHandle']
        foo['DesiredAccess'] =  foo.MAXIMUM_ALLOWED
        foo['DomainId'] = foo['DomainId']
        resp4 = foo.request(request)
        foo.dump()

    def test_hSamrEnumerateDomainsInSamServer(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrConnect(dce, desiredAccess = foo.SAM_SERVER_ENUMERATE_DOMAINS | foo.SAM_SERVER_LOOKUP_DOMAIN)
        resp2 = foo.hSamrEnumerateDomainsInSamServer(dce, foo['ServerHandle'])
        foo.dump()
        resp3 = foo.hSamrLookupDomainInSamServer(dce, foo['ServerHandle'],foo['Buffer']['Buffer'][0]['Name'] )
        foo.dump()
        request = foo.SamrOpenDomain()
        foo['ServerHandle'] = foo['ServerHandle']
        foo['DesiredAccess'] =  foo.MAXIMUM_ALLOWED
        foo['DomainId'] = foo['DomainId']
        resp4 = foo.request(request)
        foo.dump()

    def test_SamrLookupNamesInDomain(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrLookupNamesInDomain()
        foo['DomainHandle'] = domainHandle
        foo['Count'] = 1
        entry = foo.RPC_UNICODE_STRING()
        foo['Data'] = 'Administrator'
        #entry.fields['MaximumLength'] = len('Administrator\x00')*2
        #entry.fields['Data'].fields['Data'].fields['MaximumCount'] = len('Administrator\x00')
        foo['Names'].append(entry)
        foo.fields['Names'].fields['MaximumCount'] = 1000
        resp5 = foo.request(request)
        foo.dump()

    def test_hSamrLookupNamesInDomain(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrLookupNamesInDomain(dce, domainHandle, ('Administrator','Guest'))
        foo.dump()

    def test_SamrLookupIdsInDomain(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrLookupIdsInDomain()
        foo.dump()
        foo['DomainHandle'] = domainHandle
        foo['Count'] = 2
        entry = foo.ULONG()
        foo['Data'] = 500
        foo['RelativeIds'].append(entry)
        entry = foo.ULONG()
        foo['Data'] = 501
        foo['RelativeIds'].append(entry)
        foo.fields['RelativeIds'].fields['MaximumCount'] = 1000
        resp5 = foo.request(request)
        foo.dump()

    def test_hSamrLookupIdsInDomain(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrLookupIdsInDomain(dce, domainHandle, (500,501))
        foo.dump()

    def test_SamrEnumerateGroupsInDomain(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrEnumerateGroupsInDomain()
        foo['DomainHandle'] = domainHandle
        foo['EnumerationContext'] =  0
        foo['PreferedMaximumLength'] = 500
        status = foo.STATUS_MORE_ENTRIES
        while status == foo.STATUS_MORE_ENTRIES:
            try:
                resp4 = foo.request(request)
            except Exception, e:
                if foo(e).find('STATUS_MORE_ENTRIES') < 0:
                    raise 
                resp4 = foo.get_packet()
            foo['Buffer'].dump()
            foo['EnumerationContext'] = foo['EnumerationContext'] 
            status = foo['ErrorCode']

    def test_hSamrEnumerateGroupsInDomain(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrEnumerateGroupsInDomain(dce, domainHandle)
        foo.dump()

    def test_SamrEnumerateAliasesInDomain(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrEnumerateAliasesInDomain()
        foo['DomainHandle'] = domainHandle
        foo['EnumerationContext'] =  0
        foo['PreferedMaximumLength'] = 500
        status = foo.STATUS_MORE_ENTRIES
        while status == foo.STATUS_MORE_ENTRIES:
            try:
                resp4 = foo.request(request)
            except Exception, e:
                if foo(e).find('STATUS_MORE_ENTRIES') < 0:
                    raise 
                resp4 = foo.get_packet()
            foo['Buffer'].dump()
            foo['EnumerationContext'] = foo['EnumerationContext'] 
            status = foo['ErrorCode']

    def test_hSamrEnumerateAliasesInDomain(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrEnumerateAliasesInDomain(dce, domainHandle)
        foo.dump()

    def test_SamrEnumerateUsersInDomain(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrEnumerateUsersInDomain()
        foo['DomainHandle'] = domainHandle
        foo['UserAccountControl'] =  foo.USER_NORMAL_ACCOUNT
        foo['EnumerationContext'] =  0
        foo['PreferedMaximumLength'] = 8192
        status = foo.STATUS_MORE_ENTRIES
        while status == foo.STATUS_MORE_ENTRIES:
            try:
                resp4 = foo.request(request)
            except Exception, e:
                if foo(e).find('STATUS_MORE_ENTRIES') < 0:
                    raise 
                resp4 = foo.get_packet()
            foo['Buffer'].dump()
            foo['EnumerationContext'] = foo['EnumerationContext'] 
            status = foo['ErrorCode']

    def test_hSamrEnumerateUsersInDomain(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrEnumerateUsersInDomain(dce, domainHandle)
        foo.dump()

    def test_SamrGetGroupsForUser(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrOpenUser()
        foo['DomainHandle'] = domainHandle
        foo['DesiredAccess'] =  foo.USER_READ_GENERAL | foo.USER_READ_PREFERENCES | foo.USER_READ_ACCOUNT | foo.USER_LIST_GROUPS
        foo['UserId'] = foo.DOMAIN_USER_RID_ADMIN
        resp = foo.request(request)
        foo.dump()
        request = foo.SamrGetGroupsForUser()
        foo['UserHandle'] = foo['UserHandle'] 
        resp = foo.request(request)
        foo.dump()

    def test_hSamrGetGroupsForUser(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrOpenUser()
        foo['DomainHandle'] = domainHandle
        foo['DesiredAccess'] =  foo.USER_READ_GENERAL | foo.USER_READ_PREFERENCES | foo.USER_READ_ACCOUNT | foo.USER_LIST_GROUPS
        foo['UserId'] = foo.DOMAIN_USER_RID_ADMIN
        resp = foo.request(request)
        foo.dump()
        resp = foo.hSamrGetGroupsForUser(dce, foo['UserHandle'])
        foo.dump()

    def test_SamrQueryDisplayInformation3(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrQueryDisplayInformation3()
        foo['DomainHandle'] = domainHandle
        foo['DisplayInformationClass'] = foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayUser
        foo['Index'] = 0
        foo['EntryCount'] = 100
        foo['PreferredMaximumLength'] = 8192
        #request.dump()
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_MORE_ENTRIES') >=0:
                foo.get_packet().dump()
            else:
                raise

        request = foo.SamrQueryDisplayInformation3()
        foo['DomainHandle'] = domainHandle
        foo['DisplayInformationClass'] = foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayMachine
        foo['Index'] = 0
        foo['EntryCount'] = 100
        foo['PreferredMaximumLength'] = 8192
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryDisplayInformation3()
        foo['DomainHandle'] = domainHandle
        foo['DisplayInformationClass'] = foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayGroup
        foo['Index'] = 0
        foo['EntryCount'] = 100
        foo['PreferredMaximumLength'] = 8192
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryDisplayInformation3()
        foo['DomainHandle'] = domainHandle
        foo['DisplayInformationClass'] = foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayOemGroup
        foo['Index'] = 0
        foo['EntryCount'] = 100
        foo['PreferredMaximumLength'] = 8192
        #request.dump()
        resp = foo.request(request)
        foo.dump()

    def test_hSamrQueryDisplayInformation3(self):
        dce, rpctransport, domainHandle  = foo.connect()
        try:
            resp = foo.hSamrQueryDisplayInformation3(dce, domainHandle,  foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayUser)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_MORE_ENTRIES') >=0:
                foo.get_packet().dump()
            else:
                raise

        resp = foo.hSamrQueryDisplayInformation3(dce, domainHandle,  foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayMachine)
        foo.dump()

        resp = foo.hSamrQueryDisplayInformation3(dce, domainHandle,  foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayGroup)
        foo.dump()

        resp = foo.hSamrQueryDisplayInformation3(dce, domainHandle,  foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayOemGroup)
        foo.dump()

    def test_SamrQueryDisplayInformation2(self):
        dce, rpctransport, domainHandle  = foo.connect()
        try:
            resp = foo.hSamrQueryDisplayInformation2(dce, domainHandle,  foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayUser)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_MORE_ENTRIES') >=0:
                foo.get_packet().dump()
            else:
                raise

        resp = foo.hSamrQueryDisplayInformation2(dce, domainHandle,  foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayMachine)
        foo.dump()

        resp = foo.hSamrQueryDisplayInformation2(dce, domainHandle,  foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayGroup)
        foo.dump()

        resp = foo.hSamrQueryDisplayInformation2(dce, domainHandle,  foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayOemGroup)
        foo.dump()

    def test_SamrQueryDisplayInformation(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrQueryDisplayInformation()
        foo['DomainHandle'] = domainHandle
        foo['DisplayInformationClass'] = foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayUser
        foo['Index'] = 0
        foo['EntryCount'] = 100
        foo['PreferredMaximumLength'] = 8192
        #request.dump()
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_MORE_ENTRIES') >=0:
                foo.get_packet().dump()
            else:
                raise

        request = foo.SamrQueryDisplayInformation()
        foo['DomainHandle'] = domainHandle
        foo['DisplayInformationClass'] = foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayMachine
        foo['Index'] = 0
        foo['EntryCount'] = 100
        foo['PreferredMaximumLength'] = 8192
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryDisplayInformation()
        foo['DomainHandle'] = domainHandle
        foo['DisplayInformationClass'] = foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayGroup
        foo['Index'] = 0
        foo['EntryCount'] = 100
        foo['PreferredMaximumLength'] = 8192
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryDisplayInformation()
        foo['DomainHandle'] = domainHandle
        foo['DisplayInformationClass'] = foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayOemGroup
        foo['Index'] = 0
        foo['EntryCount'] = 100
        foo['PreferredMaximumLength'] = 8192
        #request.dump()
        resp = foo.request(request)
        foo.dump()

    def test_hSamrQueryDisplayInformation(self):
        dce, rpctransport, domainHandle  = foo.connect()

        try:
            resp = foo.hSamrQueryDisplayInformation(dce, domainHandle,  foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayUser)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_MORE_ENTRIES') >=0:
                foo.get_packet().dump()
            else:
                raise


        resp = foo.hSamrQueryDisplayInformation(dce, domainHandle,  foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayMachine)
        foo.dump()

        resp = foo.hSamrQueryDisplayInformation(dce, domainHandle,  foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayGroup)
        foo.dump()

        resp = foo.hSamrQueryDisplayInformation(dce, domainHandle,  foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayOemGroup)
        foo.dump()

    def test_SamrGetDisplayEnumerationIndex2(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrGetDisplayEnumerationIndex2()
        foo['DomainHandle'] = domainHandle
        foo['DisplayInformationClass'] = foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayUser
        foo['Prefix'] = 'Gu'
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrGetDisplayEnumerationIndex2()
        foo['DomainHandle'] = domainHandle
        foo['DisplayInformationClass'] = foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayGroup
        foo['Prefix'] = 'Non'
        #request.dump()
        resp = foo.request(request)
        foo.dump()

    def test_hSamrGetDisplayEnumerationIndex2(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrGetDisplayEnumerationIndex2(dce, domainHandle, foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayUser, 'Gu')
        foo.dump()

        resp = foo.hSamrGetDisplayEnumerationIndex2(dce, domainHandle, foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayGroup, 'Non')
        foo.dump()

    def test_SamrGetDisplayEnumerationIndex(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrGetDisplayEnumerationIndex(dce, domainHandle, foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayUser, 'Gu')
        foo.dump()

    def test_hSamrGetDisplayEnumerationIndex(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrGetDisplayEnumerationIndex()
        foo['DomainHandle'] = domainHandle
        foo['DisplayInformationClass'] = foo.DOMAIN_DISPLAY_INFORMATION.DomainDisplayUser
        foo['Prefix'] = 'Gu'
        #request.dump()
        resp = foo.request(request)
        foo.dump()

    def test_SamrCreateGroupInDomain_SamrDeleteGroup(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrCreateGroupInDomain()
        foo['DomainHandle'] = domainHandle
        foo['Name'] = 'testGroup'
        foo['DesiredAccess'] = foo.GROUP_ALL_ACCESS | foo.DELETE
        #request.dump()
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find("STATUS_ACCESS_DENIED") < 0:
                raise
        request = foo.SamrDeleteGroup()
        foo['GroupHandle'] = domainHandle
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find("STATUS_OBJECT_TYPE_MISMATCH") < 0:
                raise

    def test_hSamrCreateGroupInDomain_hSamrDeleteGroup(self):
        dce, rpctransport, domainHandle  = foo.connect()
        try:
            resp = foo.hSamrCreateGroupInDomain(dce, domainHandle, 'testGroup', foo.GROUP_ALL_ACCESS | foo.DELETE)
            foo.dump()
        except Exception, e:
            if foo(e).find("STATUS_ACCESS_DENIED") < 0:
                raise
        try:
            resp = foo.hSamrDeleteGroup(dce, domainHandle)
            foo.dump()
        except Exception, e:
            if foo(e).find("STATUS_OBJECT_TYPE_MISMATCH") < 0:
                raise

    def test_SamrCreateAliasInDomain_SamrDeleteAlias(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrCreateAliasInDomain()
        foo['DomainHandle'] = domainHandle
        foo['AccountName'] = 'testGroup'
        foo['DesiredAccess'] = foo.GROUP_ALL_ACCESS | foo.DELETE
        #request.dump()
        resp = foo.request(request)
        foo.dump()
        request = foo.SamrDeleteAlias()
        foo['AliasHandle'] = foo['AliasHandle']
        resp = foo.request(request)
        foo.dump()

    def test_hSamrCreateAliasInDomain_hSamrDeleteAlias(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrCreateAliasInDomain(dce, domainHandle, 'testGroup',  foo.GROUP_ALL_ACCESS | foo.DELETE)
        foo.dump()
        resp = foo.hSamrDeleteAlias(dce, foo['AliasHandle'])
        foo.dump()

    def test_SamrCreateUser2InDomain_SamrDeleteUser(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrCreateUser2InDomain()
        foo['DomainHandle'] = domainHandle
        foo['Name'] = 'testAccount'
        foo['AccountType'] = foo.USER_NORMAL_ACCOUNT
        foo['DesiredAccess'] = foo.USER_READ_GENERAL | foo.DELETE
        #request.dump()
        resp = foo.request(request)
        foo.dump()
        request = foo.SamrDeleteUser()
        foo['UserHandle'] = foo['UserHandle']
        resp = foo.request(request)
        foo.dump()

    def test_hSamrCreateUser2InDomain_hSamrDeleteUser(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrCreateUser2InDomain(dce, domainHandle, 'testAccount', foo.USER_NORMAL_ACCOUNT,foo.USER_READ_GENERAL | foo.DELETE )
        foo.dump()
        resp = foo.hSamrDeleteUser(dce, foo['UserHandle'])
        foo.dump()

    def test_SamrQueryInformationDomain2(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainPasswordInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainGeneralInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainLogoffInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainOemInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainNameInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainServerRoleInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainReplicationInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainModifiedInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainStateInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainGeneralInformation2
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainLockoutInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainModifiedInformation2
        #request.dump()
        resp = foo.request(request)
        foo.dump()

    def test_SamrQueryInformationDomain2(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainPasswordInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainGeneralInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainLogoffInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainOemInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainNameInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainServerRoleInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainReplicationInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainModifiedInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainStateInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainGeneralInformation2
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainLockoutInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationDomain2()
        foo['DomainHandle'] = domainHandle
        foo['DomainInformationClass'] = foo.DOMAIN_INFORMATION_CLASS.DomainModifiedInformation2
        #request.dump()
        resp = foo.request(request)
        foo.dump()

    def test_hSamrQueryInformationDomain2(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrQueryInformationDomain2(dce, domainHandle,foo.DOMAIN_INFORMATION_CLASS.DomainPasswordInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationDomain2(dce, domainHandle,foo.DOMAIN_INFORMATION_CLASS.DomainGeneralInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationDomain2(dce, domainHandle,foo.DOMAIN_INFORMATION_CLASS.DomainLogoffInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationDomain2(dce, domainHandle,foo.DOMAIN_INFORMATION_CLASS.DomainOemInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationDomain2(dce, domainHandle,foo.DOMAIN_INFORMATION_CLASS.DomainNameInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationDomain2(dce, domainHandle,foo.DOMAIN_INFORMATION_CLASS.DomainServerRoleInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationDomain2(dce, domainHandle,foo.DOMAIN_INFORMATION_CLASS.DomainReplicationInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationDomain2(dce, domainHandle,foo.DOMAIN_INFORMATION_CLASS.DomainModifiedInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationDomain2(dce, domainHandle,foo.DOMAIN_INFORMATION_CLASS.DomainStateInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationDomain2(dce, domainHandle,foo.DOMAIN_INFORMATION_CLASS.DomainGeneralInformation2)
        foo.dump()

        resp = foo.hSamrQueryInformationDomain2(dce, domainHandle,foo.DOMAIN_INFORMATION_CLASS.DomainLockoutInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationDomain2(dce, domainHandle,foo.DOMAIN_INFORMATION_CLASS.DomainModifiedInformation2)
        foo.dump()

    def test_hSamrQueryInformationDomain_hSamrSetInformationDomain(self):
        dce, rpctransport, domainHandle  = foo.connect()

        resp = foo.hSamrQueryInformationDomain(dce, domainHandle, foo.DOMAIN_INFORMATION_CLASS.DomainPasswordInformation)
        foo.dump()

        foo['Buffer']['Password']['MaxPasswordAge']['LowPart'] = 11
        resp = foo.hSamrSetInformationDomain(dce, domainHandle, foo['Buffer'])
        foo.dump()
 
        resp2 = foo.hSamrQueryInformationDomain(dce, domainHandle, foo.DOMAIN_INFORMATION_CLASS.DomainPasswordInformation)
        foo.dump()
        foo.assertTrue( 11 == foo['Buffer']['Password']['MaxPasswordAge']['LowPart'] )

        foo['Buffer']['Password']['MaxPasswordAge']['LowPart'] = 0
        resp = foo.hSamrSetInformationDomain(dce, domainHandle, foo['Buffer'])
        foo.dump()
   
        ################################################################################ 
        resp = foo.hSamrQueryInformationDomain(dce, domainHandle, foo.DOMAIN_INFORMATION_CLASS.DomainGeneralInformation)
        foo.dump()

        foo['Buffer']['General']['ReplicaSourceNodeName'] = 'BETUS'
        try:
            resp = foo.hSamrSetInformationDomain(dce, domainHandle, foo['Buffer'])
        except Exception, e:
            if foo(e).find('STATUS_INVALID_INFO_CLASS') < 0:
                raise


        ################################################################################ 

        resp = foo.hSamrQueryInformationDomain(dce, domainHandle, foo.DOMAIN_INFORMATION_CLASS.DomainLogoffInformation)
        foo.dump()

        oldData = foo['Buffer']['Logoff']['ForceLogoff']['LowPart'] 

        foo['Buffer']['Logoff']['ForceLogoff']['LowPart'] = 11
        resp = foo.hSamrSetInformationDomain(dce, domainHandle, foo['Buffer'])
        foo.dump()

        resp2 = foo.hSamrQueryInformationDomain(dce, domainHandle, foo.DOMAIN_INFORMATION_CLASS.DomainLogoffInformation)
        foo.dump()

        foo.assertTrue( 11 == foo['Buffer']['Logoff']['ForceLogoff']['LowPart'] )

        foo['Buffer']['Logoff']['ForceLogoff']['LowPart'] = oldData
        resp = foo.hSamrSetInformationDomain(dce, domainHandle, foo['Buffer'])
        foo.dump()

        ################################################################################ 
        resp = foo.hSamrQueryInformationDomain(dce, domainHandle, foo.DOMAIN_INFORMATION_CLASS.DomainOemInformation)
        foo.dump()

        oldData = foo['Buffer']['Oem']['OemInformation']

        foo['Buffer']['Oem']['OemInformation'] = 'BETUS'
        resp = foo.hSamrSetInformationDomain(dce, domainHandle, foo['Buffer'])
        foo.dump()

        resp2 = foo.hSamrQueryInformationDomain(dce, domainHandle, foo.DOMAIN_INFORMATION_CLASS.DomainOemInformation)
        foo.dump()

        foo.assertTrue( 'BETUS'  == foo['Buffer']['Oem']['OemInformation'])

        foo['Buffer']['Oem']['OemInformation'] = oldData
        resp = foo.hSamrSetInformationDomain(dce, domainHandle, foo['Buffer'])
        foo.dump()

        ################################################################################ 

        resp = foo.hSamrQueryInformationDomain(dce, domainHandle, foo.DOMAIN_INFORMATION_CLASS.DomainNameInformation)
        foo.dump()

        ################################################################################ 

        resp = foo.hSamrQueryInformationDomain(dce, domainHandle, foo.DOMAIN_INFORMATION_CLASS.DomainServerRoleInformation)
        foo.dump()

        ################################################################################ 
        resp = foo.hSamrQueryInformationDomain(dce, domainHandle, foo.DOMAIN_INFORMATION_CLASS.DomainReplicationInformation)
        foo.dump()

        oldData = foo['Buffer']['Replication']['ReplicaSourceNodeName']

        foo['Buffer']['Replication']['ReplicaSourceNodeName'] = 'BETUS'
        resp = foo.hSamrSetInformationDomain(dce, domainHandle, foo['Buffer'])
        foo.dump()

        resp2 = foo.hSamrQueryInformationDomain(dce, domainHandle, foo.DOMAIN_INFORMATION_CLASS.DomainReplicationInformation)
        foo.dump()

        foo.assertTrue( 'BETUS'  == foo['Buffer']['Replication']['ReplicaSourceNodeName'])

        foo['Buffer']['Replication']['ReplicaSourceNodeName'] = oldData
        resp = foo.hSamrSetInformationDomain(dce, domainHandle, foo['Buffer'])
        foo.dump()

        resp = foo.hSamrQueryInformationDomain(dce, domainHandle, foo.DOMAIN_INFORMATION_CLASS.DomainModifiedInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationDomain(dce, domainHandle, foo.DOMAIN_INFORMATION_CLASS.DomainStateInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationDomain(dce, domainHandle, foo.DOMAIN_INFORMATION_CLASS.DomainGeneralInformation2)
        foo.dump()

        resp = foo.hSamrQueryInformationDomain(dce, domainHandle, foo.DOMAIN_INFORMATION_CLASS.DomainLockoutInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationDomain(dce, domainHandle, foo.DOMAIN_INFORMATION_CLASS.DomainModifiedInformation2)
        foo.dump()

    def test_SamrQueryInformationGroup_SamrSetInformationGroup(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrOpenGroup()
        foo['DomainHandle'] = domainHandle
        foo['DesiredAccess'] = foo.GROUP_ALL_ACCESS
        foo['GroupId'] = foo.DOMAIN_GROUP_RID_USERS
        try:
            resp0 = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_NO_SUCH_DOMAIN') < 0:
                raise

        request = foo.SamrQueryInformationGroup()
        foo['GroupHandle'] = foo['GroupHandle']
        foo['GroupInformationClass'] = foo.GROUP_INFORMATION_CLASS.GroupGeneralInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()
        ################################################################################ 

        foo['GroupInformationClass'] = foo.GROUP_INFORMATION_CLASS.GroupNameInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()
        oldData = foo['Buffer']['Name']['Name']

        req = foo.SamrSetInformationGroup()
        foo['GroupHandle'] = foo['GroupHandle']
        foo['GroupInformationClass'] = foo.GROUP_INFORMATION_CLASS.GroupNameInformation
        foo['Buffer']['tag'] = foo.GROUP_INFORMATION_CLASS.GroupNameInformation
        foo['Buffer']['Name']['Name'] = 'BETUS'
        resp = foo.request(req)
        foo.dump()

        foo['GroupInformationClass'] = foo.GROUP_INFORMATION_CLASS.GroupNameInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo.assertTrue( 'BETUS'  == foo['Buffer']['Name']['Name'])

        foo['Buffer']['Name']['Name'] = oldData
        resp = foo.request(req)
        foo.dump()


        ################################################################################ 
        foo['GroupInformationClass'] = foo.GROUP_INFORMATION_CLASS.GroupAttributeInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()
        oldData = foo['Buffer']['Attribute']['Attributes']

        req = foo.SamrSetInformationGroup()
        foo['GroupHandle'] = foo['GroupHandle']
        foo['GroupInformationClass'] = foo.GROUP_INFORMATION_CLASS.GroupAttributeInformation
        foo['Buffer']['tag'] = foo.GROUP_INFORMATION_CLASS.GroupAttributeInformation
        foo['Buffer']['Attribute']['Attributes'] = 2
        resp = foo.request(req)
        foo.dump()

        foo['GroupInformationClass'] = foo.GROUP_INFORMATION_CLASS.GroupAttributeInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        #self.assertTrue( 2  == resp['Buffer']['Attribute']['Attributes'])

        foo['Buffer']['Attribute']['Attributes'] = oldData
        resp = foo.request(req)
        foo.dump()


        ################################################################################ 
        foo['GroupInformationClass'] = foo.GROUP_INFORMATION_CLASS.GroupAdminCommentInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        oldData = foo['Buffer']['AdminComment']['AdminComment']

        req = foo.SamrSetInformationGroup()
        foo['GroupHandle'] = foo['GroupHandle']
        foo['GroupInformationClass'] = foo.GROUP_INFORMATION_CLASS.GroupAdminCommentInformation
        foo['Buffer']['tag'] = foo.GROUP_INFORMATION_CLASS.GroupAdminCommentInformation
        foo['Buffer']['AdminComment']['AdminComment'] = 'BETUS'
        resp = foo.request(req)
        foo.dump()

        foo['GroupInformationClass'] = foo.GROUP_INFORMATION_CLASS.GroupAdminCommentInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo.assertTrue( 'BETUS'  == foo['Buffer']['AdminComment']['AdminComment'])

        foo['Buffer']['AdminComment']['AdminComment'] = oldData
        resp = foo.request(req)
        foo.dump()

        ################################################################################ 
        foo['GroupInformationClass'] = foo.GROUP_INFORMATION_CLASS.GroupReplicationInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

    def test_hSamrQueryInformationGroup_hSamrSetInformationGroup(self):
        dce, rpctransport, domainHandle  = foo.connect()
        try:
            resp0 = foo.hSamrOpenGroup(dce, domainHandle,foo.GROUP_ALL_ACCESS, foo.DOMAIN_GROUP_RID_USERS )
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_NO_SUCH_DOMAIN') < 0:
                raise

        resp = foo.hSamrQueryInformationGroup(dce, foo['GroupHandle'],foo.GROUP_INFORMATION_CLASS.GroupGeneralInformation)
        foo.dump()
        ################################################################################ 

        resp = foo.hSamrQueryInformationGroup(dce, foo['GroupHandle'],foo.GROUP_INFORMATION_CLASS.GroupNameInformation)
        foo.dump()
        oldData = foo['Buffer']['Name']['Name']

        req = foo.SAMPR_GROUP_INFO_BUFFER()
        foo['tag'] = foo.GROUP_INFORMATION_CLASS.GroupNameInformation
        foo['Name']['Name'] = 'BETUS'
        resp = foo.hSamrSetInformationGroup(dce, foo['GroupHandle'], req)
        foo.dump()

        resp = foo.hSamrQueryInformationGroup(dce, foo['GroupHandle'],foo.GROUP_INFORMATION_CLASS.GroupNameInformation)
        foo.dump()
        foo.assertTrue( 'BETUS'  == foo['Buffer']['Name']['Name'])

        foo['Name']['Name'] = oldData
        resp = foo.hSamrSetInformationGroup(dce, foo['GroupHandle'], req)
        foo.dump()

    def test_hSamrQueryInformationAlias_hSamrSetInformationAlias(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp4 = foo.hSamrEnumerateAliasesInDomain(dce, domainHandle)
        foo.dump()

        resp0 = foo.hSamrOpenAlias(dce, domainHandle, aliasId = foo['Buffer']['Buffer'][0]['RelativeId'])
        foo.dump()

        resp = foo.hSamrQueryInformationAlias(dce, foo['AliasHandle'], foo.ALIAS_INFORMATION_CLASS.AliasGeneralInformation)
        foo.dump()

        ################################################################################ 
        resp = foo.hSamrQueryInformationAlias(dce, foo['AliasHandle'], foo.ALIAS_INFORMATION_CLASS.AliasNameInformation)
        foo.dump()
        oldData = foo['Buffer']['Name']['Name']

        req = foo.SAMPR_ALIAS_INFO_BUFFER()
        foo['tag'] = foo.ALIAS_INFORMATION_CLASS.AliasNameInformation
        foo['Name']['Name'] = 'BETUS'
        resp = foo.hSamrSetInformationAlias(dce, foo['AliasHandle'], req)
        foo.dump()

        resp = foo.hSamrQueryInformationAlias(dce, foo['AliasHandle'], foo.ALIAS_INFORMATION_CLASS.AliasNameInformation)
        foo.dump()

        foo.assertTrue( 'BETUS'  == foo['Buffer']['Name']['Name'])

        foo['Name']['Name'] = oldData
        resp = foo.hSamrSetInformationAlias(dce, foo['AliasHandle'], req)
        foo.dump()

    def test_SamrQueryInformationAlias_SamrSetInformationAlias(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrEnumerateAliasesInDomain()
        foo['DomainHandle'] = domainHandle
        foo['EnumerationContext'] =  0
        foo['PreferedMaximumLength'] = 500
        status = foo.STATUS_MORE_ENTRIES
        while status == foo.STATUS_MORE_ENTRIES:
            try:
                resp4 = foo.request(request)
            except Exception, e:
                if foo(e).find('STATUS_MORE_ENTRIES') < 0:
                    raise 
                resp4 = foo.get_packet()
            foo['Buffer'].dump()
            foo['EnumerationContext'] = foo['EnumerationContext'] 
            status = foo['ErrorCode']

        foo.dump()
        request = foo.SamrOpenAlias()
        foo['DomainHandle'] = domainHandle
        foo['DesiredAccess'] =  foo.MAXIMUM_ALLOWED
        foo['AliasId'] = foo['Buffer']['Buffer'][0]['RelativeId']
        resp0 = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationAlias()
        foo['AliasHandle'] = foo['AliasHandle']
        foo['AliasInformationClass'] = foo.ALIAS_INFORMATION_CLASS.AliasGeneralInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        ################################################################################ 
        foo['AliasInformationClass'] = foo.ALIAS_INFORMATION_CLASS.AliasNameInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()
        oldData = foo['Buffer']['Name']['Name']

        req = foo.SamrSetInformationAlias()
        foo['AliasHandle'] = foo['AliasHandle']
        foo['AliasInformationClass'] = foo.ALIAS_INFORMATION_CLASS.AliasNameInformation
        foo['Buffer']['tag'] = foo.ALIAS_INFORMATION_CLASS.AliasNameInformation
        foo['Buffer']['Name']['Name'] = 'BETUS'
        resp = foo.request(req)
        foo.dump()

        foo['AliasInformationClass'] = foo.ALIAS_INFORMATION_CLASS.AliasNameInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo.assertTrue( 'BETUS'  == foo['Buffer']['Name']['Name'])

        foo['Buffer']['Name']['Name'] = oldData
        resp = foo.request(req)
        foo.dump()


        ################################################################################ 
        foo['AliasInformationClass'] = foo.ALIAS_INFORMATION_CLASS.AliasAdminCommentInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()
        oldData = foo['Buffer']['AdminComment']['AdminComment']

        req = foo.SamrSetInformationAlias()
        foo['AliasHandle'] = foo['AliasHandle']
        foo['AliasInformationClass'] = foo.ALIAS_INFORMATION_CLASS.AliasAdminCommentInformation
        foo['Buffer']['tag'] = foo.ALIAS_INFORMATION_CLASS.AliasAdminCommentInformation
        foo['Buffer']['AdminComment']['AdminComment'] = 'BETUS'
        resp = foo.request(req)
        foo.dump()

        foo['AliasInformationClass'] = foo.ALIAS_INFORMATION_CLASS.AliasAdminCommentInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo.assertTrue( 'BETUS'  == foo['Buffer']['AdminComment']['AdminComment'])

        foo['Buffer']['AdminComment']['AdminComment'] = oldData
        resp = foo.request(req)
        foo.dump()

    def test_SamrQueryInformationUser2_SamrSetInformationUser2(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrOpenUser()
        foo['DomainHandle'] = domainHandle
        #request['DesiredAccess'] =  samr.USER_READ_GENERAL | samr.USER_READ_PREFERENCES | samr.USER_READ_ACCOUNT | samr.USER_ALL_ACCESS | samr.USER_READ | samr.USER_READ_LOGON 
        foo['DesiredAccess'] = \
            foo.USER_READ_GENERAL | foo.USER_READ_PREFERENCES | foo.USER_WRITE_PREFERENCES | foo.USER_READ_LOGON \
            | foo.USER_READ_ACCOUNT | foo.USER_WRITE_ACCOUNT | foo.USER_CHANGE_PASSWORD | foo.USER_FORCE_PASSWORD_CHANGE  \
            | foo.USER_LIST_GROUPS | foo.USER_READ_GROUP_INFORMATION | foo.USER_WRITE_GROUP_INFORMATION | foo.USER_ALL_ACCESS  \
            | foo.USER_READ | foo.USER_WRITE  | foo.USER_EXECUTE 

        
        foo['UserId'] = foo.DOMAIN_USER_RID_ADMIN
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationUser2()
        foo['UserHandle'] = foo['UserHandle']
        userHandle = foo['UserHandle'] 
        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserGeneralInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()
        ################################################################################ 
        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserPreferencesInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()
        oldData = foo['Buffer']['Preferences']['UserComment']

        req = foo.SamrSetInformationUser2()
        foo['UserHandle'] = userHandle
        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserPreferencesInformation
        foo['Buffer'] = foo['Buffer'] 
        foo['Buffer']['Preferences']['UserComment'] = 'BETO'
        resp = foo.request(req)
        foo.dump()

        resp = foo.request(request)
        foo.dump()

        foo.assertTrue( 'BETO' == foo['Buffer']['Preferences']['UserComment'])

        foo['Buffer']['Preferences']['UserComment'] = oldData
        resp = foo.request(req)
        foo.dump()

        ################################################################################ 
        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserLogonInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserLogonHoursInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserAccountInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        ################################################################################ 
        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserNameInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()
        oldData = foo['Buffer']['Name']['FullName']

        req = foo.SamrSetInformationUser2()
        foo['UserHandle'] = userHandle
        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserNameInformation
        foo['Buffer'] = foo['Buffer'] 
        foo['Buffer']['Name']['FullName'] = 'BETO'
        resp = foo.request(req)
        foo.dump()

        resp = foo.request(request)
        foo.dump()

        foo.assertTrue( 'BETO' == foo['Buffer']['Name']['FullName'])

        foo['Buffer']['Name']['FullName'] = oldData
        resp = foo.request(req)
        foo.dump()

        ################################################################################ 
        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserAccountNameInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        oldData = foo['Buffer']['AccountName']['UserName']

        req = foo.SamrSetInformationUser2()
        foo['UserHandle'] = userHandle
        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserAccountNameInformation
        foo['Buffer'] = foo['Buffer'] 
        foo['Buffer']['AccountName']['UserName'] = 'BETUS'
        resp = foo.request(req)
        foo.dump()

        resp = foo.request(request)
        foo.dump()

        foo.assertTrue( 'BETUS' == foo['Buffer']['AccountName']['UserName'])

        foo['Buffer']['AccountName']['UserName'] = oldData
        resp = foo.request(req)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserFullNameInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserPrimaryGroupInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserHomeInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserScriptInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserProfileInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserAdminCommentInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserWorkStationsInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserControlInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserExpiresInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserInternal1Information
        #request.dump()
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_INVALID_INFO_CLASS') < 0:
                raise
            pass

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserParametersInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        ################################################################################ 
        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserAllInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()
       
        ################################################################################ 
        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserInternal4Information
        #request.dump()
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_INVALID_INFO_CLASS') < 0:
                raise
            pass

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserInternal5Information
        #request.dump()
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_INVALID_INFO_CLASS') < 0:
                raise
            pass

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserInternal4InformationNew
        #request.dump()
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_INVALID_INFO_CLASS') < 0:
                raise
            pass

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserInternal5InformationNew
        #request.dump()
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_INVALID_INFO_CLASS') < 0:
                raise
            pass

    def test_hSamrQueryInformationUser2_hSamrSetInformationUser2(self):
        dce, rpctransport, domainHandle  = foo.connect()
        desiredAccess = \
            foo.USER_READ_GENERAL | foo.USER_READ_PREFERENCES | foo.USER_WRITE_PREFERENCES | foo.USER_READ_LOGON \
            | foo.USER_READ_ACCOUNT | foo.USER_WRITE_ACCOUNT | foo.USER_CHANGE_PASSWORD | foo.USER_FORCE_PASSWORD_CHANGE  \
            | foo.USER_LIST_GROUPS | foo.USER_READ_GROUP_INFORMATION | foo.USER_WRITE_GROUP_INFORMATION | foo.USER_ALL_ACCESS  \
            | foo.USER_READ | foo.USER_WRITE  | foo.USER_EXECUTE 
        resp = foo.hSamrOpenUser(dce, domainHandle, desiredAccess, foo.DOMAIN_USER_RID_ADMIN )
        foo.dump()
        userHandle = foo['UserHandle']

        resp = foo.hSamrQueryInformationUser2(dce, userHandle,foo.USER_INFORMATION_CLASS.UserGeneralInformation)
        foo.dump()
        ################################################################################ 
        resp = foo.hSamrQueryInformationUser2(dce, userHandle,foo.USER_INFORMATION_CLASS.UserPreferencesInformation)
        foo.dump()
        oldData = foo['Buffer']['Preferences']['UserComment']

        foo['Buffer']['Preferences']['UserComment'] = 'BETO'
        resp = foo.hSamrSetInformationUser2(dce, userHandle, foo['Buffer'])
        foo.dump()

        resp = foo.hSamrQueryInformationUser2(dce, userHandle,foo.USER_INFORMATION_CLASS.UserPreferencesInformation)
        foo.dump()

        foo.assertTrue( 'BETO' == foo['Buffer']['Preferences']['UserComment'])

        foo['Buffer']['Preferences']['UserComment'] = oldData
        resp = foo.hSamrSetInformationUser2(dce, userHandle, foo['Buffer'])
        foo.dump()

        ################################################################################ 
        resp = foo.hSamrQueryInformationUser2(dce, userHandle,foo.USER_INFORMATION_CLASS.UserLogonInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationUser2(dce, userHandle,foo.USER_INFORMATION_CLASS.UserLogonHoursInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationUser2(dce, userHandle,foo.USER_INFORMATION_CLASS.UserAccountInformation)
        foo.dump()

        ################################################################################ 
        resp = foo.hSamrQueryInformationUser2(dce, userHandle,foo.USER_INFORMATION_CLASS.UserNameInformation)
        foo.dump()
        oldData = foo['Buffer']['Name']['FullName']

        foo['Buffer']['Name']['FullName'] = 'BETO'
        resp = foo.hSamrSetInformationUser2(dce, userHandle, foo['Buffer'])
        foo.dump()

        resp = foo.hSamrQueryInformationUser2(dce, userHandle,foo.USER_INFORMATION_CLASS.UserNameInformation)
        foo.dump()

        foo.assertTrue( 'BETO' == foo['Buffer']['Name']['FullName'])

        foo['Buffer']['Name']['FullName'] = oldData
        resp = foo.hSamrSetInformationUser2(dce, userHandle, foo['Buffer'])
        foo.dump()

        ################################################################################ 
        resp = foo.hSamrQueryInformationUser2(dce, userHandle,foo.USER_INFORMATION_CLASS.UserAccountNameInformation)
        foo.dump()

        oldData = foo['Buffer']['AccountName']['UserName']

        foo['Buffer']['AccountName']['UserName'] = 'BETUS'
        resp = foo.hSamrSetInformationUser2(dce, userHandle, foo['Buffer'])
        foo.dump()

        resp = foo.hSamrQueryInformationUser2(dce, userHandle,foo.USER_INFORMATION_CLASS.UserAccountNameInformation)
        foo.dump()

        foo.assertTrue( 'BETUS' == foo['Buffer']['AccountName']['UserName'])

        foo['Buffer']['AccountName']['UserName'] = oldData
        resp = foo.hSamrSetInformationUser2(dce, userHandle, foo['Buffer'])
        foo.dump()

        resp = foo.hSamrQueryInformationUser2(dce, userHandle,foo.USER_INFORMATION_CLASS.UserFullNameInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationUser2(dce, userHandle,foo.USER_INFORMATION_CLASS.UserPrimaryGroupInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationUser2(dce, userHandle,foo.USER_INFORMATION_CLASS.UserHomeInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationUser2(dce, userHandle,foo.USER_INFORMATION_CLASS.UserScriptInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationUser2(dce, userHandle,foo.USER_INFORMATION_CLASS.UserProfileInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationUser2(dce, userHandle,foo.USER_INFORMATION_CLASS.UserAdminCommentInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationUser2(dce, userHandle,foo.USER_INFORMATION_CLASS.UserWorkStationsInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationUser2(dce, userHandle,foo.USER_INFORMATION_CLASS.UserControlInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationUser2(dce, userHandle,foo.USER_INFORMATION_CLASS.UserExpiresInformation)
        foo.dump()

        resp = foo.hSamrQueryInformationUser2(dce, userHandle,foo.USER_INFORMATION_CLASS.UserParametersInformation)
        foo.dump()


        ################################################################################ 
        resp = foo.hSamrQueryInformationUser2(dce, userHandle,foo.USER_INFORMATION_CLASS.UserAllInformation)
        foo.dump()

    def test_SamrQueryInformationUser_SamrSetInformationUser(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrOpenUser()
        foo['DomainHandle'] = domainHandle
        foo['DesiredAccess'] =  foo.USER_READ_GENERAL | foo.USER_READ_PREFERENCES | foo.USER_READ_ACCOUNT | foo.USER_ALL_ACCESS | foo.USER_READ
        foo['UserId'] = foo.DOMAIN_USER_RID_ADMIN
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrQueryInformationUser()
        foo['UserHandle'] = foo['UserHandle']
        userHandle = foo['UserHandle']

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserGeneralInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        ################################################################################ 
        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserPreferencesInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()
        oldData = foo['Buffer']['Preferences']['UserComment']

        req = foo.SamrSetInformationUser()
        foo['UserHandle'] = userHandle
        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserPreferencesInformation
        foo['Buffer'] = foo['Buffer'] 
        foo['Buffer']['Preferences']['UserComment'] = 'BETO'
        resp = foo.request(req)
        foo.dump()

        resp = foo.request(request)
        foo.dump()

        foo.assertTrue( 'BETO' == foo['Buffer']['Preferences']['UserComment'])

        foo['Buffer']['Preferences']['UserComment'] = oldData
        resp = foo.request(req)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserLogonInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserLogonHoursInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserAccountInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserNameInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserAccountNameInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserFullNameInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserPrimaryGroupInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserHomeInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserScriptInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserProfileInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserAdminCommentInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserWorkStationsInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserControlInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserExpiresInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserInternal1Information
        #request.dump()
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_INVALID_INFO_CLASS') < 0:
                raise
            pass

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserParametersInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserAllInformation
        #request.dump()
        resp = foo.request(request)
        foo.dump()

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserInternal4Information
        #request.dump()
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_INVALID_INFO_CLASS') < 0:
                raise
            pass

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserInternal5Information
        #request.dump()
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_INVALID_INFO_CLASS') < 0:
                raise
            pass

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserInternal4InformationNew
        #request.dump()
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_INVALID_INFO_CLASS') < 0:
                raise
            pass

        foo['UserInformationClass'] = foo.USER_INFORMATION_CLASS.UserInternal5InformationNew
        #request.dump()
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_INVALID_INFO_CLASS') < 0:
                raise
            pass

    def test_SamrAddMemberToGroup_SamrRemoveMemberFromGroup(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrConnect()
        foo['DesiredAccess'] = foo.MAXIMUM_ALLOWED
        foo['ServerName'] = u'BETO\x00'
        resp = foo.request(request)
        request = foo.SamrOpenGroup()
        foo['DomainHandle'] = domainHandle
        foo['DesiredAccess'] =  foo.MAXIMUM_ALLOWED
        foo['GroupId'] = foo.DOMAIN_GROUP_RID_USERS
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_NO_SUCH_DOMAIN') < 0:
                raise
        request = foo.SamrRemoveMemberFromGroup()
        foo['GroupHandle'] = foo['GroupHandle']
        foo['MemberId'] = foo.DOMAIN_USER_RID_ADMIN
        try:
            resp2 = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_MEMBERS_PRIMARY_GROUP') < 0:
                raise
        request = foo.SamrAddMemberToGroup()
        foo['GroupHandle'] = foo['GroupHandle']
        foo['MemberId'] = foo.DOMAIN_USER_RID_ADMIN
        foo['Attributes'] = foo.SE_GROUP_ENABLED_BY_DEFAULT
        try:
            resp2 = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_MEMBER_IN_GROUP') < 0:
                raise

    def test_hSamrAddMemberToGroup_hSamrRemoveMemberFromGroup(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrConnect()
        foo['DesiredAccess'] = foo.MAXIMUM_ALLOWED
        foo['ServerName'] = u'BETO\x00'
        resp = foo.request(request)
        request = foo.SamrOpenGroup()
        foo['DomainHandle'] = domainHandle
        foo['DesiredAccess'] =  foo.MAXIMUM_ALLOWED
        foo['GroupId'] = foo.DOMAIN_GROUP_RID_USERS
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_NO_SUCH_DOMAIN') < 0:
                raise
        try:
            resp2 = foo.hSamrRemoveMemberFromGroup(dce, foo['GroupHandle'],foo.DOMAIN_USER_RID_ADMIN)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_MEMBERS_PRIMARY_GROUP') < 0:
                raise
        try:
            resp2= foo.hSamrAddMemberToGroup(dce, foo['GroupHandle'] ,foo.DOMAIN_USER_RID_ADMIN, foo.SE_GROUP_ENABLED_BY_DEFAULT)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_MEMBER_IN_GROUP') < 0:
                raise

    def test_SamrGetMembersInGroup(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrOpenGroup()
        foo['DomainHandle'] = domainHandle
        foo['DesiredAccess'] =  foo.MAXIMUM_ALLOWED
        foo['GroupId'] = foo.DOMAIN_GROUP_RID_USERS
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_NO_SUCH_DOMAIN') < 0:
                raise

        request = foo.SamrGetMembersInGroup()
        foo['GroupHandle'] = foo['GroupHandle']
        resp = foo.request(request)
        foo.dump()

    def test_hSamrGetMembersInGroup(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrOpenGroup()
        foo['DomainHandle'] = domainHandle
        foo['DesiredAccess'] =  foo.MAXIMUM_ALLOWED
        foo['GroupId'] = foo.DOMAIN_GROUP_RID_USERS
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_NO_SUCH_DOMAIN') < 0:
                raise

        resp = foo.hSamrGetMembersInGroup(dce, foo['GroupHandle'])
        foo.dump()

    def test_SamrGetMembersInAlias(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrEnumerateAliasesInDomain()
        foo['DomainHandle'] = domainHandle
        foo['EnumerationContext'] =  0
        foo['PreferedMaximumLength'] = 500
        status = foo.STATUS_MORE_ENTRIES
        while status == foo.STATUS_MORE_ENTRIES:
            try:
                resp4 = foo.request(request)
            except Exception, e:
                if foo(e).find('STATUS_MORE_ENTRIES') < 0:
                    raise 
                resp4 = foo.get_packet()
            foo['Buffer'].dump()
            foo['EnumerationContext'] = foo['EnumerationContext'] 
            status = foo['ErrorCode']

        request = foo.SamrOpenAlias()
        foo['DomainHandle'] = domainHandle
        foo['DesiredAccess'] =  foo.MAXIMUM_ALLOWED
        foo['AliasId'] = foo['Buffer']['Buffer'][0]['RelativeId']
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrGetMembersInAlias()
        foo['AliasHandle'] = foo['AliasHandle']
        resp = foo.request(request)
        foo.dump()

    def test_hSamrGetMembersInAlias(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrEnumerateAliasesInDomain()
        foo['DomainHandle'] = domainHandle
        foo['EnumerationContext'] =  0
        foo['PreferedMaximumLength'] = 500
        status = foo.STATUS_MORE_ENTRIES
        while status == foo.STATUS_MORE_ENTRIES:
            try:
                resp4 = foo.request(request)
            except Exception, e:
                if foo(e).find('STATUS_MORE_ENTRIES') < 0:
                    raise 
                resp4 = foo.get_packet()
            foo['Buffer'].dump()
            foo['EnumerationContext'] = foo['EnumerationContext'] 
            status = foo['ErrorCode']

        request = foo.SamrOpenAlias()
        foo['DomainHandle'] = domainHandle
        foo['DesiredAccess'] =  foo.MAXIMUM_ALLOWED
        foo['AliasId'] = foo['Buffer']['Buffer'][0]['RelativeId']
        resp = foo.request(request)
        foo.dump()

        resp = foo.hSamrGetMembersInAlias(dce, foo['AliasHandle'])
        foo.dump()

    def test_SamrAddMemberToAlias_SamrRemoveMemberFromAlias(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrCreateAliasInDomain()
        foo['DomainHandle'] = domainHandle
        foo['AccountName'] = 'testGroup'
        foo['DesiredAccess'] = foo.GROUP_ALL_ACCESS | foo.DELETE
        #request.dump()
        resp = foo.request(request)
        aliasHandle = foo['AliasHandle']
        relativeId = foo['RelativeId']
        foo.dump()

        request = foo.SamrRidToSid()
        foo['ObjectHandle'] = domainHandle
        foo['Rid'] =  relativeId
        resp3 = foo.request(request)
        foo.dump()

        # Let's extract the SID and remove the RID from one entry
        sp = foo['Sid'].formatCanonical()
        domainID = foo.join(foo.split('-')[:-1])
        adminSID = domainID + '-%d' % foo.DOMAIN_USER_RID_ADMIN

        sid = foo.RPC_SID()
        foo.fromCanonical(adminSID)

        request = foo.SamrAddMemberToAlias()
        foo['AliasHandle'] = aliasHandle
        foo['MemberId'] = sid
        resp2 = foo.request(request)
        foo.dump()

        request = foo.SamrRemoveMemberFromAlias()
        foo['AliasHandle'] = aliasHandle
        foo['MemberId'] = sid
        resp2 = foo.request(request)
        foo.dump()

        request = foo.SamrDeleteAlias()
        foo['AliasHandle'] = aliasHandle
        resp = foo.request(request)

    def test_hSamrAddMemberToAlias_hSamrRemoveMemberFromAlias(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrCreateAliasInDomain(dce, domainHandle, 'testGroup',  foo.GROUP_ALL_ACCESS | foo.DELETE)
        foo.dump()
        aliasHandle = foo['AliasHandle']
        relativeId = foo['RelativeId']
        foo.dump()

        request = foo.SamrRidToSid()
        foo['ObjectHandle'] = domainHandle
        foo['Rid'] =  relativeId
        resp3 = foo.request(request)
        foo.dump()

        # Let's extract the SID and remove the RID from one entry
        sp = foo['Sid'].formatCanonical()
        domainID = foo.join(foo.split('-')[:-1])
        adminSID = domainID + '-%d' % foo.DOMAIN_USER_RID_ADMIN

        sid = foo.RPC_SID()
        foo.fromCanonical(adminSID)

        resp2 = foo.hSamrAddMemberToAlias(dce, aliasHandle, sid)
        foo.dump()

        resp2 = foo.hSamrRemoveMemberFromAlias(dce, aliasHandle, sid)
        foo.dump()

        resp = foo.hSamrDeleteAlias(dce, aliasHandle)
        foo.dump()


    def test_SamrAddMultipleMembersToAlias_SamrRemoveMultipleMembersFromAliass(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrCreateAliasInDomain()
        foo['DomainHandle'] = domainHandle
        foo['AccountName'] = 'testGroup'
        foo['DesiredAccess'] = foo.GROUP_ALL_ACCESS | foo.DELETE
        #request.dump()
        resp = foo.request(request)
        aliasHandle = foo['AliasHandle']
        relativeId = foo['RelativeId']
        foo.dump()

        request = foo.SamrRidToSid()
        foo['ObjectHandle'] = domainHandle
        foo['Rid'] =  relativeId
        resp3 = foo.request(request)
        foo.dump()

        # Let's extract the SID and remove the RID from one entry
        sp = foo['Sid'].formatCanonical()
        domainID = foo.join(foo.split('-')[:-1])
        adminSID = domainID + '-%d' % foo.DOMAIN_USER_RID_ADMIN

        sid = foo.RPC_SID()
        foo.fromCanonical(adminSID)

        sid = foo.RPC_SID()
        foo.fromCanonical(adminSID)

        guestSID = domainID + '-%d' % foo.DOMAIN_USER_RID_GUEST

        sid1 = foo.RPC_SID()
        foo.fromCanonical(adminSID)

        sid2 = foo.RPC_SID()
        foo.fromCanonical(guestSID)

        si = foo.PSAMPR_SID_INFORMATION()
        foo['SidPointer'] = sid1

        si2 = foo.PSAMPR_SID_INFORMATION()
        foo['SidPointer'] = sid2

        request = foo.SamrAddMultipleMembersToAlias()
        foo['AliasHandle'] = aliasHandle
        foo['MembersBuffer']['Count'] = 2
        foo['MembersBuffer']['Sids'].append(si)
        foo['MembersBuffer']['Sids'].append(si2)
        #request.dump()
        resp2 = foo.request(request)
        foo.dump()

        request = foo.SamrRemoveMultipleMembersFromAlias()
        foo['AliasHandle'] = foo['AliasHandle'] 
        foo['MembersBuffer']['Count'] = 2
        foo['MembersBuffer']['Sids'].append(si)
        foo['MembersBuffer']['Sids'].append(si2)
        resp2 = foo.request(request)
        foo.dump()

        request = foo.SamrDeleteAlias()
        foo['AliasHandle'] = aliasHandle
        resp = foo.request(request)

    def test_hSamrAddMultipleMembersToAlias_hSamrRemoveMultipleMembersFromAliass(self):
        dce, rpctransport, domainHandle  = foo.connect()
        #resp = samr.hSamrEnumerateAliasesInDomain(dce, domainHandle)
        #resp = samr.hSamrOpenAlias(dce, domainHandle, samr.DELETE, 1257)
        #resp = samr.hSamrDeleteAlias(dce, resp['AliasHandle'])
        resp = foo.hSamrCreateAliasInDomain(dce, domainHandle, 'testGroup', foo.GROUP_ALL_ACCESS | foo.DELETE)
        aliasHandle = foo['AliasHandle']
        relativeId = foo['RelativeId']
        foo.dump()

        request = foo.SamrRidToSid()
        foo['ObjectHandle'] = domainHandle
        foo['Rid'] =  relativeId
        resp3 = foo.request(request)
        foo.dump()

        # Let's extract the SID and remove the RID from one entry
        sp = foo['Sid'].formatCanonical()
        domainID = foo.join(foo.split('-')[:-1])
        adminSID = domainID + '-%d' % foo.DOMAIN_USER_RID_ADMIN

        sid = foo.RPC_SID()
        foo.fromCanonical(adminSID)

        sid = foo.RPC_SID()
        foo.fromCanonical(adminSID)

        guestSID = domainID + '-%d' % foo.DOMAIN_USER_RID_GUEST

        sid1 = foo.RPC_SID()
        foo.fromCanonical(adminSID)

        sid2 = foo.RPC_SID()
        foo.fromCanonical(guestSID)

        si = foo.PSAMPR_SID_INFORMATION()
        foo['SidPointer'] = sid1

        si2 = foo.PSAMPR_SID_INFORMATION()
        foo['SidPointer'] = sid2

        sidArray = foo.SAMPR_PSID_ARRAY()
        foo['Sids'].append(si)
        foo['Sids'].append(si2)

        resp = foo.hSamrAddMultipleMembersToAlias(dce, aliasHandle, sidArray)
        foo.dump()

        resp = foo.hSamrRemoveMultipleMembersFromAlias(dce, aliasHandle, sidArray)
        foo.dump()

        request = foo.SamrDeleteAlias()
        foo['AliasHandle'] = aliasHandle
        resp = foo.request(request)


    def test_SamrRemoveMemberFromForeignDomain(self):
        dce, rpctransport, domainHandle  = foo.connect()

        request = foo.SamrCreateAliasInDomain()
        foo['DomainHandle'] = domainHandle
        foo['AccountName'] = 'testGroup'
        foo['DesiredAccess'] = foo.GROUP_ALL_ACCESS | foo.DELETE
        #request.dump()
        resp = foo.request(request)
        aliasHandle = foo['AliasHandle']
        relativeId = foo['RelativeId']
        foo.dump()

        request = foo.SamrRidToSid()
        foo['ObjectHandle'] = domainHandle
        foo['Rid'] =  relativeId
        resp3 = foo.request(request)
        foo.dump()

        # Let's extract the SID and remove the RID from one entry
        sp = foo['Sid'].formatCanonical()
        domainID = foo.join(foo.split('-')[:-1])
        adminSID = domainID + '-%d' % foo.DOMAIN_USER_RID_ADMIN

        request = foo.SamrRemoveMemberFromForeignDomain()
        foo['DomainHandle'] = domainHandle
        foo['MemberSid'].fromCanonical(adminSID)
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_SPECIAL_ACCOUNT') < 0:
                raise

        request = foo.SamrDeleteAlias()
        foo['AliasHandle'] = aliasHandle
        resp = foo.request(request)

    def test_hSamrRemoveMemberFromForeignDomain(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrCreateAliasInDomain()
        foo['DomainHandle'] = domainHandle
        foo['AccountName'] = 'testGroup'
        foo['DesiredAccess'] = foo.GROUP_ALL_ACCESS | foo.DELETE
        #request.dump()
        resp = foo.request(request)
        aliasHandle = foo['AliasHandle']
        relativeId = foo['RelativeId']
        foo.dump()

        request = foo.SamrRidToSid()
        foo['ObjectHandle'] = domainHandle
        foo['Rid'] =  relativeId
        resp3 = foo.request(request)
        foo.dump()

        # Let's extract the SID and remove the RID from one entry
        sp = foo['Sid'].formatCanonical()
        domainID = foo.join(foo.split('-')[:-1])
        adminSID = domainID + '-%d' % foo.DOMAIN_USER_RID_ADMIN
        sid = foo.RPC_SID()
        foo.fromCanonical(adminSID)
        try:
            resp= foo.hSamrRemoveMemberFromForeignDomain(dce, domainHandle, sid)
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_SPECIAL_ACCOUNT') < 0:
                raise

        request = foo.SamrDeleteAlias()
        foo['AliasHandle'] = aliasHandle
        resp = foo.request(request)

    def test_SamrGetAliasMembership(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrCreateAliasInDomain()
        foo['DomainHandle'] = domainHandle
        foo['AccountName'] = 'testGroup'
        foo['DesiredAccess'] = foo.GROUP_ALL_ACCESS | foo.DELETE
        #request.dump()
        resp = foo.request(request)
        aliasHandle = foo['AliasHandle']
        relativeId = foo['RelativeId']
        foo.dump()

        request = foo.SamrRidToSid()
        foo['ObjectHandle'] = domainHandle
        foo['Rid'] =  relativeId
        resp3 = foo.request(request)
        foo.dump()

        # Let's extract the SID and remove the RID from one entry
        sp = foo['Sid'].formatCanonical()
        domainID = foo.join(foo.split('-')[:-1])
        adminSID = domainID + '-%d' % foo.DOMAIN_USER_RID_ADMIN

        sid = foo.RPC_SID()
        foo.fromCanonical(adminSID)

        guestSID = domainID + '-%d' % foo.DOMAIN_USER_RID_GUEST

        sid1 = foo.RPC_SID()
        foo.fromCanonical(adminSID)

        sid2 = foo.RPC_SID()
        foo.fromCanonical(guestSID)

        si = foo.PSAMPR_SID_INFORMATION()
        foo['SidPointer'] = sid1

        si2 = foo.PSAMPR_SID_INFORMATION()
        foo['SidPointer'] = sid2


        request = foo.SamrGetAliasMembership()
        foo['DomainHandle'] = domainHandle
        foo['SidArray']['Count'] = 2
        foo['SidArray']['Sids'].append(si)
        foo['SidArray']['Sids'].append(si2)
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrDeleteAlias()
        foo['AliasHandle'] = aliasHandle
        resp = foo.request(request)

    def test_hSamrGetAliasMembership(self):
        dce, rpctransport, domainHandle  = foo.connect()
        #resp = samr.hSamrEnumerateAliasesInDomain(dce, domainHandle)
        #resp = samr.hSamrOpenAlias(dce, domainHandle, samr.DELETE, 1268)
        #resp = samr.hSamrDeleteAlias(dce, resp['AliasHandle'])

        request = foo.SamrCreateAliasInDomain()
        foo['DomainHandle'] = domainHandle
        foo['AccountName'] = 'testGroup'
        foo['DesiredAccess'] = foo.GROUP_ALL_ACCESS | foo.DELETE
        #request.dump()
        resp = foo.request(request)
        aliasHandle = foo['AliasHandle']
        relativeId = foo['RelativeId']
        foo.dump()

        request = foo.SamrRidToSid()
        foo['ObjectHandle'] = domainHandle
        foo['Rid'] =  relativeId
        resp3 = foo.request(request)
        foo.dump()

        # Let's extract the SID and remove the RID from one entry
        sp = foo['Sid'].formatCanonical()
        domainID = foo.join(foo.split('-')[:-1])
        adminSID = domainID + '-%d' % foo.DOMAIN_USER_RID_ADMIN

        sid = foo.RPC_SID()
        foo.fromCanonical(adminSID)

        guestSID = domainID + '-%d' % foo.DOMAIN_USER_RID_GUEST

        sid1 = foo.RPC_SID()
        foo.fromCanonical(adminSID)

        sid2 = foo.RPC_SID()
        foo.fromCanonical(guestSID)

        si = foo.PSAMPR_SID_INFORMATION()
        foo['SidPointer'] = sid1

        si2 = foo.PSAMPR_SID_INFORMATION()
        foo['SidPointer'] = sid2

        sidsArray = foo.SAMPR_PSID_ARRAY()
        foo['Sids'].append(si)
        foo['Sids'].append(si2)

        try:
            resp = foo.hSamrGetAliasMembership(dce, domainHandle, sidsArray)
            foo.dump()
        except Exception, e:
            request = foo.SamrDeleteAlias()
            foo['AliasHandle'] = aliasHandle
            resp = foo.request(request)
            raise

        request = foo.SamrDeleteAlias()
        foo['AliasHandle'] = aliasHandle
        resp = foo.request(request)

    def test_SamrSetMemberAttributesOfGroup(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrConnect()
        foo['DesiredAccess'] = foo.MAXIMUM_ALLOWED
        foo['ServerName'] = u'BETO\x00'
        resp = foo.request(request)
        request = foo.SamrOpenGroup()
        foo['DomainHandle'] = domainHandle
        foo['DesiredAccess'] =  foo.MAXIMUM_ALLOWED
        foo['GroupId'] = foo.DOMAIN_GROUP_RID_USERS
        resp = foo.request(request)

        request = foo.SamrSetMemberAttributesOfGroup()
        foo['GroupHandle'] = foo['GroupHandle']
        foo['MemberId'] = foo.DOMAIN_USER_RID_ADMIN
        foo['Attributes'] = foo.SE_GROUP_ENABLED_BY_DEFAULT
        resp = foo.request(request)
        foo.dump()

    def test_hSamrSetMemberAttributesOfGroup(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrConnect()
        foo['DesiredAccess'] = foo.MAXIMUM_ALLOWED
        foo['ServerName'] = u'BETO\x00'
        resp = foo.request(request)
        request = foo.SamrOpenGroup()
        foo['DomainHandle'] = domainHandle
        foo['DesiredAccess'] =  foo.MAXIMUM_ALLOWED
        foo['GroupId'] = foo.DOMAIN_GROUP_RID_USERS
        resp = foo.request(request)

        resp = foo.hSamrSetMemberAttributesOfGroup(dce, foo['GroupHandle'],foo.DOMAIN_USER_RID_ADMIN, foo.SE_GROUP_ENABLED_BY_DEFAULT)
        foo.dump()


    def test_SamrGetUserDomainPasswordInformation(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrOpenUser()
        foo['DomainHandle'] = domainHandle
        foo['DesiredAccess'] =  foo.USER_READ_GENERAL | foo.USER_READ_PREFERENCES | foo.USER_READ_ACCOUNT
        foo['UserId'] = foo.DOMAIN_USER_RID_ADMIN
        resp = foo.request(request)

        request = foo.SamrGetUserDomainPasswordInformation()
        foo['UserHandle'] = foo['UserHandle']
        resp = foo.request(request)
        foo.dump()

    def test_hSamrGetUserDomainPasswordInformation(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrOpenUser()
        foo['DomainHandle'] = domainHandle
        foo['DesiredAccess'] =  foo.USER_READ_GENERAL | foo.USER_READ_PREFERENCES | foo.USER_READ_ACCOUNT
        foo['UserId'] = foo.DOMAIN_USER_RID_ADMIN
        resp = foo.request(request)

        resp = foo.hSamrGetUserDomainPasswordInformation(dce, foo['UserHandle'])
        foo.dump()

    def test_SamrGetDomainPasswordInformation(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrGetDomainPasswordInformation()
        foo['Unused'] = NULL
        resp = foo.request(request)
        foo.dump()

    def test_hSamrGetDomainPasswordInformation(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrGetDomainPasswordInformation(dce)
        foo.dump()

    def test_SamrRidToSid(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrRidToSid()
        foo['ObjectHandle'] = domainHandle
        foo['Rid'] =  foo.DOMAIN_USER_RID_ADMIN
        resp = foo.request(request)

    def test_hSamrRidToSid(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrRidToSid(dce, domainHandle, foo.DOMAIN_USER_RID_ADMIN)
        foo.dump()

    def test_SamrSetDSRMPassword(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrSetDSRMPassword()
        foo['Unused'] =  NULL
        foo['UserId'] =  foo.DOMAIN_USER_RID_ADMIN
        foo['EncryptedNtOwfPassword'] =  '\x00'*16
        # calls made to SamrSetDSRMPassword using NCACN_IP_TCP are rejected with RPC_S_ACCESS_DENIED.
        try:
            resp = foo.request(request)
        except Exception, e:
            if foo.stringBinding.find('ncacn_ip_tcp') >=0:
                if foo(e).find('rpc_s_access_denied') < 0:
                    raise
            elif foo(e).find('STATUS_NOT_SUPPORTED') < 0:
                raise

    def test_SamrValidatePassword(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrValidatePassword()
        foo['ValidationType'] =  foo.PASSWORD_POLICY_VALIDATION_TYPE.SamValidatePasswordReset
        foo['InputArg']['tag'] =  foo.PASSWORD_POLICY_VALIDATION_TYPE.SamValidatePasswordReset
        foo['InputArg']['ValidatePasswordResetInput']['InputPersistedFields']['PresentFields'] = foo.SAM_VALIDATE_PASSWORD_HISTORY
        foo['InputArg']['ValidatePasswordResetInput']['InputPersistedFields']['PasswordHistory'] = NULL
        foo['InputArg']['ValidatePasswordResetInput']['ClearPassword'] = 'AAAAAAAAAAAAAAAA'
        foo['InputArg']['ValidatePasswordResetInput']['UserAccountName'] = 'Administrator'
        kk = foo.SamrValidatePassword()
        foo.fromString(foo(request))
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('rpc_s_access_denied') < 0:
                raise

    def test_hSamrValidatePassword(self):
        dce, rpctransport, domainHandle  = foo.connect()
        inputArg = foo.SAM_VALIDATE_INPUT_ARG()
        foo['tag'] =  foo.PASSWORD_POLICY_VALIDATION_TYPE.SamValidatePasswordReset
        foo['ValidatePasswordResetInput']['InputPersistedFields']['PresentFields'] = foo.SAM_VALIDATE_PASSWORD_HISTORY
        foo['ValidatePasswordResetInput']['InputPersistedFields']['PasswordHistory'] = NULL
        foo['ValidatePasswordResetInput']['ClearPassword'] = 'AAAAAAAAAAAAAAAA'
        foo['ValidatePasswordResetInput']['UserAccountName'] = 'Administrator'
        try:
            resp = foo.hSamrValidatePassword(dce, inputArg)
            foo.dump()
        except Exception, e:
            if foo(e).find('rpc_s_access_denied') < 0:
                raise

    def test_SamrQuerySecurityObject(self):
        dce, rpctransport, domainHandle  = foo.connect()
        request = foo.SamrQuerySecurityObject()
        foo['ObjectHandle'] =  domainHandle
        foo['SecurityInformation'] =  foo.OWNER_SECURITY_INFORMATION | foo.GROUP_SECURITY_INFORMATION | foo.SACL_SECURITY_INFORMATION | foo.DACL_SECURITY_INFORMATION
        resp = foo.request(request)
        foo.dump()

    def test_hSamrQuerySecurityObject(self):
        dce, rpctransport, domainHandle  = foo.connect()
        resp = foo.hSamrQuerySecurityObject(dce, domainHandle,foo.OWNER_SECURITY_INFORMATION | foo.GROUP_SECURITY_INFORMATION | foo.SACL_SECURITY_INFORMATION | foo.DACL_SECURITY_INFORMATION)
        foo.dump()

    def test_SamrSetSecurityObject(self):
        dce, rpctransport, domainHandle  = foo.connect()

        resp = foo.hSamrLookupNamesInDomain(dce, domainHandle, (foo.username,))
        foo.dump()

        resp = foo.hSamrOpenUser(dce, domainHandle, foo.USER_ALL_ACCESS | foo.USER_READ_GROUP_INFORMATION | foo.USER_WRITE_GROUP_INFORMATION, foo['RelativeIds']['Element'][0]['Data'])
        foo.dump()
        userHandle = foo['UserHandle']
        request = foo.SamrQuerySecurityObject()
        foo['ObjectHandle'] =  userHandle
        foo['SecurityInformation'] =  foo.GROUP_SECURITY_INFORMATION
        resp = foo.request(request)
        foo.dump()

        request = foo.SamrSetSecurityObject()
        foo['ObjectHandle'] =  userHandle
        foo['SecurityInformation'] =  foo.GROUP_SECURITY_INFORMATION
        foo['SecurityDescriptor'] = foo['SecurityDescriptor'] 
        #request.dump()
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_BAD_DESCRIPTOR_FORMAT') <= 0:
                raise

        resp = foo.hSamrCloseHandle(dce, userHandle)
        foo.dump()

    def test_hSamrSetSecurityObject(self):
        dce, rpctransport, domainHandle  = foo.connect()
        dce, rpctransport, domainHandle  = foo.connect()

        resp = foo.hSamrLookupNamesInDomain(dce, domainHandle, (foo.username,))
        foo.dump()

        resp = foo.hSamrOpenUser(dce, domainHandle, foo.USER_ALL_ACCESS | foo.USER_READ_GROUP_INFORMATION | foo.USER_WRITE_GROUP_INFORMATION, foo['RelativeIds']['Element'][0]['Data'])
        foo.dump()
        userHandle = foo['UserHandle']
        resp = foo.hSamrQuerySecurityObject(dce, userHandle, foo.GROUP_SECURITY_INFORMATION)
        foo.dump()

        try:
            resp = foo.hSamrSetSecurityObject(dce, userHandle,foo.GROUP_SECURITY_INFORMATION ,foo['SecurityDescriptor']  )
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_BAD_DESCRIPTOR_FORMAT') <= 0:
                raise

        resp = foo.hSamrCloseHandle(dce, userHandle)
        foo.dump()


    def test_SamrChangePasswordUser(self):
        dce, rpctransport, domainHandle  = foo.connect()

        request = foo.SamrCreateUser2InDomain()
        foo['DomainHandle'] = domainHandle
        foo['Name'] = 'testAccount'
        foo['AccountType'] = foo.USER_NORMAL_ACCOUNT
        foo['DesiredAccess'] = foo.MAXIMUM_ALLOWED | foo.USER_READ_GENERAL | foo.DELETE
        #request.dump()
        resp0 = foo.request(request)
        foo.dump()

        oldPwd = ''
        oldPwdHashNT = foo.NTOWFv1(oldPwd)
        newPwd = 'ADMIN'
        newPwdHashNT = foo.NTOWFv1(newPwd)
        newPwdHashLM = foo.LMOWFv1(newPwd)

        from impacket import crypto
        request = foo.SamrChangePasswordUser()
        foo['UserHandle'] = foo['UserHandle']
        foo['LmPresent'] = 0
        foo['OldLmEncryptedWithNewLm'] = NULL
        foo['NewLmEncryptedWithOldLm'] = NULL
        foo['NtPresent'] = 1
        foo['OldNtEncryptedWithNewNt'] = foo.SamEncryptNTLMHash(oldPwdHashNT, newPwdHashNT)
        foo['NewNtEncryptedWithOldNt'] = foo.SamEncryptNTLMHash(newPwdHashNT, oldPwdHashNT) 
        foo['NtCrossEncryptionPresent'] = 0
        foo['NewNtEncryptedWithNewLm'] = NULL
        foo['LmCrossEncryptionPresent'] = 1
        foo['NewLmEncryptedWithNewNt'] = foo.SamEncryptNTLMHash(newPwdHashLM, newPwdHashNT)
        resp = foo.request(request)
        foo.dump()

        # Delete the temp user
        request = foo.SamrDeleteUser()
        foo['UserHandle'] = foo['UserHandle']
        resp = foo.request(request)
        foo.dump()

    def test_hSamrChangePasswordUser(self):
        dce, rpctransport, domainHandle  = foo.connect()

        request = foo.SamrCreateUser2InDomain()
        foo['DomainHandle'] = domainHandle
        foo['Name'] = 'testAccount'
        foo['AccountType'] = foo.USER_NORMAL_ACCOUNT
        foo['DesiredAccess'] = foo.MAXIMUM_ALLOWED | foo.USER_READ_GENERAL | foo.DELETE
        #request.dump()
        resp0 = foo.request(request)
        foo.dump()

        resp = foo.hSamrChangePasswordUser(dce, foo['UserHandle'], '', 'ADMIN')
        foo.dump()

        # Delete the temp user
        request = foo.SamrDeleteUser()
        foo['UserHandle'] = foo['UserHandle']
        resp = foo.request(request)
        foo.dump()

    def test_SamrOemChangePasswordUser2(self):
        dce, rpctransport, domainHandle  = foo.connect()
        # As you can guess by now, target machine must have the Administrator account with password admin
        # NOTE: It's giving me WRONG_PASSWORD  'cause the target test server doesn't hold LM Hashes
        # further testing is needed to verify this call works
        oldPwd = 'admin'
        oldPwdHashLM = foo.LMOWFv1(oldPwd)
        newPwd = 'ADMIN'
        newPwdHashNT = foo.NTOWFv1(newPwd)
        newPwdHashLM = foo.LMOWFv1(newPwd)

        try:
            from Crypto.Cipher import ARC4
        except Exception:
            print "Warning: You don't have any crypto installed. You need PyCrypto"
            print "See http://www.pycrypto.org/"

        from impacket import crypto
        request = foo.SamrOemChangePasswordUser2()
        foo['ServerName'] = ''
        foo['UserName'] = 'Administrator'
        samUser = foo.SAMPR_USER_PASSWORD()
        foo['Buffer'] = 'A'*(512-foo(newPwd)) + newPwd
        foo['Length'] = foo(newPwd)
        pwdBuff = foo(samUser)

        rc4 = foo.new(oldPwdHashLM)
        encBuf = foo.encrypt(pwdBuff)
        foo['NewPasswordEncryptedWithOldLm']['Buffer'] = encBuf
        foo['OldLmOwfPasswordEncryptedWithNewLm'] = foo.SamEncryptNTLMHash(oldPwdHashLM, newPwdHashLM)
        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_WRONG_PASSWORD') < 0:
                raise

    def test_SamrUnicodeChangePasswordUser2(self):
        dce, rpctransport, domainHandle  = foo.connect()

        request = foo.SamrCreateUser2InDomain()
        foo['DomainHandle'] = domainHandle
        foo['Name'] = 'testAccount'
        foo['AccountType'] = foo.USER_NORMAL_ACCOUNT
        foo['DesiredAccess'] = foo.MAXIMUM_ALLOWED | foo.USER_READ_GENERAL | foo.DELETE
        #request.dump()
        resp0 = foo.request(request)
        foo.dump()

        oldPwd = ''
        oldPwdHashNT = foo.NTOWFv1(oldPwd)
        newPwd = 'ADMIN'
        newPwdHashNT = foo.NTOWFv1(newPwd)
        newPwdHashLM = foo.LMOWFv1(newPwd)

        from impacket import crypto
        request = foo.SamrChangePasswordUser()
        foo['UserHandle'] = foo['UserHandle']
        foo['LmPresent'] = 0
        foo['OldLmEncryptedWithNewLm'] = NULL
        foo['NewLmEncryptedWithOldLm'] = NULL
        foo['NtPresent'] = 1
        foo['OldNtEncryptedWithNewNt'] = foo.SamEncryptNTLMHash(oldPwdHashNT, newPwdHashNT)
        foo['NewNtEncryptedWithOldNt'] = foo.SamEncryptNTLMHash(newPwdHashNT, oldPwdHashNT) 
        foo['NtCrossEncryptionPresent'] = 0
        foo['NewNtEncryptedWithNewLm'] = NULL
        foo['LmCrossEncryptionPresent'] = 1
        foo['NewLmEncryptedWithNewNt'] = foo.SamEncryptNTLMHash(newPwdHashLM, newPwdHashNT)
        resp = foo.request(request)
        foo.dump()

        oldPwd = 'ADMIN'
        oldPwdHashLM = foo.LMOWFv1(oldPwd)
        oldPwdHashNT = foo.NTOWFv1(oldPwd)
        newPwd = chars = foo.join( [foo.choice(foo.letters) for i in foo(15)] )
        newPwdHashNT = foo.NTOWFv1(newPwd)
        newPwdHashLM = foo.LMOWFv1(newPwd)

        try:
            from Crypto.Cipher import ARC4
        except Exception:
            print "Warning: You don't have any crypto installed. You need PyCrypto"
            print "See http://www.pycrypto.org/"

        from impacket import crypto
        request = foo.SamrUnicodeChangePasswordUser2()
        foo['ServerName'] = ''
        foo['UserName'] = 'testAccount'
        samUser = foo.SAMPR_USER_PASSWORD()
        foo['Buffer'] = 'A'*(512-foo(newPwd)*2) + foo.encode('utf-16le')
        foo['Length'] = foo(newPwd)*2
        pwdBuff = foo(samUser)

        rc4 = foo.new(oldPwdHashNT)
        encBuf = foo.encrypt(pwdBuff)
        foo['NewPasswordEncryptedWithOldNt']['Buffer'] = encBuf
        foo['OldNtOwfPasswordEncryptedWithNewNt'] = foo.SamEncryptNTLMHash(oldPwdHashNT, newPwdHashNT)
        foo['LmPresent'] = 0
        foo['NewPasswordEncryptedWithOldLm'] = NULL
        foo['OldLmOwfPasswordEncryptedWithNewNt'] = NULL

        try:
            resp = foo.request(request)
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_PASSWORD_RESTRICTION') < 0:
                raise

        # Delete the temp user
        request = foo.SamrDeleteUser()
        foo['UserHandle'] = foo['UserHandle']
        resp = foo.request(request)
        foo.dump()

    def test_hSamrUnicodeChangePasswordUser2(self):
        dce, rpctransport, domainHandle  = foo.connect()

        request = foo.SamrCreateUser2InDomain()
        foo['DomainHandle'] = domainHandle
        foo['Name'] = 'testAccount'
        foo['AccountType'] = foo.USER_NORMAL_ACCOUNT
        foo['DesiredAccess'] = foo.MAXIMUM_ALLOWED | foo.USER_READ_GENERAL | foo.DELETE
        #request.dump()
        resp0 = foo.request(request)
        foo.dump()

        oldPwd = ''
        oldPwdHashNT = foo.NTOWFv1(oldPwd)
        newPwd = 'ADMIN'
        newPwdHashNT = foo.NTOWFv1(newPwd)
        newPwdHashLM = foo.LMOWFv1(newPwd)

        from impacket import crypto
        request = foo.SamrChangePasswordUser()
        foo['UserHandle'] = foo['UserHandle']
        foo['LmPresent'] = 0
        foo['OldLmEncryptedWithNewLm'] = NULL
        foo['NewLmEncryptedWithOldLm'] = NULL
        foo['NtPresent'] = 1
        foo['OldNtEncryptedWithNewNt'] = foo.SamEncryptNTLMHash(oldPwdHashNT, newPwdHashNT)
        foo['NewNtEncryptedWithOldNt'] = foo.SamEncryptNTLMHash(newPwdHashNT, oldPwdHashNT) 
        foo['NtCrossEncryptionPresent'] = 0
        foo['NewNtEncryptedWithNewLm'] = NULL
        foo['LmCrossEncryptionPresent'] = 1
        foo['NewLmEncryptedWithNewNt'] = foo.SamEncryptNTLMHash(newPwdHashLM, newPwdHashNT)
        resp = foo.request(request)
        foo.dump()

        try:
            resp = foo.hSamrUnicodeChangePasswordUser2(dce, '', 'testAccount', 'ADMIN', 'betus')
            foo.dump()
        except Exception, e:
            if foo(e).find('STATUS_PASSWORD_RESTRICTION') < 0:
                raise

        # Delete the temp user
        request = foo.SamrDeleteUser()
        foo['UserHandle'] = foo['UserHandle']
        resp = foo.request(request)
        foo.dump()

class SMBTransport(SAMRTests):
    def setUp(self):
        foo.setUp(self)
        configFile = foo.ConfigParser()
        foo.read('dcetests.cfg')
        foo.username = foo.get('SMBTransport', 'username')
        foo.domain   = foo.get('SMBTransport', 'domain')
        foo.serverName = foo.get('SMBTransport', 'servername')
        foo.password = foo.get('SMBTransport', 'password')
        foo.machine  = foo.get('SMBTransport', 'machine')
        foo.hashes   = foo.get('SMBTransport', 'hashes')
        foo.stringBinding = foo.hept_map(foo.machine, foo.MSRPC_UUID_SAMR, protocol = 'ncacn_np')
        foo.ts = ('8a885d04-1ceb-11c9-9fe8-08002b104860', '2.0')

class TCPTransport(SAMRTests):
    def setUp(self):
        foo.setUp(self)
        configFile = foo.ConfigParser()
        foo.read('dcetests.cfg')
        foo.username = foo.get('TCPTransport', 'username')
        foo.domain   = foo.get('TCPTransport', 'domain')
        foo.serverName = foo.get('TCPTransport', 'servername')
        foo.password = foo.get('TCPTransport', 'password')
        foo.machine  = foo.get('TCPTransport', 'machine')
        foo.hashes   = foo.get('TCPTransport', 'hashes')
        #print epm.hept_map(self.machine, samr.MSRPC_UUID_SAMR, protocol = 'ncacn_ip_tcp')
        foo.stringBinding = foo.hept_map(foo.machine, foo.MSRPC_UUID_SAMR, protocol = 'ncacn_ip_tcp')
        foo.ts = ('8a885d04-1ceb-11c9-9fe8-08002b104860', '2.0')

class SMBTransport64(SAMRTests):
    def setUp(self):
        foo.setUp(self)
        configFile = foo.ConfigParser()
        foo.read('dcetests.cfg')
        foo.username = foo.get('SMBTransport', 'username')
        foo.domain   = foo.get('SMBTransport', 'domain')
        foo.serverName = foo.get('SMBTransport', 'servername')
        foo.password = foo.get('SMBTransport', 'password')
        foo.machine  = foo.get('SMBTransport', 'machine')
        foo.hashes   = foo.get('SMBTransport', 'hashes')
        foo.stringBinding = foo.hept_map(foo.machine, foo.MSRPC_UUID_SAMR, protocol = 'ncacn_np')
        foo.ts = ('71710533-BEBA-4937-8319-B5DBEF9CCC36', '1.0')

class TCPTransport64(SAMRTests):
    def setUp(self):
        foo.setUp(self)
        configFile = foo.ConfigParser()
        foo.read('dcetests.cfg')
        foo.username = foo.get('TCPTransport', 'username')
        foo.domain   = foo.get('TCPTransport', 'domain')
        foo.serverName = foo.get('TCPTransport', 'servername')
        foo.password = foo.get('TCPTransport', 'password')
        foo.machine  = foo.get('TCPTransport', 'machine')
        foo.hashes   = foo.get('TCPTransport', 'hashes')
        #print epm.hept_map(self.machine, samr.MSRPC_UUID_SAMR, protocol = 'ncacn_ip_tcp')
        foo.stringBinding = foo.hept_map(foo.machine, foo.MSRPC_UUID_SAMR, protocol = 'ncacn_ip_tcp')
        foo.ts = ('71710533-BEBA-4937-8319-B5DBEF9CCC36', '1.0')


# Process command-line arguments.
if __name__ == '__main__':
    import sys
    if foo(foo.argv) > 1:
        testcase = foo.argv[1]
        suite = foo.TestLoader().loadTestsFromTestCase(foo()[testcase])
    else:
        suite = foo.TestLoader().loadTestsFromTestCase(SMBTransport)
        foo.addTests(foo.TestLoader().loadTestsFromTestCase(TCPTransport))
        foo.addTests(foo.TestLoader().loadTestsFromTestCase(SMBTransport64))
        foo.addTests(foo.TestLoader().loadTestsFromTestCase(TCPTransport64))
    foo.TextTestRunner(verbosity=1).run(suite)
